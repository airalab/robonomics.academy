{"hash":"e312dc4b43fe1b48dcdf9003ac0f9ebcfa7c1c6d","data":{"course":{"id":"a3c4b0bf4ebb6273c6a80d39f61e5f91","courseID":2,"title":"Lição #3, Movimento programado e controlado remotamente","description":"In the second lesson you will learn how to use Spot Command services and walk with Spot.","content":"\n<section class=\"container__reg\">\n\n## Do que se trata?\n\nNa segunda lição, você aprenderá como usar os serviços de Comando do Spot e caminhar com o Spot.\n\n</section>\n\n\n<section class=\"container__reg\">\n\n## O desafio\n\nVocê tem uma lista de pontos com suas coordenadas locais no diretório <code>/home/student/lessons</code>.\n\nA lista de movimentos:\n\n<List>\n<li>Para girar em torno de si mesmo</li>\n<li>Para acenar com a cabeça</li>\n<li>Para mudar a postura das pernas do robô</li>\n<li>Para ir de lado para o próximo ponto</li>\n<li>Deitar-se na posição para trocar de bateria (este comando deve ser executado por último porque corta a energia dos motores).</li>\n</List>\n\n<br>\n\nCrie e execute um script Python que implemente o comportamento descrito. Você pode encontrar as coordenadas locais do Spot com (antes de precisar criar <code>state_client</code>, você pode encontrar informações sobre ele em [Entendendo a Programação do Spot](https://dev.bostondynamics.com/docs/python/understanding_spot_programming)):\n\n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\nfrom bosdyn.client.frame_helpers import get_vision_tform_body\nget_vision_tform_body(state_client.get_robot_state().kinematic_state.transforms_snapshot\n</lessonCodeWrapper>\n\n</section>\n\n<section class=\"container__reg\">\n\n## Instruções \n\n<List type=\"numbers\">\n\n<li>\n\nVocê pode controlar o Spot com o <code>Robot Command Service</code>. Primeiro você precisa construir um comando para fornecê-lo ao Serviço de Comando. O SDK Spot tem uma classe <code>RobotCommandBuilder</code> para ele.\n\nLista completa de métodos e suas descrições você pode encontrar [aqui](https://github.com/boston-dynamics/spot-sdk/blob/7ce5c5f31f4e1e45e9ff4be29fb097e258b75919/python/bosdyn-client/src/bosdyn/client/robot_command.py#L593). Nesta lição, você pode precisar usar:\n\n\\- Comando ficar em pé\n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\ndef stand_command(params=None, body_height=0.0, footprint_R_body=geometry.EulerZXY())\n</lessonCodeWrapper>\n\n\\- Ir ao ponto \n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\ndef synchro_se2_trajectory_point_command(goal_x, goal_y, goal_heading, frame_name, params=None, body_height=0.0, locomotion_hint=spot_command_pb2.HINT_AUTO, build_on_command=None)\n</lessonCodeWrapper>\n\nVerificar o uso [aqui](\"https://github.com/boston-dynamics/spot-sdk/blob/master/python/examples/frame_trajectory_command/frame_trajectory_command.py).\n\nAtenção! O exemplo considera o movimento do robô em relação à posição atual. Em seu caso, você deve especificar os movimentos relativos ao ponto em que o robô foi ligado. Isso significa que você pode definir valores de <code>goal_x</code> e  <code>goal_y</code> a partir da tarefa.\n\n\\- Comando de Velocidade\n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\ndef synchro_velocity_command(v_x, v_y, v_rot, params=None, body_height=0.0, locomotion_hint=spot_command_pb2.HINT_AUTO, frame_name=BODY_FRAME_NAME\n</lessonCodeWrapper>\n\n\\- Comando de Posição\n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\ndef stance_command(se2_frame_name, pos_fl_rt_frame, pos_fr_rt_frame, pos_hl_rt_frame, pos_hr_rt_frame, accuracy=0.05, params=None, body_height=0.0, footprint_R_body=geometry.EulerZXY(), build_on_command=None)\n</lessonCodeWrapper>\n\nO exemplo de uso está [aqui](https://github.com/boston-dynamics/spot-sdk/blob/91ed30607264e795699995d6d7834ba0c8a94d36/python/examples/stance/stance_in_place.py).\n\n\n\\- Posicionar para trocar a bateria\n\n<code>def battery_change_pose_command(dir_hint=1)</code>\n\nExemplo de comando de velocidade de construção e funcionamento:\n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\nfrom bosdyn.client.robot_command import RobotCommandClient, RobotCommandBuilder\nimport time\n\ncommand_client=robot.ensure_client(RobotCommandClient.default_service_name)\ncmd=RobotCommandBuilder.velocity_command(0.5, 0, 0.5)\ncommand_client.robot_command(cmd, end_time_secs=time.time() + 2)\n</lessonCodeWrapper>\n\n</li>\n\n<li>\nConecte-se ao Spot a partir de um terminal ou usando a função de execução remota do ambiente de desenvolvimento.\n</li>\n\n<li>\n\nDesenvolva e demonstre sua solução para o desafio.\n\nNós criamos o [E-Stop endpoint](https://dev.bostondynamics.com/python/examples/estop/readme) para você, portanto, você não deve criá-lo. Para autenticação do Spot, use o nome de usuário e a senha do arquivom <code>/home/student/credentials</code>. O endereço do Spot é <code>192.168.50.3</code>.\n\n</li>\n\n</List>\n</section>\n\n<section class=\"container__reg\">\n\n### Você está pronto para praticar?\n\nQuando estiver pronto, você pode comprar uma sessão de prática de 1 hora especificando suas credenciais de acesso (chave SSH) e o horário em que deseja se conectar ao Spot para resolver a tarefa.\n\n##### <LessonButtonLink src=\"https://dapp.spot-sdk.education/#/checkout\" text=\"Alugue uma vaga\" />\n\n</section>","fileInfo":{"path":"pt/online-courses/boston-dynamics-course/3-remote-controlled-and-programmed-motion.md","name":"3-remote-controlled-and-programmed-motion"},"lessonNumber":3}},"context":{}}