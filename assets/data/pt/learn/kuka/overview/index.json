{"hash":"b245a40217fbced1639aa527710a032ddca236bc","data":{"course":{"id":"13a61755e2a27c34517ece4f4d068924","title":"Conectar manipulador Kuka","description":"Conectar Manipulador","content":"\nVídeo com um exemplo de trabalho pode ser encontrado aqui:\n\nhttps://youtu.be/z55HepXbHr8\n\n<br/>\n\n***\n\n<br/>\n\n## Requisitos\n\n<List>\n\n<li class=\"flex\">\n\nROS melódico, Gazebo (instruções de instalação [aqui](http://wiki.ros.org/melodic/Instalação/Ubuntu))\n</li>\n\n<li>Alguns pacotes extras\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li> IPFS 0.4.22 \n\n(baixe daqui](https://www.npackd.org/p/ipfs/0.4.22) e instale)\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>pip3\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt-get install python3-pip\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li>substrate-interface\n\n<LessonCodeWrapper language=\"bash\">\npip3 install substrate-interface\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNó Robonomics (arquivo binário) (baixe a última versão [aqui](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n<li>Extensão do navegador IPFS (não necessário)</li>\n\n</List>\n\n<br/>\n\n***\n\n<br/>\n\n## Instalação\nInstale o manipulador Kuka e os pacotes de controle\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">cd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make</LessonCodeWrapper>\n\n***\n\n<br/>\n\n## Executando o modelo gazebo\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n</LessonCodeWrapper>\n\nEm uma nova janela\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun manipulator_gazebo move_arm_server\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/1.png\" alt=\"model\"/>\n\n***\n\n<br/>\n\n## Executando robonomics\nVá para a pasta com o arquivo robonomics e crie uma rede robonomics local:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/robonomics.png\" alt=\"robonomics\"/>\n\nVá para o [portal Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) e mude para o nó local\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/local.png\" alt=\"local\"/>\n\nEm seguida, vá para Contas e crie a conta `KUKA`. Salve a chave mnemônica da conta, você precisará dela mais tarde. \n\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/create_acc.png\" alt=\"acc\"/>\n\nEnvie algumas unidades para a nova conta de uma das contas padrão.\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/send_money.png\" alt=\"accs\"/>\n\n***\n<br/>\n\n## Executando ipfs\nExecutar ipfs daemon:\n\n<LessonCodeWrapper language=\"bash\">\nipfs daemon\n</LessonCodeWrapper>\n\n***\n\n</br>\n\n## Executando pacote de controle\nNo diretório de configuração no pacote de controle kuka_control, você precisa criar um arquivo de configuração com estas linhas, onde `<sua_mnemônica>` é a semente mnemônica salva:\n\n<LessonCodeWrapper language=\"bash\">\n{\n    \"kuka_mnemonic\": \"[your_mnemonic]\",\n    \"node\": \"ws://127.0.0.1:9944\"\n}\n</LessonCodeWrapper>\n\n\nAgora você pode executar o script de controle:\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun kuka_controller move_arm_client.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/run.png\" alt=\"control\"/>\n\n## Enviando transação\nNo [portal Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) vá para `Desenvolvedor/Extrínsecos`, mude `extrínseco` para `lançamento`. Escolha sua conta `KUKA` em `robô` e mude `param` para `Sim`. Em seguida, pressione `Enviar Transação`\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/launch.png\" alt=\"transaction\"/>\n\nNa janela com o pacote de controle kuka_control você verá:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/res.png\" alt=\"done\"/>\n\nEm seguida, vá para `Desenvolvedor/Estado da Cadeia` no portal Robonomics, selecione `datalog` e `datalogItem((AccountId,u64)): RingBufferItem` na consulta e adicione o datalog `KUKA` com o botão '+':\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/datalog.png\" alt=\"datalog\"/>\n\nAgora você pode encontrar a telemetria do robô no IPFS através deste link com seu hash `https://gateway.ipfs.io/ipfs/<hash>`.\n\n## Solução de problemas\n\nSe `catkin_make` não funcionar com a mensagem de que não consegue encontrar MoveArm.h, tente remover as últimas quatro linhas em CMakeLists.txt no pacote kuka_manipulator_gazebo:\n\n<LessonCodeWrapper language=\"yaml\">\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(move_arm_server src/move_arm_server.cpp)\ntarget_link_libraries(move_arm_server ${catkin_LIBRARIES})\nadd_dependencies(move_arm_server beginner_tutorials_gencpp)\n</LessonCodeWrapper>\n\nFaça `catkin_make` sem essas linhas, depois retorne-as e faça `catkin_make` novamente.","fileInfo":{"path":"pt/learn/kuka/overview.md","name":"overview"},"defaultName":"Connect Kuka manipulator","lastUpdate":null}},"context":{}}