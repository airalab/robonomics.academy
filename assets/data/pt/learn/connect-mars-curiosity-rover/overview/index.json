{"hash":"e32ec6aa0237b51fe496ef5a5df720ef84304a93","data":{"course":{"id":"91015e8ca447c6d590fd776a585f65f8","title":"Conectar Mars Curiosity Rover","description":"Conectar Mars Curiosity rover sob controle da parachain Robonomics.","content":"\n**Vamos ver como o controle da Parachain Robonomics permite fazer o Mars Curiosity rover se mover. Requisitos:**\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (manual de instalação [aqui](http://wiki.ros.org/melodic/Instalação))\n\n</li>\n\n\n<li>pacotes extras:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n  sudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS até [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n\n</li>\n\n<li class=\"flex\">\n\n[Extensão complementar IPFS](https://github.com/ipfs/ipfs-companion)\n\n</li>\n\n<li class=\"flex\">\n\nNó Robonomics (arquivo binário) (baixe a última versão [aqui](https://github.com/airalab/robonomics/releases). Este tutorial foi testado com sucesso na versão 1.1)\n\n</li>\n\n</List>\n\n<br/>\n\nAqui está o vídeo mostrando o lançamento bem-sucedido:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n\n<br/>\n\n### 1. Configurar uma simulação\n\nBaixar o pacote do rover Curiosity:\n<LessonCodeWrapper language=\"bash\">\n  mkdir -p robonomics_ws/src\n  cd robonomics_ws/src\n  git clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\n  cd ..\n  catkin build\n</LessonCodeWrapper>\n\nPrecisamos ajustar as condições iniciais para fazer nosso rover aparecer suavemente:\n\n<List>\n\n<li>Ir para\n\n`src/master/curiosity_mars_rover_description/worlds` e altere a linha 14 do arquivo` mars_curiosity.world` to \n`<pose>0 0 8 0 0 0</pose>`\n\n</li>\n\n<li>Ir para\n\n`src/master/curiosity_mars_rover_description/launch` e alterar a linha 4 do arquivo `mars_curiosity_world.launch` para \n`<arg name=\"paused\" default=\"false\"/>`\n\nNão se esqueça de adicionar o comando source ao `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n</li>\n\n<li> Reiniciar console e lançar a simulação:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\n  roslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/rover.jpg\" alt=\"Mars rover\"/>\n\n</li>\n\n</List>\n\nNota: se a imagem estiver escura, por exemplo, sombreada, altere `Camera` para `Orthorgraphic` na barra de ferramentas do Gazebo.\nA simulação pode ser fechada por um tempo.\n\n------------\n\n<br/>\n\n### 2. Baixar pacote do controlador Robonomics\nPara baixar um pacote de controlador para Rover digite no terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n</LessonCodeWrapper>\n\n\n------------\n\n<br/>\n\n### 3. Gerenciar contas no DAPP\nComo estamos testando, vamos criar uma rede local de robonomics com o arquivo binário robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n  ./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/robonomics.jpg\" alt=\"Executarning node\"/>\n\n\nIr para [Portal Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) e mudar para nó local \n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/local_node.jpg\" alt=\"Local node\"/>\n\n\nIr para Contas e criar contas **CURIOSITY** e **EMPLOYER**.\n\n**Importante**! Copie o endereço de cada conta (para copiar o endereço, clique no ícone da conta) e a **seed mnemônica** da conta da Curiosity (obtida ao criar a conta)\nTransferir algum dinheiro (unidades) para essas contas. Você pode ler mais sobre contas em Robonomics [aqui](https://wiki.robonomics.network/docs/en/create-account-in-dapp/)\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/account_creation.jpg\" alt=\"Account creation\"/>\n\n\nAdicione esses endereços, seed e endereço do nó (padrão `ws://127.0.0.1:9944` para nó de desenvolvedor) em `config.config` em `robonomics_ws/src/robonomics_sample_controller/src`. Sem aspas.\n\n------------\n\n<br/>\n\n### 4. Iniciar Robonomics\n\nAntes de prosseguir, certifique-se de ter instalado a [Extensão Companheira IPFS](https://github.com/ipfs/ipfs-companion).\n\nEm um terminal separado, inicie o IPFS:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nifps init #você só precisa fazer isso uma vez por instalação do IPFS\nipfs daemon\n</LessonCodeWrapper>\n\nEm outro terminal separado, inicie a simulação da Curiosity se não estiver ao vivo:\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\nAguarde até que fique parado\n\nEm outro terminal, inicie o controlador:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nrosrun robonomics_sample_controller sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/controller.jpg\" alt=\"Controller\"/>\n\nAgora você pode enviar uma transação acionando o Rover para começar a se mover e coletar dados. Para fazer isso, você pode usar o mesmo [Portal Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/).\nVá para `Desenvolvedor->Extrínsecos` e selecione a conta do empregador da Curiosity, extrínseco `launch`, conta alvo da Curiosity e `yes` como parâmetro.\nEnvie o extrínseco.\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/extrinsic.jpg\" alt=\"Extrinsic\"/>\n\nO robô deve começar a se mover. Ele não aceitará comandos de outras contas nem comandos com parâmetro `no`. O rover se moverá e coletará dados por cerca de um minuto.\nMais tarde, quando o trabalho estiver concluído:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/job_done.jpg\" alt=\"Job done\"/>\n\n\nNo portal Robonomics vá para `Desenvolvedor -> Estado da cadeia` e obtenha um datalog `CURIOSITY` usando o botão “+” com `datalog -> RingBufferItem` selecionado como consulta: \n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/datalog.jpg\" alt=\"Datalog\"/>\n\n\nAgora o hash IPFS da telemetria está salvo no blockchain. Para ver os dados, basta copiar o hash e encontrá-lo em um gateway:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/data_in_ipfs.jpg\" alt=\"Data in IPFS\"/>\n\n\nEssa telemetria é mantida em um armazenamento descentralizado, e seu hash é armazenado em um blockchain!\n","fileInfo":{"path":"pt/learn/connect-mars-curiosity-rover/overview.md","name":"overview"},"defaultName":"Connect Mars Curiosity Rover","lastUpdate":"Thu May 18 2023 10:41:00 GMT+0400 (Samara Standard Time)"}},"context":{}}