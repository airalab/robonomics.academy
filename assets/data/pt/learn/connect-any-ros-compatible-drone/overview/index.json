{"hash":"cc71bf47aafce049dec68b910ec43100bf99e437","data":{"course":{"id":"e748eba8c9dd1a6af84bb60049fc3ff4","title":"Conectar drone compatível com ROS","description":"Conectar qualquer robô compatível com ros sob controle da parachain robonomics.","content":"\n\n## Parte 1. Lançamento por Transação\n\n**Neste artigo mostraremos que com a ajuda das ferramentas Robonomics você pode controlar qualquer dispositivo compatível com ROS. Vamos encontrar um pacote de simulação de drone aleatório na web e ajustá-lo para funcionar com Robonomics.**\n**Requisitos:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (manual de instalação [aqui](http://wiki.ros.org/melodic/Instalação))\n\n</li>\n\n<li class=\"flex\">\n\nNó Robonomics (arquivo binário) (baixe a última versão [aqui](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n</List>\n\n<br/>\n\nTodo o processo de codificação desta parte da demonstração é apresentado em um vídeo abaixo.\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. Encontrar uma simulação\nVamos navegar na web. Pesquise no Google por `simulador de drone ROS`. O primeiro link provavelmente mostrará a página `tum_simulator` em [http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\nEstá bastante desatualizado, então é melhor encontrarmos um fork para o nosso sistema. Pesquise no Google por `tum_simulator Ubuntu 18 Gazebo 9 fork`. O primeiro resultado é um repositório GitHub [repo](https://github.com/tahsinkose/sjtu-drone) com um pacote apropriado. Baixe-o\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\nNão se esqueça de adicionar o comando de origem ao `~/.bashrc`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\nAgora podemos executar a simulação para ver o que precisamos fazer para colocar o drone sob controle da parachain.\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. Inspecionar tópicos do ROS\nQuando a simulação estiver em execução, em uma nova guia execute o seguinte comando para ver a lista de tópicos usados pelo drone:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\nVamos dar uma olhada em `/cmd_vel`, `/drone/takeoff` e `/drone/land`:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\nComo pode ser visto, deve haver mensagens dos tipos `Twist` e `Empty`, que são partes de `std_msgs` e `geometry_msgs`, vamos usar isso no controlador. Desligue a simulação por um tempo.\n\n## 3. Baixar pacote do controlador\nGlobalmente, a principal diferença do controlador de robô ROS casual é um bloco de código, que verifica todas as transações na rede usando [Robonomics IO](https://wiki.robonomics.network/docs/rinterface/). O pacote em si está disponível no GitHub. Baixe-o e construa o espaço de trabalho:\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. Gerenciar contas no DAPP\nComo estamos testando, vamos criar um nó de rede robonomics local com o arquivo binário robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Importante!** Antes dos próximos lançamentos é necessário remover um diretório `db` com\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nApós um lançamento bem-sucedido, crie contas seguindo [este](https://wiki.robonomics.network/docs/create-account-in-dapp/) manual. **Não se esqueça de salvar a semente e o endereço de cada conta! Você precisará deles para as transações**. Adicione esses endereços, sementes e caminho para o arquivo binário robonomics ao arquivo `config.config` em `robonomics_ws/src/robonomics_sample_controller/src`. Transfira algum dinheiro (unidades) para essas contas:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. Lançando o drone sob controle da parachain\n\nAté agora o **único coisa em execução** deve ser o nó local robonomics. Em um terminal separado, inicie a simulação do drone:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nExecute o script:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\nAgora você pode enviar uma transação acionando o drone para começar a voar. Para fazer isso, você deve usar o subcomando `write` do Robonomics IO do arquivo binário robonomics:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nOnde `<DRONE_ADDRESS>` e `<EMPLOYER’S_KEY>` são substituídos pelas strings previamente salvas correspondentes.\nVocê deve ver o log `\"Decolando\"` e o drone deve começar a voar:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\nÉ assim que qualquer robô compatível com ROS pode ser controlado pelo controle da parachain Robonomics.\n\n\n##  Parte 2. Salvando Dados na Blockchain\n\n**Nesta parte continuaremos usando as ferramentas Robonomics para fazer um drone ser controlado por uma parachain. Desta vez adicionaremos o envio de dados para o IPFS e opções de armazenamento de hash na cadeia. Abaixo está a instrução e trechos de código. Requisitos:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (manual de instalação [aqui](http://wiki.ros.org/melodic/Instalação))\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22 (baixe de [aqui](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz) e instale)\n</li>\n\n<li class=\"flex\">\n\nNó Robonomics (arquivo binário) (baixe a última versão [aqui](https://github.com/airalab/robonomics/releases))\n</li>\n\n<li>Dependências do Python:\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\nTodo o processo de codificação desta parte da demonstração é apresentado em um vídeo abaixo.\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. Adicionar dependências\nSe lançarmos uma simulação e olharmos a lista de tópicos (veja a parte 1), veremos que há um tópico contendo dados da câmera frontal e usando o tipo de mensagem `sensor_msgs/Image`:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\nVamos tentar tirar uma foto a cada 1 segundo e depois do voo publicar essas fotos no IPFS. Se você completou o primeiro tutorial, não precisa baixar mais nada. É o script `drone_sample_controller_pictures.py`.\n\n## 2. Gerenciar contas no DAPP\nComo feito em um tutorial anterior, crie um nó de rede local robonomics com o arquivo binário robonomics:\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Importante!** Antes dos próximos lançamentos é necessário remover um diretório `db` com\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nApós um lançamento bem-sucedido, crie contas seguindo [este](https://wiki.robonomics.network/docs/create-account-in-dapp/) manual. **Não se esqueça de salvar a semente e o endereço de cada conta! Você precisará deles para as transações**. Adicione esses endereços, sementes e caminho para o arquivo binário robonomics ao arquivo `config.config` em `robonomics_ws/src/robonomics_sample_controller/src`. Transfira algum dinheiro (unidades) para essas contas:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. Lançamento\nAté agora o **único coisa em execução** deve ser o nó local robonomics. Em um terminal separado, inicie a simulação do drone:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nEm outro lançamento, inicie o daemon ipfs:\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nExecute o script:\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\nAgora você pode enviar uma transação para acionar o drone a começar a voar e tirar fotos. Para fazer isso, você deve usar o subcomando `write` do Robonomics IO do arquivo binário robonomics:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nOnde `<DRONE_ADDRESS>` e `<EMPLOYER’S_KEY>` são substituídos pelas strings previamente salvas correspondentes.\nVocê deve ver o log `\"Decolando\"` e o drone deve começar a voar e tirar fotos:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\nMais tarde, quando o trabalho estiver concluído, no portal Robonomics vá para `Desenvolvedor` -> `Estado da cadeia` e adicione um datalog `DRONE` usando o botão `“+”` com o `datalog` selecionado como consulta de estado. O hash IPFS da telemetria foi salvo no blockchain. Para ver os dados, basta copiar o hash e adicioná-lo ao endereço [gateway](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/) local `localhost:8080/ipfs/`:\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"pt/learn/connect-any-ros-compatible-drone/overview.md","name":"overview"},"defaultName":"Connect ROS-compatible drone","lastUpdate":"Thu May 04 2023 12:52:55 GMT+0400 (Samara Standard Time)"}},"context":{}}