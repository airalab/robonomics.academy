{"hash":"747fe7ef75ee9f5c9a3260f3225c1f4d5c548a18","data":{"course":{"id":"0f58876b7d61eaf6e8f2794c6057f7a1","title":"Conectar veículo aéreo não tripulado","description":"Conectar veículo aéreo não tripulado","content":"\n**Drone começa a se mover após a transação e armazena o arquivo com as coordenadas no IPFS. O script de controle é baseado no [script de demonstração do GAAS](https://github.com/generalized-intelligence/GAAS)**  \n\nhttps://youtu.be/4CwtGAX1OwM\n\n<br/>\n\n## Requisitos\n\n<List>\n\n<li> dependências para controle:\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt install -y \\\n\tpython3-pip \\\n\tninja-build \\\n\texiftool \\\n\tpython-argparse \\\n\tpython-empy \\\n\tpython-toml \\\n\tpython-numpy \\\n\tpython-yaml \\\n\tpython-dev \\\n\tpython-pip \\\n\tninja-build \\\n\tprotobuf-compiler \\\n\tlibeigen3-dev \\\n\tgenromfs\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\">\npip3 install \\\n\tpandas \\\n\tjinja2 \\\n\tpyserial \\\n\tcerberus \\\n\tpyulog \\\n\tnumpy \\\n\ttoml \\\n\tpyquaternion\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo [tutorial de instalação](http://wiki.ros.org/melodic/Instalação)\n</li>\n\n<li>pacotes extras:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\nsudo apt-get install python-jinja2\nsudo apt-get install python-catkin-pkg\nsudo apt-get install python3-catkin-pkg-modules\n</LessonCodeWrapper>\n\n</li>\n\n<li>Versão do IPFS 0.4.22\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nwget https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-amd64.tar.gz\ntar -xvzf go-ipfs_v0.4.22_linux-amd64.tar.gz\ncd go-ipfs\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNó Robonomics (arquivo binário) (baixe a última versão [aqui](https://github.com/airalab/robonomics/releases))\n</li>\n\n</List>\n\n<br/>\n\n## Configuração do Ambiente\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nsudo ./install_geographiclib_datasets.sh\ncd ~/catkin_ws/src\ngit clone https://github.com/PX4/Firmware.git\ncd Firmware\ngit checkout v1.9.0\nbash ./Tools/setup/ubuntu.sh\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/catkin_ws/src\ngit clone https://github.com/generalized-intelligence/GAAS.git\ncp -r ~/catkin_ws/src/GAAS/simulator/models/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/models/\ncp -r ~/catkin_ws/src/GAAS/simulator/worlds/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/worlds/\ncp -r ~/catkin_ws/src/GAAS/simulator/posix-config/* ~/catkin_ws/src/Firmware/posix-configs/SITL/init/ekf2/\n</LessonCodeWrapper>\n\nModificando seu arquivo `.bashrc`, adicionando as seguintes linhas ao final:  \n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash   \nsource ~/catkin_ws/src/Firmware/Tools/setup_gazebo.bash ~/catkin_ws/src/Firmware/ ~/catkin_ws/src/Firmware/build posix_sitl_default \nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware/Tools/sitl_gazebo\nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models:~/catkin_ws/src/GAAS/simulator/models\n</LessonCodeWrapper>  \n\n  \n## Instalação do Pacote de Controle\nEm um novo Terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd catkin_ws/src\ngit clone https://github.com/tubleronchik/robonomics_drone_sim.git\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\n## Rede Robonomics\n\nPara criar uma rede robonomics local, vá para a pasta com o arquivo binário do robonomics e execute:  \n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --rpc-cors all\n</LessonCodeWrapper>\n\nAdicione o caminho do robonomics ao `config.py`\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/IPFS.jpg\" alt=\"IPFS\"/>\n\nVá para o [portal Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) e mude para o nó local.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/localNode.jpg\" alt=\"localNode\"/>\n\nVá para **Contas** e crie contas **DRONE** e **EMPLOYER**. Salve os nomes das contas, chaves e caminho para **robonomics** em `~/catkin_ws/src/drone_sim/src/config.py`. Transfira algum dinheiro para as contas.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/addingAcc.jpg\" alt=\"accounts\"/>\n\n## Executando a Simulação\nInicie o daemon do IPFS\n\n<LessonCodeWrapper language=\"bash\">\ncd go-ipfs\nipfs daemon\n</LessonCodeWrapper>\n\nEm outro terminal, inicie a simulação:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch px4 mavros_posix_sitl.launch\ncd ~/catkin_ws/src/robonomics_drone_sim/src\npython3 takeoff.py\n</LessonCodeWrapper>\n\nAguardando até \"Aguardando pagamento\" \n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/launch.jpg\" alt=\"launch\"/>\n\nPara enviar uma transação, execute em outra janela:\n`echo \"ON\" | ./robonomics io write launch -r <drone_addres> -s <employer_key>` - onde **<drone_address>** e **<employer_key>** devem ser substituídos pelas strings de `config.py` correspondentes.\n\nApós os dados serem enviados para o IPFS, vá para o **Estado da Cadeia** no [portal Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/). Selecione **datalog** em consulta e adicione o datalog DRONE usando o botão `+`.\n\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/datalog.jpg\" alt=\"datalog\"/>\n\nVocê pode encontrar a telemetria do drone executando `https://gateway.ipfs.io/ipfs/<hash>` inserindo o hash acima.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/output.jpg\" alt=\"output\"/>\n\nÉ importante remover o diretório `db` antes dos próximos lançamentos usando  \n` rm -rf ~/.local/share/robonomics/chains/dev/db`","fileInfo":{"path":"pt/learn/iris-drone/overview.md","name":"overview"},"defaultName":"Connect unmanned aerial vehicle","lastUpdate":"Thu May 04 2023 12:53:05 GMT+0400 (Samara Standard Time)"}},"context":{}}