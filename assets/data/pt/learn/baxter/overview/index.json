{"hash":"747fe7ef75ee9f5c9a3260f3225c1f4d5c548a18","data":{"course":{"id":"282f334dfd454ee6b8564ed3bde88a84","title":"Controlar o robô Baxter","description":"Controlar o robô Baxter","content":"Exemplo de como funciona:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## Requisitos:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (manual de instalação aqui)  \n\n</li>\n\n<li>pacotes extras:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effout-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS até 0.6.0 (baixe daqui e instale)\n\n</li>\n\n<li> pacotes python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nBaixe o nó Robonomics mais recente aqui (última versão testada v1.1)\n\n</li>\n\n<li>Extensão do navegador IPFS (não necessário)</li>\n\n</List>\n\n<br/>\n\n## 0. instale a extensão CV Bridge para python3\n\n<List>\n\n<li> Crie um espaço de trabalho catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Instrua o catkin a definir variáveis cmake. Use sua versão atual do `python`. Para mim, é `python3.6`\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Clone src cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Encontre a versão do cv_bridge em seu repositório:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Verifique a versão correta no repositório git. No nosso caso é 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Construir:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Estender o ambiente com novo pacote:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Teste:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. Baixe pacotes de simulação e controle\nBaixe os pacotes:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nNão se esqueça de adicionar o comando source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Iniciar simulação\nVamos iniciar o mundo do gazebo e colocar nosso baxter nele:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nAbra mais uma janela no terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nVocê pode colocar alguns modelos na frente do nosso baxter. Será mais interessante.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Gerenciar contas no DAPP\n\nComo estamos testando, vamos criar uma rede robonomics local com o arquivo binário robonomics. Vá para a pasta com o arquivo robonomics e execute:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nVá para o portal Robonomics Parachain e mude para o nó local\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nVá para Contas e crie contas __Baxter__ e __Empregador__ (__Robô__ não é necessário)\n\n__Importante!__ Copie o **Mnemônico** e o **endereço** de cada conta (para copiar o endereço, clique no ícone da conta). **Mnemônico** é a chave privada da conta.\nTransfira algum dinheiro (unidades) para essas contas:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nAdicione o **Mnemônico** e o **endereço** do Baxter ao `config.yaml` em `robot_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Iniciar simulação\n\nEm uma nova janela, execute:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nAbra um terminal separado e inicie o *pacote de controle*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nAgora você pode enviar uma transação para fazer o Baxter começar a se mover e coletar dados. Para fazer isso, você pode usar o mesmo portal Robonomics Parachain. Vá para **Desenvolvedor->Extrínsecos** e selecione a conta do empregador do Baxter, extrínseco `launch`, conta alvo da conta do Baxter e `yes` como parâmetro. Envie o extrínseco.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nO robô deve começar a se mover. Ele não aceitará comandos de outras contas nem comandos com parâmetro `no`.\nVocê deve ver o seguinte:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nquando o trabalho estiver concluído, vá para o Portal Robonomics para `Desenvolvedor > Estado da cadeia`. Escolha `datalog.datalogItem(AccountId,u64)` em **consulta de estado**. Se você quiser mostrar todos os datalogs, desligue a `opção de inclusão` adicione visualizar a mensagem de datalog do Baxter usando o botão \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nAgora o hash IPFS do telemetria e fotos está salvo no blockchain. Para ver os dados, basta copiar o hash e inseri-lo na barra de pesquisa com URL: gateway.ipfs.io/ipfs/<br coloque seu hash aqui >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\nClique em __Ver no Gateway__ e é isso!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Simulação do Baxter v2.0\n\nExemplo de como funciona:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## Requisitos:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (manual de instalação aqui)  \n\n</li>\n\n<li>pacotes extras:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS até 0.6.0 (baixe daqui e instale)\n\n</li>\n\n<li> pacotes python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNó Robonomics (arquivo binário) (baixe a última versão aqui)\n\n</li>\n\n<li class=\"flex\">\n\nCrie contas __Baxter__ e __Empregador__ no **Portal Robonomics** (você pode encontrar o tutorial \"Criar uma Conta no Portal Robonomics\" aqui).\n</li>\n\n<li>Extensão do navegador IPFS (não necessário)</li>\n\n</List>\n\n<br/>\n\n## 0. instale a extensão CV Bridge para python3\n\n<List>\n\n<li> Crie um espaço de trabalho catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Instrua o catkin a definir variáveis cmake. Use sua versão atual do `python`. Para mim, é `python3.6`\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Clone src cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Encontre a versão do cv_bridge em seu repositório:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Verifique a versão correta no repositório git. No nosso caso é 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Construir:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Estender o ambiente com novo pacote:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Teste:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. Baixe pacotes de simulação e controle\nPrecisaremos criar 2 espaços de trabalho - um para os principais pacotes do Baxter e outro para o programa de controle principal.\nPrimeiro espaço de trabalho. É o programa de controle principal. Ele será executado sob python3.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nSegundo espaço de trabalho. Todos os pacotes do Baxter estarão lá. A simulação é muito antiga, então só pode ser executada sob python2.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nEsses pacotes foram criados para o ROS indigo. Temos que alterar alguns arquivos para executá-los no ROS melodic.\nVamos usar arquivos de **patch**.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nE vamos construir todos os nossos pacotes:  \nPrimeiro construa os pacotes do Baxter\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nEm seguida, retorne ao primeiro espaço de trabalho e construa também:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nNão se esqueça de adicionar o comando source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Iniciar simulação\n### Vamos iniciar nossa simulação:\nPrimeiro vá para `robot_ws` e copie e edite baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nEncontre seu endereço IP local com o comando:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\nEdite os seguintes valores em `baxter.sh` :\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- seu_ip - coloque seu endereço IP local. Veja `ip a`\n- versão_ros - por exemplo \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nExecute o script shell do baxter com sim especificado:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nVocê pode colocar alguns modelos na frente do nosso baxter. Será mais interessante.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Gerenciar contas no DAPP\n\nComo estamos testando, vamos criar uma rede robonomics local com o arquivo binário robonomics. Vá para a pasta com o arquivo robonomics e execute:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nVá para o portal Robonomics Parachain e mude para o nó local\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nVá para Contas e crie contas __Baxter__ e __Empregador__.\n\nVocê pode encontrar o manual \"Criar uma Conta no Portal Robonomics\" aqui\n\n__Importante!__ Copie o **Mnemônico** e o **endereço** de cada conta (para copiar o endereço, clique no ícone da conta). **Mnemônico** é a chave privada da conta.\n\nTransfira algum dinheiro (unidades) para essas contas:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nAdicione o **mnemônico** e **endereço** do Baxter ao `config.yaml` em `robonomics_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Iniciar simulação\n\nEm uma nova janela, execute:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nAbra um terminal separado e inicie o *pacote de controle*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nAgora você pode enviar uma transação para acionar o Baxter a começar a se mover e coletar dados. Para fazer isso, você pode usar o mesmo portal [Portal da Parachain Robonomics][db5]. Vá para **Desenvolvedor->Extrínsecos** e selecione a conta do empregador do Baxter, extrínseco `launch`, conta do Baxter como conta de destino e `yes` como parâmetro. Envie o extrínseco.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nO robô deve começar a se mover. Ele não aceitará comandos de outras contas nem comandos com parâmetro `no`.\nVocê deve ver o seguinte:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nQuando o trabalho estiver concluído, vá para o Portal Robonomics para `Desenvolvedor > Estado da cadeia`. Escolha `datalog.datalogItem(AccountId,u64)` em **consulta de estado**. Se você deseja mostrar todos os datalogs, então desative a opção `incluir` adicione visualizar a mensagem de datalog do Baxter usando o botão \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nAgora o hash IPFS da telemetria e fotos está salvo no blockchain. Para ver os dados, basta copiar o hash e inseri-lo na barra de pesquisa com URL:  \n#### gateway.ipfs.io/ipfs/< coloque seu hash aqui>\n\nÉ isso!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/Instalação>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"pt/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}