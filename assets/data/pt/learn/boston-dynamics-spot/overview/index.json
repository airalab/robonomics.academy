{"hash":"e32ec6aa0237b51fe496ef5a5df720ef84304a93","data":{"course":{"id":"4b75c255afad8ed40fc2e07de215f9d2","title":"Parada de Emergência, Inicialização, Controle de Posição do Corpo","description":"Durante esta lição, você aprenderá como se autorizar como usuário, obter controle de potência do motor e enviar comandos básicos para o Spot.","content":"\n<RoboAcademyText fWeight=\"500\">\nDurante esta lição, você aprenderá como se autorizar como usuário, obter controle de potência do motor e enviar comandos básicos para o Spot.\n</RoboAcademyText>\n\n## Teoria\n\nComo todos os robôs sérios, o Boston Dynamics Spot possui um mecanismo de proteção — [serviço E-Stop](https://dev.bostondynamics.com/docs/concepts/estop_service) (Parada de Emergência) que deve estar sempre ativo durante a operação do Spot para evitar possíveis danos físicos. Ao ligar o E-Stop, todas as juntas são congeladas instantaneamente (isso acontece sem desligar os motores se o robô estiver ligado).\n\nPrimeiramente, devemos assumir o controle sobre o robô. Existem duas maneiras de fazer isso - *adquirir* ou *tomar*. *Adquirir* significa pedir controle de forma gentil, se alguém estiver controlando o robô agora, seu pedido será recusado. De outra forma, *tomar* significa assumir o controle à força, não importa se o operador atual existe.\n\nPortanto, para fazer algum movimento, você deve seguir o esquema:\n\n<LessonImages src=\"boston-dynamics-spot/e_stop_scheme.png\" alt=\"Estados de Execução do Robô\" imageClasses=\"mb\"/>\n\nRobot Execution States\n\nNesta lição, você aprenderá como controlar a rotação do robô alterando seu *yaw*, *roll* e *pitch*. Na imagem abaixo, é mostrado o sistema de coordenadas do quadro do corpo:\n\n<LessonImages src=\"boston-dynamics-spot/spot_coords.png\" alt=\"Coordenadas do Spot\" imageClasses=\"mb\"/>\n\nSpot coordinates\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nOs ângulos em um código são representados em radianos.\n</RoboAcademyText>\n\nComo resultado da lição, você desenhará a primeira letra do seu nome no ar com o rosto do Spot. Vamos começar a configuração!\n\n## Configurar Gitpod\n\nPara esta lição, estaremos usando o Gitpod, um IDE baseado em nuvem que permite praticar sem instalar nenhum software especial em seu computador.\n\n1. Cadastre-se no [Gitpod](https://gitpod.io/).\n2. Acesse nosso [ambiente educacional do Spot](https://gitpod.io/#github.com/merklebot/spot-edu-environment) e abra-o em nosso navegador. Você verá a janela com funções típicas de um IDE. \n3. Clique no ícone do Menu, depois vá para Terminal e crie um novo terminal.\n\n<LessonImages src=\"boston-dynamics-spot/gitpod_terminal.png\" alt=\"terminal\" imageClasses=\"mb\"/>\n    \n    \n4. Copie e cole este comando:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npython3 prepare_yggdrasil.py\nsudo ./start_yggdrasil.sh\n\n</LessonCodeWrapper>\n\ne pressione `Enter`.\n\n1. Abra um novo terminal (agora você pode fazer isso pressionando o botão `+`) e teste a conexão com o comando\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nping6 200:42f6:d055:e74e:ce4a:35aa:953a:70f7\n\n</LessonCodeWrapper>\n\nVocê deverá ver algo como isso:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngitpod /workspace/spot-edu-environment (main) $ ping6 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09\nPING 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09(202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09) 56 data bytes\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=1 ttl=64 time=846 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=2 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=3 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=4 ttl=64 time=197 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=5 ttl=64 time=219 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=6 ttl=64 time=242 ms\n\n</LessonCodeWrapper>\n\n1. Antes do horário agendado, enviaremos a você a chave privada para estabelecer a conexão SSH.\n2. Copie sua chave privada para o arquivo `id_ed25519`. Você pode encontrar o arquivo no explorador de barra lateral do *stop-edu-enviroment*.\n3. **Adicione uma linha em branco no final do** arquivo `id_ed25519` ***, isso é necessário para que o SSH funcione corretamente.*** Pressione `Ctrl+S` para salvar as alterações.\n\nSe tudo estiver correto, você pode começar a completar a lição editando `lesson1.py`\n\nPara executar o código, use o comando:\n\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n\n</LessonCodeWrapper>\n\n\n<RoboAcademyText fWeight=\"700\" fStyle=\"normal\">\nLembre-se de garantir que ninguém mais esteja executando seu programa no momento.\n</RoboAcademyText>\n\n\n## Agende a sessão de prática\n\nUse o site de agendamento do Spot para escolher o horário para sua sessão de prática:\n\n[meetings.hubspot.com/strelka](https://meetings.hubspot.com/strelka)\n\n## Prática\n\nAgora faremos um script simples para o Spot desenhar na tela usando os movimentos de sua cabeça. \n\n<LessonCodeWrapper language=\"python\" codeClass=\"big-code\">\n# Import Spot Control modules\nimport bosdyn.client\nfrom bosdyn.client.robot_command import RobotCommandClient, blocking_stand\nfrom bosdyn.client.robot_command import RobotCommandBuilder\nfrom bosdyn.geometry import EulerZXY\nimport time\n# ENTER YOUR AUTH DATA HERE\nROBOT_IP=\"192.168.50.3\"\nSPOT_USERNAME=\"student\"\nSPOT_PASSWORD=\"\"\n# Helpers to control camera drawing (you don't need to modify it)\nimport requests\nVIDEOSERVER_URL=\"http://luke.merklebot:8000/\"\nVIDEOSERVER_TOKEN=\"1234\"\ndef notify_start_line():\n  requests.post(VIDEOSERVER_URL + \"start_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_stop_line():\n  requests.post(VIDEOSERVER_URL + \"stop_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_clear_canvas():\n    requests.post(VIDEOSERVER_URL + \"clear_canvas\", json={\"token\": VIDEOSERVER_TOKEN})\n# Start with registering out SDK\nsdk = bosdyn.client.create_standard_sdk('LessonOneClient')\n# Create instance of robot and auth with credentials\nrobot = sdk.create_robot(ROBOT_IP)\nrobot.authenticate(SPOT_USERNAME, SPOT_PASSWORD)\n# Create lease client and take exclusive control over Spot.  \nlease_client = robot.ensure_client('lease')\nlease = lease_client.take()\nlease_keep_alive = bosdyn.client.lease.LeaseKeepAlive(lease_client)\n# Try to power on the robot\nrobot.power_on(timeout_sec=20)\nif robot.is_powered_on():\n    print(\"Powered On\")\n\t\t# If everything went smooth, Spot face lights should turn green\nelse:\n\t\t# In case of some problems, e.g. somebody stole control over robot\n    print(\"Failed\")\n    exit(0)\n# Synchronize Spor inner time with ours - to avoid outdated commands\nrobot.time_sync.wait_for_sync()\n# To execute robot movement, create command client through which orders are sent\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\n# Start movement with simple stand up\nblocking_stand(command_client, timeout_sec=10)\n# Rotate robot body:\n#  1. Build command for body rotation. It’s not an easy task to control robot motion with commands on low level. \n#     Bosdyn Client allow as to use a shortcut - RobotCommandBuilder. It contains a number of predefined commands, \n#     you need just to choose one of your liking and insert parameters\nfootprint_R_body = EulerZXY(yaw=0.1, roll=0.1, pitch=0.1)\ncmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n#  2. Execute builded command\ncommand_client.robot_command(cmd)\ntime.sleep(2)\n# Return robot state back\ncommand_client.robot_command(RobotCommandBuilder.synchro_stand_command(footprint_R_body=EulerZXY(yaw=0, roll=0, pitch=0)))\ntime.sleep(2)\n# Change robot height\ncmd = RobotCommandBuilder.synchro_stand_command(body_height=0.1)\ncommand_client.robot_command(cmd)\n# Now we are ready to draw letter. \ndef draw_letter(command_client):\n\t\t# Choose points to draw (see the coords explanation bellow)\n    points_xy_draw = (\n        (125, 125),\n        (375, 875),\n        (500, 500),\n        (250, 500),\n        (500, 500),\n        (625, 125),\n    )\n    for x, y in points_xy_draw:\n        convert = lambda x: (x / 1000 - 0.5) * -1\n        x, y = map(convert, (x, y))\n        footprint_R_body = EulerZXY(\n            yaw=x, \n            roll=0.0, \n            pitch=y,\n        )\n        cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n        command_client.robot_command(cmd)\n        time.sleep(1)\nnotify_clear_canvas()\nnotify_start_line()\ndraw_letter(command_client)\nnotify_stop_line()\n# Turn off the robot gracefully\nrobot.power_off(cut_immediately=False)\n\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nSe precisarmos mover a cabeça do Spot para algum ponto na câmera, devemos fazer alguns cálculos grandes com muitos parâmetros não lineares, o que não é uma tarefa simples. Mas poderíamos dizer que, localmente, os ângulos de yaw e pitch poderiam ser usados aproximadamente como coordenadas cartesianas com algum coeficiente em uma imagem.\n</RoboAcademyText>\n\n\n<LessonImages src=\"boston-dynamics-spot/cartesian.jpeg\" alt=\"spot\" imageClasses=\"mb\"/>\n\nAgora você pode tentar executar o script e ver o resultado. Não se esqueça de salvar seu código com Ctrl+S:\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n</LessonCodeWrapper>\n\n\n### O vídeo do Spot pode ser encontrado aqui:\n[https://codepen.io/smehnov/pen/BaVNrPM](https://codepen.io/smehnov/pen/BaVNrPM)\n\n\n## Desafio\nCrie um script em Python que controle a posição do corpo do robô com uma sequência de movimentos:\n\n1. Levantar\n2. Traçar suas iniciais com o rosto (uma letra, pelo menos 3 pontos)\n3. Sentar\n\n## Resultados\n\nAgora, você sabe como:\n\n- trabalhar com o SDK do Spot\n- construir um comando básico\n- rotacionar o corpo do robô\n- conectar-se ao Spot\n\nE até desenhou uma letra. Parabéns!\n\n\n<RoboAcademyText fWeight=\"500\">\n\nColetamos um [rosbag](http://wiki.ros.org/rosbag) com os dados das juntas do Spot, para que você possa visualizá-los (por exemplo, com [foxglove](https://www.notion.so/Lesson-1-Emergency-Stop-Initialization-Body-Position-Control-4ccf6316330d4680ab1bb571b2b788d5)). O certificado será enviado para seu e-mail em breve.\n\n</RoboAcademyText> \n\n\n## [Agende sua primeira lição](https://meetings.hubspot.com/strelka)","fileInfo":{"path":"pt/learn/boston-dynamics-spot/overview.md","name":"overview"},"defaultName":"Software Developing for Boston Dynamics Spot","lastUpdate":null}},"context":{}}