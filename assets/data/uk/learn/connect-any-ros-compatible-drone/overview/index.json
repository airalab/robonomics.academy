{"hash":"957c30fcef9ac2d232ac92277ff384b34731a809","data":{"course":{"id":"8c0aa1b5e146e67609288e938bd26c84","title":"Підключіть дрон, сумісний з ROS","description":"Підключіть будь-якого робота, сумісного з ROS, під управлінням паракейну Robonomics.","content":"\n\n## Частина 1. Запуск за транзакцією\n\n**У цій статті ми покажемо, що за допомогою інструментів Robonomics ви можете керувати будь-яким пристроєм, сумісним з ROS. Ми знайдемо випадковий пакет симуляції дрона в Інтернеті і налаштуємо його для роботи з Robonomics.**\n**Вимоги:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (інструкція з встановлення [тут](http://wiki.ros.org/melodic/Встановлення))\n\n</li>\n\n<li class=\"flex\">\n\nВузол Robonomics (бінарний файл) (завантажте останню версію [тут](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n</List>\n\n<br/>\n\nВесь процес написання цієї частини демонстрації представлений у відео нижче.\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. Знайдіть симуляцію\nДавайте шукати в Інтернеті. Пошук Google за `ROS drone simulator`. Перше посилання, ймовірно, покаже вам сторінку `tum_simulator` на [http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\nВона досить застаріла, тому ми краще знайдемо вілку для нашої системи. Пошук Google за `tum_simulator Ubuntu 18 Gazebo 9 fork`. Перший результат - це GitHub [репозиторій](https://github.com/tahsinkose/sjtu-drone) з відповідним пакетом. Завантажте його\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\nНе забудьте додати команду джерела до `~/.bashrc`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\nТепер ми можемо запустити симуляцію, щоб побачити, що нам потрібно зробити, щоб взяти дрона під управління паракейну.\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. Огляд тем ROS\nКоли симуляція запущена, у новій вкладці запустіть наступну команду, щоб побачити список тем, які використовуються дроном:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\nДавайте подивимося на `/cmd_vel`, `/drone/takeoff` та `/drone/land`:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\nЯк можна побачити, тут повинні бути повідомлення типів `Twist` та `Empty`, вони є частинами `std_msgs` та `geometry_msgs`, ми будемо використовувати це в контролері. Закрийте симуляцію на деякий час.\n\n## 3. Завантажте пакет контролера\nЗагалом, основна відмінність від звичайного контролера робота ROS - це блок коду, який перевіряє всі транзакції в мережі за допомогою [Robonomics IO](https://wiki.robonomics.network/docs/rinterface/). Сам пакет доступний на GitHub. Завантажте його та побудуйте робоче середовище:\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. Керування обліковими записами в DAPP\nОскільки ми тестуємо, давайте створимо локальний вузол мережі robonomics з бінарним файлом robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Важливо!** Перед наступними запусками необхідно видалити каталог `db` з\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nПісля успішного запуску створіть облікові записи, дотримуючись [цієї](https://wiki.robonomics.network/docs/create-account-in-dapp/) інструкції. **Не забудьте зберегти кожний ключ та адресу облікового запису! Вам знадобляться вони для транзакцій**. Додайте ці адреси, ключі та шлях до бінарного файлу robonomics у файл `config.config` в `robonomics_ws/src/robonomics_sample_controller/src`. Перекажіть деякі гроші (одиниці) на ці облікові записи:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. Запуск дрона під управлінням паракейну\n\nДо цього часу **лише запущений** має бути локальний вузол robonomics. У окремому терміналі запустіть симуляцію дрона:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nЗапустіть скрипт:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\nТепер ви можете відправити транзакцію, що запускає дрона на польот. Для цього вам слід використовувати підкоманду `write` Robonomics IO бінарного файлу robonomics:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nДе `<DRONE_ADDRESS>` та `<EMPLOYER’S_KEY>` замінюються раніше збереженими рядками відповідно.\nВи повинні побачити журнал `\"Taking Off\"` і дрон повинен почати літати:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\nОсь як будь-який робот, сумісний з ROS, може бути керований паракейном Robonomics.\n\n\n##  Частина 2. Збереження даних в блокчейн\n\n**У цій частині ми продовжимо використовувати інструменти Robonomics, щоб дрон був керований паракейном. Цього разу ми додамо опції відправлення даних в IPFS та зберігання хешу в ланцюжку. Нижче наведено інструкцію та фрагменти коду. Вимоги:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (інструкція з встановлення [тут](http://wiki.ros.org/melodic/Інсталяція))\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22 (завантажте з [тут](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz) та встановіть)\n</li>\n\n<li class=\"flex\">\n\nВузол Robonomics (бінарний файл) (завантажте останню версію [тут](https://github.com/airalab/robonomics/releases))\n</li>\n\n<li>Залежності Python:\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\nThe entire process of coding this part of demo is presented in a video below.\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. Додайте залежності\nЯкщо ми запустимо симуляцію і подивимося список тем (див. частину 1), ми побачимо, що є одна тема, яка містить дані фронтальної камери та використовує тип повідомлення `sensor_msgs/Image`:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\nСпробуйте зробити фотографію кожну 1 секунду і після польоту опублікуйте ці фотографії в IPFS. Якщо ви вже завершили перший навчальний посібник, вам не потрібно завантажувати ще щось. Це сценарій `drone_sample_controller_pictures.py`.\n\n## 2. Управління обліковими записами в DAPP\nЯк і в попередньому навчальному посібнику, створіть локальний вузол мережі robonomics з файлом robonomics binary:\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Important!** Before next launches it is necessary to remove a directory `db` with\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nAfter a successful launch create accounts following [this](https://wiki.robonomics.network/docs/create-account-in-dapp/) manual. **Do not forget to save each account's seed and address! You will need them for transactions**. Add these addresses, seeds and path to robonomics binary file to file `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Transfer some money (units) to these accounts:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. Запуск\nUp to now the **only thing running** should be the robonomics local node. In a separate terminal launch drone simulation:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nУ іншому запуску демона ipfs:\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nЗапустіть the script:\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\nТепер ви можете відправити транзакцію, що викликає польот дрона та зйомку фотографій. Для цього вам слід використовувати підкоманду `write` Robonomics IO в бінарному файлі robonomics:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nWhere `<DRONE_ADDRESS>`  and `<EMPLOYER’S_KEY>` are replaced with  previously saved strings accordingly.\nВи повинні побачити журнал `\"Taking Off\"` і дрон повинен почати літати та робити фотографії:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\nПізніше, коли робота буде з��вершена, на порталі Robonomics перейдіть до `Розробник` -> `Стан ланцюжка` та додайте даталог `DRONE`, використовуючи кнопку `“+”` з вибраним запитом стану як `datalog`. Хеш IPFS телеметрії було збережено в блокчейні. Щоб побачити дані, просто скопіюйте хеш та додайте його до локальної [шлюз](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/) адреси `localhost:8080/ipfs/`:\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"uk/learn/connect-any-ros-compatible-drone/overview.md","name":"overview"},"defaultName":"Connect ROS-compatible drone","lastUpdate":"Thu May 04 2023 12:52:55 GMT+0400 (Samara Standard Time)"}},"context":{}}