{"hash":"1eafca61b16c3525f2f7c5d47de816b7adf0794c","data":{"course":{"id":"8868d275855d0d0c66acb93ba1e634c6","title":"Керування роботом Бакстера","description":"Керування роботом Бакстера","content":"Приклад того, як це працює:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## Вимоги:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (інструкція з встановлення [тут][db2])  \n\n</li>\n\n<li>додаткові пакети:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effабоt-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS до 0.6.0 (завантажте з [тут][db3] та встановіть)\n\n</li>\n\n<li> пакети Python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nЗавантажте останній [реліз][db4] від вузла Robonomics тут (останній перевірений реліз v1.1)\n\n</li>\n\n<li>Розширення для браузера IPFS (не обов'язково)</li>\n\n</List>\n\n<br/>\n\n## 0. встановити розширення CV Bridge для python3\n\n<List>\n\n<li> Створити робоче середовище catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Навчіть catkin встановлювати змінні cmake. Використовуйте вашу поточну версію `python`. Для мене це `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Клонувати джерело cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Знайдіть версію cv_bridge у вашому сховищі:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Перевірте правильну версію в git-репозиторії. У нашому випадку це 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Збірка:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Розширення середовища новим пакетом:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Тест:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. Завантажити пакети симуляції та котролера\nЗавантажити пакети:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nНе забудьте додати команду source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Запустіть симуляцію\nДавайте запустимо світ gazebo та поставимо нашого Бакстера в ньому:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nВідкрийте ще одне вікно в терміналі:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nВи можете поставити деякі моделі перед нашим Бакстером. Це буде цікавіше.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Керуйте обліковими записами в DAPP\n\nОскільки ми тестуємо, давайте створимо локальну мережу робономіки з бінарним файлом робономіки. Перейдіть до папки з файлом робономіки та запустіть:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nПерейдіть на [портал паралельної мережі Robonomics][db5] та перейдіть на локальний вузол\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nПерейдіть до облікових записів та створіть облікові записи __Baxter__ та __Роботодавець__ (__Робот__ не обов'язковий)\n\n__Важливо!__ Скопіюйте кожний **Мнемонічний** та **адресу** облікового запису (щоб скопіюват адресу, натисніть на значок облікового запису). **Мнемонічний** - це приватний ключ облікового запису.\nПерекажіть деякі гроші (одиниці) на ці облікові записи:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nДодайте **Мнемонічний** та **адресу** Бакстера до `config.yaml` в `robot_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Запустіть симуляцію\n\nУ новому вікні запустіть:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nВідкрийте окремий термінал та запустіть *пакет контролера*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nТепер ви можете відправити транзакцію, що запускає Бакстера на рух та збір даних. Для цього ви можете використовувати той самий [портал паралельної мережі Robonomics][db5]. Перейдіть до **Розробник->Екстранси** та виберіть обліковий запис роботодавця Бакстера, екстрансічний запуск, обліковий запис Бакстера як цільовий обліковий запис та `так` як параметр. Подайте екстрансічний запит.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nРобот повинен почати рухатися. Він не прийматиме команди від інших облікових записів, а також команди з параметром `ні`.\nВи повинні побачити наступне:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nколи робота закінчена, перейдіть на портал Robonomics до `Розробник > Ланцюжковий стан`. Виберіть `datalog.datalogItem(AccountId,u64)` в **запиті стану**. Якщо ви хочете показати всі datalog, вимкніть `включити опцію` додайте перегляд повідомлення datalog Бакстера за допомогою кнопки \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nТепер хеш IPFS телеметрії та фотографій збережено в блокчейні. Щоб побачити дані, просто скопіюйте хеш та вставте його в рядок пошуку за URL-адресою: gateway.ipfs.io/ipfs/<br вставте свій хеш тут >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\nКлацніть __Переглянути на шлюзі__ і все!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Симуляція Бакстера v2.0\n\nПриклад того, як це працює:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## Вимоги:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (інструкція з встановлення [тут][db2])  \n\n</li>\n\n<li>додаткові пакети:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS до 0.6.0 (завантажте з [тут][db3] та встановіть)\n\n</li>\n\n<li> пакети Python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nВузол Robonomics (бінарний файл) (завантажте останній [реліз][db4] тут)\n\n</li>\n\n<li class=\"flex\">\n\nСтворіть облікові записи __Baxter__ та __Роботодавець__ на **Порталі Robonomics** (ви можете знайти посібник [\"Створення облікового запису на Порталі Robonomics\"][db8] тут).\n</li>\n\n<li>Розширення для браузера IPFS (не обов'язково)</li>\n\n</List>\n\n<br/>\n\n## 0. встановити розширення CV Bridge для python3\n\n<List>\n\n<li> Створити робоче середовище catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Навчіть catkin встановлювати змінні cmake. Використовуйте вашу поточну версію `python`. Для мене це `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Клонувати джерело cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Знайдіть версію cv_bridge у вашому сховищі:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Перевірте правильну версію в git-репозиторії. У нашому випадку це 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Збірка:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Розширення середовища новим пакетом:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Тест:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. Завантажити пакети симуляції та котролера\nНам потрібно створити 2 робочі простори - один для основних пакетів Бакстера та інший для основної програми управління.\nПерший робочий простір. Це основна програма управління. Вона буде працювати під python3.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nДругий робочий простір. Тут будуть всі пакети Бакстера. Симуляція дуже стара, тому вона може працювати тільки під python2.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nЦі пакети були створені для ROS indigo. Нам потрібно змінити деякі файли, щоб запустити їх на ROS melodic.\nМи використовуватимемо файли **patch**.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nІ давайте побудуємо всі наші пакети:  \nСпочатку побудуйте пакети Бакстера\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nПотім поверніться до першого робочого простору та побудуйте його також:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nНе забудьте додати команду source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Запустіть симуляцію\n### Давайте почнемо нашу симуляцію:\nСпочатку перейдіть до `robot_ws` та скопіюйте та відредагуйте baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nЗнайдіть свою локальну IP-адресу за допомогою команди:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\nВідредагуйте наступні значення в `baxter.sh` :\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- your_ip - вкажіть свою локальну IP-адресу. Див. `ip a`\n- ros_version - наприклад \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nЗапустіть сценарій оболонки бакстера з вказаною симуляцією:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nВи можете поставити деякі моделі перед нашим Бакстером. Це буде цікавіше.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Керуйте обліковими записами в DAPP\n\nОскільки ми тестуємо, давайте створимо локальну мережу робономіки з бінарним файлом робономіки. Перейдіть до папки з файлом робономіки та запустіть:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nПерейдіть на [портал паралельної мережі Robonomics][db5] та перейдіть на локальний вузол\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nПерейдіть до облікових записів та створіть облікові записи __Baxter__ та __Роботодавець__.\n\nВи можете знайти посібник \"Створення облікового запису на Порталі Robonomics\" [тут][db8]\n\n__Важливо!__ Скопіюйте кожний **Мнемонічний** та **адресу** облікового запису (щоб скопіюват адресу, натисніть на значок облікового запису). **Мнемонічний** - це приватний ключ облікового запису.\n\nПерекажіть деякі гроші (одиниці) на ці облікові записи:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nДодайте **Мнемоніку** та **адресу** Бакстера до `config.yaml` в `robonomics_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Запустіть симуляцію\n\nУ новому вікні запустіть:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nВідкрийте окремий термінал та запустіть *пакет контролера*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nТепер ви можете відправити транзакцію, що запускає Бакстера на рух та збір даних. Для цього ви можете використовувати той самий портал [Портал Робономіки Парачейн][db5]. Перейдіть до **Розробник->Екстрансіки** та виберіть обліковий запис роботодавця Бакстера, екстрансік `launch`, обліковий запис Бакстера як цільовий обліковий запис та `yes` як параметр. Надішліть екстрансік.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nРобот повинен почати рухатися. Він не прийматиме команди від інших облікових записів, а також команди з параметром `ні`.\nВи повинні побачити наступне:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nКоли робота закінчиться, перейдіть на Портал Робономіки до `Розробник > Ланцюжок стану`. Виберіть `datalog.datalogItem(AccountId,u64)` в **запиті стану**. Якщо ви хочете показати всі datalog'и, то вимкніть `опцію включення`, додайте перегляд повідомлення datalog Бакстера, використовуючи кнопку \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nТепер IPFS-хеш телеметрії та фотографій збережено в блокчейні. Щоб побачити дані, просто скопіюйте хеш і вставте його в рядок пошуку за URL-адресою:  \n#### gateway.ipfs.io/ipfs/<вставте ваш хеш тут>\n\nЦе все!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/Встановлення>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"uk/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}