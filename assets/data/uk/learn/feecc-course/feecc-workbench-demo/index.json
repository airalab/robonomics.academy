{"hash":"d581ab531c5af1fcf498eba534e7cd9db8b6d676","data":{"course":{"id":"a6480b235f3c5ca4061909894d88dbfc","title":"Демонстрація Feecc","description":"Цей курс призначений для того, щоб дізнатися про систему Feecc та всі її компоненти.","content":"\n<RoboAcademyText fWeight=\"500\">\nУ цьому уроці ви протестуєте основні функції Feecc, використовуючи віртуальну тестову платформу як приклад, яка емулює реальний приклад системи відстеження виробництва.\n</RoboAcademyText>\n\nЗ метою демонстрації він позбавлений деяких типових функцій, таких як друк етикеток або запис відео, але він містить основну концепцію такої системи.\n\n## Попередні вимоги\n\nДля запуску демонстрації вам знадобиться:\n\n- Система подібна до UNIX (перевірено на [Ubuntu 22.04.2](https://releases.ubuntu.com/jammy/))\n- [Docker](https://docs.docker.com/engine/install/ubuntu/) та [Docker compose](https://docs.docker.com/compose/)\n- Веб-браузер (перевірено на Google Chrome та Mozilla Firefox)\n\n## Інсталяція\n\nВиконайте наступні команди:\n\n<LessonCodeWrapper language=\"bash\">\ngit clone https://github.com/Multi-Agent-io/feecc-academy\ncd feecc-academy\nsudo docker compose up -d --build\n</LessonCodeWrapper>\n\nЩоб перевірити робочі контейнери, виконайте наступне:\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker ps -a\n</LessonCodeWrapper>\n\nВи повинні побачити наступний вивід:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\" noLines noCopyIcon>\nCONTAINER ID   IMAGE                               COMMAND                  CREATED          STATUS                             PORTS     NAMES\n0db8382bb271   feecc-academy-workbench-daemon      \"uvicorn app:app --h…\"   19 seconds ago   Up 7 seconds (healthy)                       feecc_academy_workbench_daemon\n0dbc7bb977d1   feecc-academy-workbench-frontend    \"node nodeServer.js\"     20 seconds ago   Up 19 seconds (health: starting)             feecc_academy_workbench_frontend\na74fa229eb90   robonomics/robonomics:sha-bd71a23   \"robonomics --dev --…\"   20 seconds ago   Up 19 seconds (health: starting)             feecc_academy_robonomics_node\n0c9e8022658a   mongo:jammy                         \"docker-entrypoint.s…\"   20 seconds ago   Up 19 seconds (healthy)                      feecc_academy_mongoDB\n6b0748904d0f   ipfs/go-ipfs:v0.17.0                \"/sbin/tini -- /usr/…\"   20 seconds ago   Up 19 seconds (healthy)                      feecc_academy_ipfsnode\n814e6f489a77   nyurik/alpine-python3-requests      \"tail -f /dev/null\"      20 seconds ago   Up 19 seconds                                feecc_academy_hid_emulator\n</LessonCodeWrapper>\n\n## Запуск демонстрації\n\n1. Перейдіть на http://localhost:3000/ у своєму браузері, ви повинні побачити екран вітання.\n\n2. На цьому етапі система повинна запросити співробітника покласти свою RFID-карту на сканер для авторизації. На демонстрації ви можете використовувати `hid-emulator.py` для авторизації. Для цього запустіть окремий контейнер Docker:\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker exec -ti feecc_academy_hid_emulator sh\npython3 hid-emulator.py\n</LessonCodeWrapper>\n\nВін здатний емулювати дві функції: надання RFID-карти та сканування штрих-коду; вам потрібна перша функція, введіть `1`.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\" noLines noCopyIcon>\n> Select emulated action (1/2): \n>  1. Put ID card on the Сканер RFID.\n>  2. Scan a sample barcode with a barcode scanner.\n> 1\n> INFO:2023-03-21 21:42:05,370:Event relayed to endpoint http://127.0.0.1:5000/workbench/hid-event\n</LessonCodeWrapper>\n\n3. Ви побачите екран для вибору типу композиції, виберіть `ОДИНИЧНИЙ ПРИСТРІЙ`.\n\n<LessonImages src=\"feecc-course/menu.png\" alt=\"Feecc start menu\"/>\n\n4. Сповіщення з'являться в нижньому лівому куті, що вказує на початок роботи на пристрої, для якого створено унікальний ідентифікатор. Синє сповіщення також відображатиме активність віртуального принтера; на фактичному налаштуванні в цей момент друкується штрих-код з ідентифікатором пристрою.\n\n<LessonImages src=\"feecc-course/single_device.png\" alt=\"Single device composition\"/>\n\n5. Натисніть на `ПОЧАТИ КОМПОЗИЦІЮ`, щоб почати запис процесу збирання пристрою. Вас попросять пройти всі необхідні етапи збирання; кожного разу, коли працівник завершує етап, вони повинні натиснути кнопку `ДАЛІ`, після чого відео буде збережено в IPFS. Також можливо призупинити збірку (`ПАУЗА`), щоб повернутися до неї пізнше або повністю зупинити процес (`СТОП`).\n\n6. Коли всі етапи збирання завершені, з'являється кнопка `ЗАВЕРШИТИ`, після чого Feecc пропонує зберегти сертифікат пристрою. Однак, перед цим відкрийте [локальний вузол Robonomics](https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/explorer) у своєму браузері, вам знадобиться це пізніше. Після цього поверніться до Feecc та натисніть `ЗБЕРЕГТИ ПАСПОРТ`.\n    \n    Ви побачите нові сповіщення в кутку екрана: сповіщення про те, що сертифікат було завантажено в Robonomics та IPFS, а також два синіх повідомлення про друк печатки та QR-коду, які ведуть до сертифікату.\n\n<LessonImages src=\"feecc-course/single_certificate.png\" alt=\"Cetrificate of single composition\"/>\n\n7. У розділі `Chain info` на екрані локального вузла Robonomics ви повинні побачити нову подію `datalog.NewRecord` у розділі `recent events`. Якщо ви розгорнете його, буде показано IPFS CID, що відповідає файлу сертифіката пристрою, у полі `bytes`.\n\n<LessonImages src=\"feecc-course/single_datalog.png\" alt=\"Datalog of single composition\"/>\n\nНадрукований QR-код містить посилання на цей CID, що дозволяє відкрити файл сертифіката в браузері. Оскільки ваш локальний вузол IPFS може не мати такої доступності, ви можете отримати доступ до файлу локально за допомогою `localhost:8080/ipfs/CID.` Вміст сертифіката виглядає приблизно так:\n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\" noLines noCopyIcon>\nUnit Unique Code: 423d3c1b42f6427e80cc881a16e07451\nUnit Model Name: Single Device\nTotal Assembly Time: 0:05:37\nProduction Stages:\n- Name: Prepare Tools (not finished.)\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:38:47\n  Finish Time: 26-06-2023 17:40:28\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Prepare Tools (not finished.)\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:40:30\n  Finish Time: 26-06-2023 17:42:06\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Prepare Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:42:16\n  Finish Time: 26-06-2023 17:43:00\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Saw Through the Single Device\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:43:00\n  Finish Time: 26-06-2023 17:43:51\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Stack Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:43:51\n  Finish Time: 26-06-2023 17:44:36\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n</LessonCodeWrapper>\n\n8. Давайте спробуємо створити сертифікат для композитної збірки, що складається з кількох пристроїв. У меню вибору типу натисніть на `КОМПОЗИТНИЙ ПРИСТРІЙ`, а потім `ПРИКЛАДНИЙ ПРИСТРІЙ`. Скопіюйте його ідентифікатор одиниці (знаходиться в полі номеру композиції), оскільки вам знадобиться це пізніше. Потім продовжуйте зі стандартними кроками для збирання пристрою.\n\n9. Після збирання поверніться до `КОМПОЗИТНОГО ПРИСТРОЮ` та натисніть `ОСНОВНА ЗБІРКА`, щоб завершити композитну збірку. Система попросить вас надати ідентифікатор одиниці зібраних пристроїв, для яких працівник повинен просканувати їх штрих-код. Щоб симулювати цей процес, поверніться до `hid-emulator.py` та виберіть функцію `2` для сканування штрих-коду та вставте збережений ідентифікатор одиниці туди.\n\n10. Далі система попросить пройти необхідні етапи композитної збірки та згенерувати для неї сертифікат:\n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\" noLines noCopyIcon>\nUnit Unique Code: d08101feae7c4efbb5529885c9ad544b\nUnit Model Name: Composite Device\nTotal Assembly Time: 0:00:03\nProduction Stages:\n- Name: Prepare Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 18:18:25\n  Finish Time: 26-06-2023 18:18:26\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Tape the Sample Device to the base plate\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 18:18:26\n  Finish Time: 26-06-2023 18:18:27\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Stack Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 18:18:27\n  Finish Time: 26-06-2023 18:18:28\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\nUnit Components:\n- Unit Unique Code: b165b382c3674127a6aaf5817c5a7040\n  Unit Model Name: Sample Device\n  Total Assembly Time: 0:00:03\n  Production Stages:\n  - Name: Prepare Tools\n    Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n    Start Time: 26-06-2023 18:17:45\n    Finish Time: 26-06-2023 18:17:46\n    Assembly data in IPFS: This is a place for any production data, let it be video\n      record, some sensor data or any other data collection representing the production\n      process.\n  - Name: Assemble Sample Device\n    Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n    Start Time: 26-06-2023 18:17:46\n    Finish Time: 26-06-2023 18:17:47\n    Assembly data in IPFS: This is a place for any production data, let it be video\n      record, some sensor data or any other data collection representing the production\n      process.\n  - Name: Stack Tools\n    Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n    Start Time: 26-06-2023 18:17:47\n    Finish Time: 26-06-2023 18:17:48\n    Assembly data in IPFS: This is a place for any production data, let it be video\n      record, some sensor data or any other data collection representing the production\n      process.\nTotal Assembly Time (Including Components): 0:00:06\n</LessonCodeWrapper>\n\n11. Щоб видалити демо, введіть команду:\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker compose down --rmi all && docker builder prune -f\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"500\">\nУ наступному уроці ми перейдемо до фактичного розгортання всіх необхідних компонентів системи Feecc.\n</RoboAcademyText>","fileInfo":{"path":"uk/learn/feecc-course/feecc-workbench-demo.md","name":"feecc-workbench-demo"},"defaultName":"Getting Used to Feecc","lastUpdate":null}},"context":{}}