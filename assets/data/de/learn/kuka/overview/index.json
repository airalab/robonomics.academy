{"hash":"e6c519792deb242508dbdc929978fb576e31f14b","data":{"course":{"id":"160c09e41ea25bb59ea32e572b2d5866","title":"Verbinden Sie den Kuka-Manipulator","description":"Verbinden Sie den Manipulator","content":"\nEin Video mit einem Arbeitsbeispiel finden Sie hier:\n\nhttps://youtu.be/z55HepXbHr8\n\n<br/>\n\n***\n\n<br/>\n\n## Anforderungen\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic, Gazebo (Installationsanleitung [hier](http://wiki.ros.org/melodic/Installation/Ubuntu))\n</li>\n\n<li>Einige zusätzliche Pakete\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li> IPFS 0.4.22 \n\n(herunterladen von [hier](https://www.npackd.org/p/ipfs/0.4.22) und installieren)\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>pip3\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt-get install python3-pip\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li>substrate-interface\n\n<LessonCodeWrapper language=\"bash\">\npip3 install substrate-interface\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics-Knoten (Binärdatei) (die neueste Version herunterladen [hier](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n<li>IPFS-Browsererweiterung (nicht notwendig)</li>\n\n</List>\n\n<br/>\n\n***\n\n<br/>\n\n## Installation\nInstallieren Sie den Kuka-Manipulator und die Steuerungspakete\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">cd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make</LessonCodeWrapper>\n\n***\n\n<br/>\n\n## Gazebo-Modell ausführen\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n</LessonCodeWrapper>\n\nIn einem neuen Fenster\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun manipulator_gazebo move_arm_server\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/1.png\" alt=\"model\"/>\n\n***\n\n<br/>\n\n## Robonomics ausführen\nGehen Sie zum Ordner mit der Robonomics-Datei und erstellen Sie ein lokales Robonomics-Netzwerk:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/robonomics.png\" alt=\"robonomics\"/>\n\nGehen Sie zum [Robonomics Parachain-Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) und wechseln Sie zum lokalen Knoten\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/local.png\" alt=\"local\"/>\n\nGehen Sie dann zu Konten und erstellen Sie ein `KUKA`-Konto. Speichern Sie den mnemonischen Schlüssel des Kontos, den Sie später benötigen werden. \n\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/create_acc.png\" alt=\"acc\"/>\n\nSenden Sie einige Einheiten an das neue Konto von einem der Standardkonten aus.\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/send_money.png\" alt=\"accs\"/>\n\n***\n<br/>\n\n## IPFS ausführen\nAusführen ipfs daemon:\n\n<LessonCodeWrapper language=\"bash\">\nipfs daemon\n</LessonCodeWrapper>\n\n***\n\n</br>\n\n## Steuerungspaket ausführen\nIm Konfigurationsverzeichnis im kuka_control-Paket müssen Sie eine Konfigurationsdatei mit diesen Zeilen erstellen, wobei `<your_mnemonic>` den gespeicherten mnemonischen Seed darstellt:\n\n<LessonCodeWrapper language=\"bash\">\n{\n    \"kuka_mnemonic\": \"[your_mnemonic]\",\n    \"node\": \"ws://127.0.0.1:9944\"\n}\n</LessonCodeWrapper>\n\n\nJetzt können Sie das Steuerskript ausführen:\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun kuka_controller move_arm_client.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/run.png\" alt=\"control\"/>\n\n## Transaktion senden\nIm [Robonomics Parachain-Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) gehen Sie zu `Entwickler/Extrinsische`, ändern Sie `extrinsisch` in `start`. Wählen Sie Ihr `KUKA`-Konto im `Roboter` aus und ändern Sie `param` in `Ja`. Drücken Sie dann `Transaktion senden`\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/launch.png\" alt=\"transaction\"/>\n\nIm Fenster mit dem kuka_control-Paket sehen Sie:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/res.png\" alt=\"done\"/>\n\nGehen Sie dann auf `Entwickler/Kettenzustand` im Robonomics-Portal, wählen Sie `Datenprotokoll` und `DatenprotokollItem((Kontonummer,u64)): RingBufferItem` in der Abfrage aus und fügen Sie das `KUKA`-Datenprotokoll mit der Schaltfläche '+' hinzu:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/datalog.png\" alt=\"datalog\"/>\n\nJetzt können Sie die Telemetrie des Roboters in IPFS über diesen Link mit Ihrem Hash finden `https://gateway.ipfs.io/ipfs/<hash>`.\n\n## Fehlerbehebung\n\nWenn `catkin_make` mit der Meldung, dass MoveArm.h nicht gefunden werden kann, nicht funktioniert, versuchen Sie, die letzten vier Zeilen in der CMakeLists.txt im kuka_manipulator_gazebo-Paket zu entfernen:\n\n<LessonCodeWrapper language=\"yaml\">\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(move_arm_server src/move_arm_server.cpp)\ntarget_link_libraries(move_arm_server ${catkin_LIBRARIES})\nadd_dependencies(move_arm_server beginner_tutorials_gencpp)\n</LessonCodeWrapper>\n\nFühren Sie `catkin_make` ohne diese Zeilen aus, fügen Sie sie dann wieder ein und führen Sie `catkin_make` erneut aus.","fileInfo":{"path":"de/learn/kuka/overview.md","name":"overview"},"defaultName":"Connect Kuka manipulator","lastUpdate":null}},"context":{}}