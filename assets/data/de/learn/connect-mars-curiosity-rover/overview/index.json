{"hash":"d581ab531c5af1fcf498eba534e7cd9db8b6d676","data":{"course":{"id":"dcb867bccf0e1bca82a45c9c75acda0c","title":"Verbinde Mars Curiosity Rover","description":"Verbinde Mars Curiosity Rover unter der Kontrolle des Robonomics-Parachains.","content":"\n**Schauen wir, wie die Robonomics-Parachain-Kontrolle es ermöglicht, den Mars Curiosity Rover zu bewegen. Anforderungen:**\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (Installationsanleitung [hier](http://wiki.ros.org/melodic/Installation))\n\n</li>\n\n\n<li>Zusätzliche Pakete:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n  sudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS bis zu [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n\n</li>\n\n<li class=\"flex\">\n\n[IPFS Companion-Erweiterung](https://github.com/ipfs/ipfs-companion)\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics-Node (Binärdatei) (laden Sie die neueste Version [hier](https://github.com/airalab/robonomics/releases) herunter. Dieses Tutorial wurde erfolgreich auf v1.1 getestet)\n\n</li>\n\n</List>\n\n<br/>\n\nHier ist das Video, das den erfolgreichen Start zeigt:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n\n<br/>\n\n### 1. Simulation einrichten\n\nCuriosity Rover-Paket herunterladen:\n<LessonCodeWrapper language=\"bash\">\n  mkdir -p robonomics_ws/src\n  cd robonomics_ws/src\n  git clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\n  cd ..\n  catkin build\n</LessonCodeWrapper>\n\nWir müssen die Startbedingungen anpassen, damit unser Rover reibungslos erscheint:\n\n<List>\n\n<li>Gehe zu\n\n`src/master/curiosity_mars_rover_description/worlds` und ändern Sie Zeile 14 der Datei` mars_curiosity.world` to \n`<pose>0 0 8 0 0 0</pose>`\n\n</li>\n\n<li>Gehe zu\n\n`src/master/curiosity_mars_rover_description/launch` und ändere Zeile 4 der Datei `mars_curiosity_world.launch` zu \n`<arg name=\"paused\" default=\"false\"/>`\n\nVergessen Sie nicht, den Quellbefehl hinzuzufügen `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n</li>\n\n<li> Konsole neu starten und die Simulation starten:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\n  roslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/rover.jpg\" alt=\"Mars rover\"/>\n\n</li>\n\n</List>\n\nHinweis: Wenn das Bild dunkel ist, z.B. schattiert, ändern Sie `Kamera` in `Orthografisch` in der Gazebo-Symbolleiste.\nDie Simulation kann für eine Weile geschlossen werden.\n\n------------\n\n<br/>\n\n### 2. Robonomics-Controller-Paket herunterladen\nUm ein Controller-Paket für Rover herunterzuladen, geben Sie im Terminal ein:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n</LessonCodeWrapper>\n\n\n------------\n\n<br/>\n\n### 3. Konten in DAPP verwalten\nDa wir testen, erstellen wir ein lokales Robonomics-Netzwerk mit der Robonomics-Binärdatei:\n\n<LessonCodeWrapper language=\"bash\">\n  ./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/robonomics.jpg\" alt=\"Ausführenning node\"/>\n\n\nGehe zum [Robonomics Parachain-Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) und wechsle zum lokalen Knoten \n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/local_node.jpg\" alt=\"Local node\"/>\n\n\nGehe zu Konten und erstelle **CURIOSITY** und **ARBEITGEBER**-Konten.\n\n**Wichtig**! Kopieren Sie die Adresse jedes Kontos (um die Adresse zu kopieren, klicken Sie auf das Symbol des Kontos) und den **mnemonischen Seed** des Curiosity-Kontos (der beim Erstellen des Kontos erhalten wurde)\nÜberweisen Sie etwas Geld (Einheiten) auf diese Konten. Weitere Informationen zu Konten in Robonomics finden Sie [hier](https://wiki.robonomics.network/docs/en/create-account-in-dapp/)\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/account_creation.jpg\" alt=\"Account creation\"/>\n\n\nFügen Sie diese Adressen, Seed und Knotenadresse (Standard: `ws://127.0.0.1:9944` für Entwicklerknoten) in `config.config` in `robonomics_ws/src/robonomics_sample_controller/src` hinzu. Keine Anführungszeichen.\n\n------------\n\n<br/>\n\n### 4. Starte Robonomics\n\nStellen Sie sicher, dass Sie [IPFS Companion Extension](https://github.com/ipfs/ipfs-companion) installiert haben, bevor Sie weitermachen.\n\nStarten Sie in einem separaten Terminal IPFS:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nifps init #Sie müssen dies nur einmal pro IPFS-Installation tun\nipfs daemon\n</LessonCodeWrapper>\n\nStarten Sie in einem anderen separaten Terminal die Curiosity-Simulation, wenn sie nicht live ist:\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\nWarten Sie, bis sie stillsteht\n\nStarten Sie in einem anderen Terminal den Controller:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nrosrun robonomics_sample_controller sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/controller.jpg\" alt=\"Controller\"/>\n\nJetzt können Sie eine Transaktion senden, um den Rover zum Bewegen und Datensammeln zu bringen. Verwenden Sie dazu das gleiche [Robonomics Parachain-Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/).\nGehen Sie zu `Entwickler->Extrinsische` und wählen Sie das Arbeitgeberkonto von Curiosity, das `launch`-Extrinsische, das Konto von Curiosity als Zielkonto und `ja` als Parameter aus.\nReichen Sie das Extrinsische ein.\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/extrinsic.jpg\" alt=\"Extrinsic\"/>\n\nDer Roboter sollte anfangen sich zu bewegen. Er wird weder Befehle von anderen Konten akzeptieren noch Befehle mit dem Parameter `nein`. Der Rover wird sich etwa eine Minute lang bewegen und Daten sammeln.\nSpäter, wenn die Arbeit erledigt ist:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/job_done.jpg\" alt=\"Job done\"/>\n\n\nGehen Sie auf dem Robonomics-Portal zu `Entwickler -> Chain State` und erhalten Sie ein `CURIOSITY`-Datalog mit der Schaltfläche “+” und wählen Sie `Datalog -> RingBufferItem` als Abfrage aus: \n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/datalog.jpg\" alt=\"Datalog\"/>\n\n\nJetzt ist der IPFS-Hash der Telemetrie in der Blockchain gespeichert. Um die Daten zu sehen, kopieren Sie einfach den Hash und suchen Sie ihn auf einem Gateway:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/data_in_ipfs.jpg\" alt=\"Data in IPFS\"/>\n\n\nDiese Telemetrie wird in einem dezentralen Speicher aufbewahrt, und ihr Hash wird in einer Blockchain gespeichert!\n","fileInfo":{"path":"de/learn/connect-mars-curiosity-rover/overview.md","name":"overview"},"defaultName":"Connect Mars Curiosity Rover","lastUpdate":"Thu May 18 2023 10:41:00 GMT+0400 (Samara Standard Time)"}},"context":{}}