{"hash":"875b98d13319980e3d246b684c60c311a25b65d1","data":{"course":{"id":"3fe2c2a506028878faac68a408e9f5f7","title":"Verbindung unbemanntes Luftfahrzeug","description":"Verbinden Sie unbemanntes Luftfahrzeug","content":"\n**Drohne beginnt sich nach Transaktion zu bewegen und speichert die Datei mit den Koordinaten in IPFS. Das Steuerskript basiert auf dem [GAAS-Demodskript](https://github.com/generalized-intelligence/GAAS)**  \n\nhttps://youtu.be/4CwtGAX1OwM\n\n<br/>\n\n## Anforderungen\n\n<List>\n\n<li> Abhängigkeiten für die Steuerung:\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt install -y \\\n\tpython3-pip \\\n\tninja-build \\\n\texiftool \\\n\tpython-argparse \\\n\tpython-empy \\\n\tpython-toml \\\n\tpython-numpy \\\n\tpython-yaml \\\n\tpython-dev \\\n\tpython-pip \\\n\tninja-build \\\n\tprotobuf-compiler \\\n\tlibeigen3-dev \\\n\tgenromfs\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\">\npip3 install \\\n\tpandas \\\n\tjinja2 \\\n\tpyserial \\\n\tcerberus \\\n\tpyulog \\\n\tnumpy \\\n\ttoml \\\n\tpyquaternion\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo [Installationsanleitung](http://wiki.ros.org/melodic/Installation)\n</li>\n\n<li>Zusätzliche Pakete:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\nsudo apt-get install python-jinja2\nsudo apt-get install python-catkin-pkg\nsudo apt-get install python3-catkin-pkg-modules\n</LessonCodeWrapper>\n\n</li>\n\n<li>IPFS Version 0.4.22\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nwget https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-amd64.tar.gz\ntar -xvzf go-ipfs_v0.4.22_linux-amd64.tar.gz\ncd go-ipfs\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics-Knoten (Binärdatei) (laden Sie die neueste Version [hier](https://github.com/airalab/robonomics/releases) herunter)\n</li>\n\n</List>\n\n<br/>\n\n## Umgebungseinrichtung\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nsudo ./install_geographiclib_datasets.sh\ncd ~/catkin_ws/src\ngit clone https://github.com/PX4/Firmware.git\ncd Firmware\ngit checkout v1.9.0\nbash ./Tools/setup/ubuntu.sh\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/catkin_ws/src\ngit clone https://github.com/generalized-intelligence/GAAS.git\ncp -r ~/catkin_ws/src/GAAS/simulator/models/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/models/\ncp -r ~/catkin_ws/src/GAAS/simulator/worlds/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/worlds/\ncp -r ~/catkin_ws/src/GAAS/simulator/posix-config/* ~/catkin_ws/src/Firmware/posix-configs/SITL/init/ekf2/\n</LessonCodeWrapper>\n\nÄndern Sie Ihre `.bashrc`-Datei und fügen Sie die folgenden Zeilen am Ende hinzu:  \n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash   \nsource ~/catkin_ws/src/Firmware/Tools/setup_gazebo.bash ~/catkin_ws/src/Firmware/ ~/catkin_ws/src/Firmware/build posix_sitl_default \nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware/Tools/sitl_gazebo\nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models:~/catkin_ws/src/GAAS/simulator/models\n</LessonCodeWrapper>  \n\n  \n## Steuerpaketinstallation\nIn einem neuen Terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd catkin_ws/src\ngit clone https://github.com/tubleronchik/robonomics_drone_sim.git\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\n## Robonomics-Netzwerk\n\nUm ein lokales Robonomics-Netzwerk zu erstellen, gehen Sie zum Ordner mit der Robonomics-Binärdatei und führen Sie aus:  \n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --rpc-cors all\n</LessonCodeWrapper>\n\nFügen Sie den Pfad von Robonomics zu `config.py` hinzu\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/IPFS.jpg\" alt=\"IPFS\"/>\n\nGehen Sie zum [Robonomics-Parachain-Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) und wechseln Sie zum lokalen Knoten.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/localNode.jpg\" alt=\"localNode\"/>\n\nGehen Sie zu **Konten** und erstellen Sie **DRONE**- und **ARBEITGEBER**-Konten. Speichern Sie die Kontonamen und Schlüssel und den Pfad zu **robonomics** in `~/catkin_ws/src/drone_sim/src/config.py`. Überweisen Sie etwas Geld auf die Konten.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/addingAcc.jpg\" alt=\"accounts\"/>\n\n## Simulation ausführen\nIPFS-Dämon starten\n\n<LessonCodeWrapper language=\"bash\">\ncd go-ipfs\nipfs daemon\n</LessonCodeWrapper>\n\nStarten Sie in einem anderen Terminal die Simulation:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch px4 mavros_posix_sitl.launch\ncd ~/catkin_ws/src/robonomics_drone_sim/src\npython3 takeoff.py\n</LessonCodeWrapper>\n\nWarten bis \"Warten auf Zahlung\" \n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/launch.jpg\" alt=\"launch\"/>\n\nUm eine Transaktion zu senden, führen Sie in einem anderen Fenster aus:\n`echo \"ON\" | ./robonomics io write launch -r <drone_addres> -s <employer_key>` - wobei **<drone_address>** und **<employer_key>** entsprechend durch die Zeichenfolgen aus `config.py` ersetzt werden sollten.\n\nNachdem die Daten in IPFS übertragen wurden, gehen Sie zum **Chain State** im [Robonomics-Parachain-Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/). Wählen Sie **Datenprotokoll** in der Abfrage aus und fügen Sie das DRONE-Datenprotokoll mit der `+`-Schaltfläche hinzu.\n\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/datalog.jpg\" alt=\"datalog\"/>\n\nSie können die Telemetrie der Drohne unter `https://gateway.ipfs.io/ipfs/<hash>` finden, indem Sie den Hash von oben einfügen.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/output.jpg\" alt=\"output\"/>\n\nEs ist wichtig, das `db`-Verzeichnis vor den nächsten Starts zu entfernen  \n` rm -rf ~/.local/share/robonomics/chains/dev/db`","fileInfo":{"path":"de/learn/iris-drone/overview.md","name":"overview"},"defaultName":"Connect unmanned aerial vehicle","lastUpdate":"Thu May 04 2023 12:53:05 GMT+0400 (Samara Standard Time)"}},"context":{}}