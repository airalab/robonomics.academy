{"hash":"94f13789db7ff3910ce38bd85f3d1c9bd0ae6890","data":{"course":{"id":"a6d981da7fe050b842dbe60e67e36b6a","title":"Verbinden Sie einen ROS-kompatiblen Drohne","description":"Verbinden Sie einen beliebigen ROS-kompatiblen Roboter unter der Kontrolle der Robonomics-Parachain.","content":"\n\n## Teil 1. Starten per Transaktion\n\n**In diesem Artikel zeigen wir, dass Sie mit Hilfe von Robonomics-Tools jedes ROS-kompatible Gerät steuern können. Wir werden ein zufälliges Drohnensimulationspaket im Web finden und anpassen, um mit Robonomics zu laufen.**\n**Anforderungen:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (Installationsanleitung [hier](http://wiki.ros.org/melodic/Installation))\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics-Knoten (Binärdatei) (Laden Sie die neueste Version [hier](https://github.com/airalab/robonomics/releases) herunter)\n\n</li>\n\n</List>\n\n<br/>\n\nDer gesamte Prozess der Codierung dieses Teils der Demo wird in einem Video unten präsentiert.\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. Finden Sie eine Simulation\nLassen Sie uns im Internet surfen. Suchen Sie nach `ROS-Drohnensimulator`. Der erste Link zeigt Ihnen wahrscheinlich die Seite `tum_simulator` auf [http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\nEs ist ziemlich veraltet, also sollten wir eine Fork für unser System finden. Suchen Sie nach `tum_simulator Ubuntu 18 Gazebo 9 Fork`. Das erste Ergebnis ist ein GitHub [Repo](https://github.com/tahsinkose/sjtu-drone) mit einem passenden Paket. Laden Sie es herunter\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\nVergessen Sie nicht, den Quellbefehl zu `~/.bashrc` hinzuzufügen:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\nJetzt können wir die Simulation ausführen, um zu sehen, was wir tun müssen, um die Drohne unter die Parachain-Kontrolle zu bringen.\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. Inspektion der ROS-Themen\nWenn die Simulation läuft, führen Sie in einem neuen Tab den folgenden Befehl aus, um die Liste der Themen zu sehen, die von der Drohne verwendet werden:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\nWerfen wir einen Blick auf `/cmd_vel`, `/drone/takeoff` und `/drone/land`:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\nWie zu sehen ist, sollten Nachrichten der Typen `Twist` und `Empty` vorhanden sein, sie sind Teile von `std_msgs` und `geometry_msgs`, die wir im Controller verwenden werden. Schließen Sie die Simulation für eine Weile.\n\n## 3. Controller-Paket herunterladen\nIm Allgemeinen besteht der Hauptunterschied zum normalen ROS-Robotercontroller darin, dass ein Block von Code vorhanden ist, der alle Transaktionen im Netzwerk mit Hilfe von [Robonomics IO](https://wiki.robonomics.network/docs/rinterface/) überprüft. Das Paket selbst ist auf GitHub verfügbar. Laden Sie es herunter und erstellen Sie den Arbeitsbereich:\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. Konten in DAPP verwalten\nDa wir testen, erstellen wir einen lokalen Robonomics-Netzwerkknoten mit der Robonomics-Binärdatei:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Wichtig!** Vor den nächsten Starts ist es erforderlich, das Verzeichnis `db` zu entfernen\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nNach einem erfolgreichen Start erstellen Sie Konten gemäß [dieser](https://wiki.robonomics.network/docs/create-account-in-dapp/) Anleitung. **Vergessen Sie nicht, jeden Kontosamen und -adresse zu speichern! Sie benötigen sie für Transaktionen**. Fügen Sie diese Adressen, Samen und den Pfad zur Robonomics-Binärdatei der Datei `config.config` in `robonomics_ws/src/robonomics_sample_controller/src` hinzu. Überweisen Sie etwas Geld (Einheiten) auf diese Konten:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. Starten der Drohne unter Parachain-Kontrolle\n\nBisher sollte der **einzige laufende** robonomics lokale Knoten sein. Starten Sie in einem separaten Terminal die Drohnensimulation:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nFühren Sie das Skript aus:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\nJetzt können Sie eine Transaktion senden, um die Drohne zum Starten zu bringen. Verwenden Sie dazu den Robonomics IO `write`-Unterbefehl der Robonomics-Binärdatei:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nWo `<DRONE_ADDRESS>` und `<EMPLOYER’S_KEY>` entsprechend durch zuvor gespeicherte Zeichenfolgen ersetzt werden.\nSie sollten das Protokoll `\"Taking Off\"` sehen und die Drohne sollte zu fliegen beginnen:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\nSo kann jeder ROS-kompatible Roboter von der Robonomics-Parachain-Kontrolle gesteuert werden.\n\n\n##  Teil 2. Daten auf die Blockchain speichern\n\n**In diesem Teil werden wir weiterhin Robonomics-Tools verwenden, um eine Drohne von einer Parachain steuern zu lassen. Diesmal fügen wir Optionen zum Senden von Daten an IPFS und zum Speichern von Hashes in der Kette hinzu. Unten finden Sie die Anleitung und Code-Schnipsel. Anforderungen:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (Installationsanleitung [hier](http://wiki.ros.org/melodic/Installation))\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22 (herunterladen von [hier](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz) und installieren)\n</li>\n\n<li class=\"flex\">\n\nRobonomics-Knoten (Binärdatei) (Laden Sie die neueste Version [hier](https://github.com/airalab/robonomics/releases) herunter)\n</li>\n\n<li>Python-Abhängigkeiten:\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\nDer gesamte Prozess der Codierung dieses Teils der Demo wird in einem Video unten präsentiert.\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. Abhängigkeiten hinzufügen\nWenn wir eine Simulation starten und die Themenliste überprüfen (siehe Teil 1), werden wir feststellen, dass es ein Thema gibt, das Bilddaten der Frontkamera enthält und den Nachrichtentyp `sensor_msgs/Image` verwendet:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\nLassen Sie uns versuchen, alle 1 Sekunde ein Bild zu machen und nach dem Flug diese Fotos auf IPFS zu veröffentlichen. Wenn Sie das erste Tutorial abgeschlossen haben, müssen Sie nichts weiter herunterladen. Es handelt sich um das Skript `drone_sample_controller_pictures.py`.\n\n## 2. Konten in DAPP verwalten\nWie in einem früheren Tutorial durchgeführt, erstellen Sie einen lokalen Robonomics-Netzwerkknoten mit der Robonomics-Binärdatei:\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Wichtig!** Vor den nächsten Starts ist es erforderlich, das Verzeichnis `db` zu entfernen\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nNach einem erfolgreichen Start erstellen Sie Konten gemäß [dieser](https://wiki.robonomics.network/docs/create-account-in-dapp/) Anleitung. **Vergessen Sie nicht, jeden Kontosamen und -adresse zu speichern! Sie benötigen sie für Transaktionen**. Fügen Sie diese Adressen, Samen und den Pfad zur Robonomics-Binärdatei der Datei `config.config` in `robonomics_ws/src/robonomics_sample_controller/src` hinzu. Überweisen Sie etwas Geld (Einheiten) auf diese Konten:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. Starten\nBisher sollte der **einzige laufende** robonomics lokale Knoten sein. Starten Sie in einem separaten Terminal die Drohnensimulation:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nStarten Sie einen weiteren IPFS-Dämon:\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nFühren Sie das Skript aus:\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\nJetzt können Sie eine Transaktion senden, um die Drohne zum Fliegen und Fotografieren zu starten. Verwenden Sie dazu den Robonomics IO `write`-Unterbefehl der Robonomics-Binärdatei:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nWo `<DRONE_ADDRESS>` und `<EMPLOYER’S_KEY>` entsprechend durch zuvor gespeicherte Zeichenfolgen ersetzt werden.\nSie sollten das Protokoll `\"Taking Off\"` sehen und die Drohne sollte mit dem Fliegen und Fotografieren beginnen:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\nSpäter, wenn der Job erledigt ist, gehen Sie im Robonomics-Portal zu `Entwickler` -> `Chain State` und fügen Sie mit der ausgewählten `Datalog` als Zustellabfrage über die `“+”`-Schaltfläche ein `DRONE`-Datalog hinzu. Der IPFS-Hash der Telemetrie wurde in die Blockchain gespeichert. Um die Daten zu sehen, kopieren Sie einfach den Hash und fügen Sie ihn der lokalen [Gateway](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/) Adresse `localhost:8080/ipfs/` hinzu:\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"de/learn/connect-any-ros-compatible-drone/overview.md","name":"overview"},"defaultName":"Connect ROS-compatible drone","lastUpdate":"Thu May 04 2023 12:52:55 GMT+0400 (Samara Standard Time)"}},"context":{}}