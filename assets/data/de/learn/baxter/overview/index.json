{"hash":"38d00f5ce0b34e89f5f33ff65026c37e182f6828","data":{"course":{"id":"c45135131ee288acc52bbfcd1d12cfa9","title":"Steuerung des Baxter-Roboters","description":"Steuerung des Baxter-Roboters","content":"\nBeispiel für die Funktionsweise:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## Anforderungen:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (Installationsanleitung [hier][db2])  \n\n</li>\n\n<li>Zusätzliche Pakete:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effodert-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS bis 0.6.0 (herunterladen von [hier][db3] und installieren)\n\n</li>\n\n<li> Python-Pakete:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics-Knoten neueste [Version herunterladen][db4] (zuletzt getestete Version v1.1)\n\n</li>\n\n<li>IPFS-Browsererweiterung (nicht notwendig)</li>\n\n</List>\n\n<br/>\n\n## 0. Installieren Sie die CV Bridge-Erweiterung für Python3\n\n<List>\n\n<li> Erstellen Sie ein Catkin-Arbeitsbereich\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Weisen Sie Catkin an, CMake-Variablen festzulegen. Verwenden Sie Ihre aktuelle Version von `python`. Für mich ist es `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Clonen Sie cv_bridge src:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Finden Sie die Version von cv_bridge in Ihrem Repository:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Überprüfen Sie die richtige Version im Git-Repo aus. In unserem Fall ist es 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Bauen:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Umgebung mit neuem Paket erweitern:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Test:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. Simulation und Controller-Pakete herunterladen\nPakete herunterladen:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nVergessen Sie nicht, den Quellbefehl hinzuzufügen:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Simulation starten\nLassen Sie uns die Gazebo-Welt starten und unseren Baxter darin platzieren:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nÖffnen Sie ein weiteres Fenster im Terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nSie können einige Modelle vor unseren Baxter stellen. Es wird interessanter sein.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Konten in DAPP verwalten\n\nDa wir testen, erstellen wir ein lokales Robonomics-Netzwerk mit der Robonomics-Binärdatei. Gehen Sie zum Ordner mit der Robonomics-Datei und führen Sie aus:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nGehen Sie zum [Robonomics Parachain-Portal][db5] und wechseln Sie zum lokalen Knoten\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nGehen Sie zu Konten und erstellen Sie __Baxter__ und __Arbeitgeber__-Konten (__Roboter__ ist nicht notwendig)\n\n__Wichtig!__ Kopieren Sie das **Mnemonic** und die **Adresse** jedes Kontos (um die Adresse zu kopieren, klicken Sie auf das Symbol des Kontos). **Mnemonic** ist der private Schlüssel für das Konto.\nÜberweisen Sie etwas Geld (Einheiten) auf diese Konten:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nFügen Sie das **Mnemonic** und die **Adresse** von Baxter zu `config.yaml` in `robot_ws/src/Baxter_simulation_controller/config/` hinzu\n\n## 4. Simulation starten\n\nFühren Sie in einem neuen Fenster aus:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nÖffnen Sie ein separates Terminal und starten Sie das *Controller-Paket*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nJetzt können Sie eine Transaktion senden, die den Baxter dazu bringt, sich zu bewegen und Daten zu sammeln. Dazu können Sie das gleiche [Robonomics Parachain-Portal][db5] verwenden. Gehen Sie zu **Entwickler->Extrinsische** und wählen Sie das Arbeitgeberkonto von Baxter, das `launch`-Extrinsische, das Konto von Baxter als Zielkonto und `yes` als Parameter aus. Senden Sie das Extrinsische.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nDer Roboter sollte sich bewegen. Er akzeptiert weder Befehle von anderen Konten noch Befehle mit dem Parameter `no`.\nSie sollten Folgendes sehen:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nWenn die Arbeit beendet ist, gehen Sie zum Robonomics-Portal zu `Entwickler > Chain State`. Wählen Sie `datalog.datalogItem(AccountId,u64)` in **Zustandsabfrage** aus. Wenn Sie alle Datalogs anzeigen möchten, schalten Sie `Include Option` aus und zeigen Sie Baxters Datalog-Nachricht mit der Schaltfläche \"+\" an.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nJetzt ist der IPFS-Hash der Telemetrie und Fotos in der Blockchain gespeichert. Um die Daten zu sehen, kopieren Sie einfach den Hash und fügen Sie ihn in die Suchleiste mit der URL ein: gateway.ipfs.io/ipfs/<br fügen Sie hier Ihren Hash ein >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\nKlicken Sie auf __Auf Gateway anzeigen__ und das war's!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Baxter-Simulation v2.0\n\nBeispiel, wie es funktioniert:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## Anforderungen:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (Installationsanleitung [hier][db2])  \n\n</li>\n\n<li>Zusätzliche Pakete:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS bis 0.6.0 (herunterladen von [hier][db3] und installieren)\n\n</li>\n\n<li> Python-Pakete:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics-Knoten (Binärdatei) (neueste [Version hier herunterladen][db4])\n\n</li>\n\n<li class=\"flex\">\n\nErstellen Sie __Baxter__ und __Arbeitgeber__-Konten auf dem **Robonomics-Portal** (Sie finden ein Tutorial zum Thema \"Ein Konto auf dem Robonomics-Portal erstellen\" [hier][db8]).\n</li>\n\n<li>IPFS-Browsererweiterung (nicht notwendig)</li>\n\n</List>\n\n<br/>\n\n## 0. Installieren Sie die CV Bridge-Erweiterung für Python3\n\n<List>\n\n<li> Erstellen Sie ein Catkin-Arbeitsbereich\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Weisen Sie Catkin an, CMake-Variablen festzulegen. Verwenden Sie Ihre aktuelle Version von `python`. Für mich ist es `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Clonen Sie cv_bridge src:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Finden Sie die Version von cv_bridge in Ihrem Repository:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Überprüfen Sie die richtige Version im Git-Repo aus. In unserem Fall ist es 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Bauen:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Umgebung mit neuem Paket erweitern:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Test:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. Simulation und Controller-Pakete herunterladen\nWir müssen 2 Arbeitsbereiche erstellen - einen für die Hauptpakete von Baxter und einen für das Hauptsteuerungsprogramm.\nErster Arbeitsbereich. Es ist das Hauptsteuerungsprogramm. Es wird unter Python3 ausgeführt.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nZweiter Arbeitsbereich. Hier befinden sich alle Baxter-Pakete. Die Simulation ist sehr alt, daher kann sie nur unter Python2 ausgeführt werden.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nDiese Pakete wurden für ROS Indigo erstellt. Wir müssen einige Dateien ändern, um sie unter ROS Melodic auszuführen.\nWir werden **Patch**-Dateien verwenden.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nUnd lassen Sie uns alle unsere Pakete bauen:  \nErst Baxter-Pakete erstellen\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nDann zurück zum ersten Arbeitsbereich und auch dort erstellen:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nVergessen Sie nicht, den Quellbefehl hinzuzufügen:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Simulation starten\n### Lassen Sie uns unsere Simulation starten:\nGehen Sie zunächst zu `robot_ws` und kopieren und bearbeiten Sie baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nFinden Sie Ihre lokale IP-Adresse mit dem Befehl:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\nBearbeiten Sie die folgenden Werte in `baxter.sh` :\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- Ihre_ip - geben Sie Ihre lokale IP-Adresse ein. Siehe `ip a`\n- ros_version - zum Beispiel \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nFühren Sie das Baxter-Shell-Skript mit sim spezifiziert aus:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nSie können einige Modelle vor unseren Baxter stellen. Es wird interessanter sein.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Konten in DAPP verwalten\n\nDa wir testen, erstellen wir ein lokales Robonomics-Netzwerk mit der Robonomics-Binärdatei. Gehen Sie zum Ordner mit der Robonomics-Datei und führen Sie aus:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nGehen Sie zum [Robonomics Parachain-Portal][db5] und wechseln Sie zum lokalen Knoten\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nGehen Sie zu Konten und erstellen Sie __Baxter__ und __Arbeitgeber__-Konten.\n\nSie finden das Handbuch \"Ein Konto auf dem Robonomics-Portal erstellen\" [hier][db8]\n\n__Wichtig!__ Kopieren Sie das **Mnemonic** und die **Adresse** jedes Kontos (um die Adresse zu kopieren, klicken Sie auf das Symbol des Kontos). **Mnemonic** ist der private Schlüssel für das Konto.\n\nÜberweisen Sie etwas Geld (Einheiten) auf diese Konten:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nFügen Sie Baxters **Mnemonic** und **Adresse** zu `config.yaml` in `robonomics_ws/src/Baxter_simulation_controller/config/` hinzu\n\n## 4. Simulation starten\n\nFühren Sie in einem neuen Fenster aus:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nÖffnen Sie ein separates Terminal und starten Sie das *Controller-Paket*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nJetzt können Sie eine Transaktion senden, um den Baxter zu starten und Daten zu sammeln. Gehen Sie dazu zum selben Portal [Robonomics Parachain Portal][db5]. Gehen Sie zu **Entwickler->Extrinsisches** und wählen Sie das Arbeitgeberkonto von Baxter, das `launch`-Extrinsische, Baxters Konto als Zielkonto und `yes` als Parameter. Senden Sie das Extrinsische ab\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nDer Roboter sollte sich bewegen. Er akzeptiert weder Befehle von anderen Konten noch Befehle mit dem Parameter `no`.\nSie sollten Folgendes sehen:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nWenn die Arbeit beendet ist, gehen Sie zum Robonomics-Portal zu `Entwickler > Chain-Zustand`. Wählen Sie `datalog.datalogItem(AccountId,u64)` in der **Zustandsabfrage** aus. Wenn Sie alle Datalogs anzeigen möchten, schalten Sie die `include option` aus und fügen Sie die Nachricht des Baxters-Datalogs mit der Schaltfläche \"+\" hinzu\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nJetzt ist der IPFS-Hash der Telemetrie und Fotos in der Blockchain gespeichert. Um die Daten zu sehen, kopieren Sie einfach den Hash und fügen Sie ihn in die Suchleiste mit der URL ein:  \n#### gateway.ipfs.io/ipfs/< setzen Sie hier Ihren Hash ein>\n\nDas war's!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/Installation>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"de/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}