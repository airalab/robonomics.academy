{"hash":"1eafca61b16c3525f2f7c5d47de816b7adf0794c","data":{"course":{"id":"f16dd4d9186c41f873f669f9bb3bc140","title":"Connectez le rover Curiosity de Mars","description":"Connectez le rover Curiosity de Mars sous le contrôle du parachain Robonomics.","content":"\n**Voyons comment le contrôle du parachain Robonomics permet de faire bouger le rover Curiosity de Mars. Exigences:**\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (manuel d'installation [ici](http://wiki.ros.org/melodic/Installation))\n\n</li>\n\n\n<li>paquets supplémentaires:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n  sudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS jusqu'à [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n\n</li>\n\n<li class=\"flex\">\n\n[Extension compagnon IPFS](https://github.com/ipfs/ipfs-companion)\n\n</li>\n\n<li class=\"flex\">\n\nNœud Robonomics (fichier binaire) (téléchargez la dernière version [ici](https://github.com/airalab/robonomics/releases). Ce tutoriel a été testé avec succès sur la version 1.1)\n\n</li>\n\n</List>\n\n<br/>\n\nVoici la vidéo montrant le lancement réussi:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n\n<br/>\n\n### 1. Mettre en place une simulation\n\nTélécharger le package du rover Curiosity:\n<LessonCodeWrapper language=\"bash\">\n  mkdir -p robonomics_ws/src\n  cd robonomics_ws/src\n  git clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\n  cd ..\n  catkin build\n</LessonCodeWrapper>\n\nNous devons ajuster les conditions de départ pour que notre rover apparaisse en douceur:\n\n<List>\n\n<li>Allez sur\n\n`src/master/curiosity_mars_rover_description/worlds` et change la ligne 14 du fichier` mars_curiosity.world` to \n`<pose>0 0 8 0 0 0</pose>`\n\n</li>\n\n<li>Allez sur\n\n`src/master/curiosity_mars_rover_description/launch` et changez la ligne 4 du fichier `mars_curiosity_world.launch` en \n`<arg name=\"paused\" default=\"false\"/>`\n\nN'oubliez pas d'ajouter la commande source à `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n</li>\n\n<li> Redémarrez la console et lancez la simulation :\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\n  roslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/rover.jpg\" alt=\"Mars rover\"/>\n\n</li>\n\n</List>\n\nRemarque : si l'image est sombre, par exemple ombrée, changez `Camera` en `Orthorgraphic` dans la barre d'outils de Gazebo.\nLa simulation peut être fermée pendant un certain temps.\n\n------------\n\n<br/>\n\n### 2. Téléchargez le package du contrôleur Robonomics\nPour télécharger un package de contrôleur pour Rover, saisissez dans le terminal :\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n</LessonCodeWrapper>\n\n\n------------\n\n<br/>\n\n### 3. Gérez les comptes dans DAPP\nComme nous sommes en phase de test, créons un réseau robonomics local avec le fichier binaire robonomics :\n\n<LessonCodeWrapper language=\"bash\">\n  ./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/robonomics.jpg\" alt=\"Exécuterning node\"/>\n\n\nAllez sur le [portail Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) et passez au nœud local \n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/local_node.jpg\" alt=\"Local node\"/>\n\n\nAllez dans Comptes et créez les comptes **CURIOSITY** et **EMPLOYER**.\n\n**Important** ! Copiez l'adresse de chaque compte (pour copier l'adresse, cliquez sur l'icône du compte) et la **graine mnémonique** du compte Curiosity (obtenue lors de la création du compte)\nTransférez de l'argent (unités) sur ces comptes. Vous pouvez en savoir plus sur les comptes Robonomics [ici](https://wiki.robonomics.network/docs/en/create-account-in-dapp/)\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/account_creation.jpg\" alt=\"Account creation\"/>\n\n\nAjoutez ces adresses, la graine et l'adresse du nœud (par défaut `ws://127.0.0.1:9944` pour le nœud de développement) dans `config.config` dans `robonomics_ws/src/robonomics_sample_controller/src`. Pas de guillemets.\n\n------------\n\n<br/>\n\n### 4. Démarrez Robonomics\n\nAvant d'aller plus loin, assurez-vous d'avoir installé l'extension [IPFS Companion Extension](https://github.com/ipfs/ipfs-companion).\n\nDans un terminal séparé, lancez IPFS :\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nifps init #vous n'avez besoin de le faire qu'une fois par installation d'IPFS\nipfs daemon\n</LessonCodeWrapper>\n\nDans un autre terminal séparé, lancez la simulation Curiosity si elle n'est pas en direct :\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\nAttendez qu'elle reste immobile\n\nDans un autre terminal, lancez le contrôleur :\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nrosrun robonomics_sample_controller sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/controller.jpg\" alt=\"Controller\"/>\n\nMaintenant, vous pouvez envoyer une transaction déclenchant le Rover pour commencer à se déplacer et à collecter des données. Pour ce faire, vous pouvez utiliser le même [portail Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/).\nAllez dans `Développeur->Extrinsèques` et sélectionnez le compte employeur de Curiosity, l'extrinsèque `launch`, le compte cible de Curiosity et `oui` comme paramètre.\nSoumettez l'extrinsèque.\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/extrinsic.jpg\" alt=\"Extrinsic\"/>\n\nLe robot devrait commencer à se déplacer. Il n'acceptera pas les commandes d'autres comptes ni les commandes avec le paramètre `non`. Le rover se déplacera et collectera des données pendant environ une minute.\nPlus tard, lorsque le travail est terminé :\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/job_done.jpg\" alt=\"Job done\"/>\n\n\nSur le portail Robonomics, allez dans `Développeur -> État de la chaîne` et obtenez un datalog `CURIOSITY` en utilisant le bouton “+” avec `datalog -> RingBufferItem` sélectionné comme requête : \n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/datalog.jpg\" alt=\"Datalog\"/>\n\n\nMaintenant, le hash IPFS de la télémétrie est enregistré dans la blockchain. Pour voir les données, il suffit de copier le hash et de le trouver sur une passerelle :\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/data_in_ipfs.jpg\" alt=\"Data in IPFS\"/>\n\n\nCette télémétrie est conservée dans un stockage décentralisé, et son hash est stocké dans une blockchain !\n","fileInfo":{"path":"fr/learn/connect-mars-curiosity-rover/overview.md","name":"overview"},"defaultName":"Connect Mars Curiosity Rover","lastUpdate":"Thu May 18 2023 10:41:00 GMT+0400 (Samara Standard Time)"}},"context":{}}