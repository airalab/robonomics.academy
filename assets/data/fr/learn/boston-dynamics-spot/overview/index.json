{"hash":"76c8f6c333fd43be28237b9e09f4e90eec13e11a","data":{"course":{"id":"009408f7f482d33305918365073dc985","title":"Arrêt d'urgence, Initialisation, Contrôle de la position du corps","description":"Au cours de cette leçon, vous apprendrez comment vous autoriser en tant qu'utilisateur, obtenir le contrôle de la puissance du moteur et envoyer des commandes de base à Spot.","content":"\n<RoboAcademyText fWeight=\"500\">\nAu cours de cette leçon, vous apprendrez comment vous autoriser en tant qu'utilisateur, obtenir le contrôle de la puissance du moteur et envoyer des commandes de base à Spot.\n</RoboAcademyText>\n\n## Théorie\n\nComme tous les robots sérieux, Boston Dynamics Spot dispose d'un mécanisme de protection - le [service E-Stop](https://dev.bostondynamics.com/docs/concepts/estop_service) (arrêt d'urgence) qui doit toujours être actif pendant le fonctionnement de Spot pour éviter tout dommage physique potentiel. L'activation de l'E-Stop gèle instantanément toutes les articulations (cela se produit sans éteindre les moteurs si le robot était allumé).\n\nTout d'abord, nous devons prendre le contrôle du robot. Il existe deux façons de le faire - *acquérir* ou *prendre*. *Acquérir* signifie demander le contrôle de manière douce, si quelqu'un contrôle le robot maintenant, votre demande sera refusée. D'autre part, *prendre* signifie prendre le contrôle de force, peu importe si l'opérateur actuel existe.\n\nAinsi, pour effectuer un mouvement, vous devez suivre le schéma :\n\n<LessonImages src=\"boston-dynamics-spot/e_stop_scheme.png\" alt=\"États d'exécution du robot\" imageClasses=\"mb\"/>\n\nRobot Execution States\n\nDans cette leçon, vous apprendrez comment contrôler la rotation du robot en changeant son *yaw*, *roll* et *pitch*. Sur l'image ci-dessous, le système de coordonnées du cadre du corps est montré :\n\n<LessonImages src=\"boston-dynamics-spot/spot_coords.png\" alt=\"Coordonnées de Spot\" imageClasses=\"mb\"/>\n\nSpot coordinates\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nLes angles dans un code sont représentés en radians.\n</RoboAcademyText>\n\nÀ la fin de la leçon, vous dessinerez une première lettre de votre nom dans l'air avec le visage de Spot. Commençons la configuration !\n\n## Configuration de Gitpod\n\nPour cette leçon, nous utiliserons Gitpod, un IDE basé sur le cloud qui vous permet de pratiquer sans installer de logiciel spécial sur votre ordinateur.\n\n1. Inscrivez-vous sur [Gitpod](https://gitpod.io/).\n2. Allez sur notre [environnement éducatif Spot](https://gitpod.io/#github.com/merklebot/spot-edu-environment) et ouvrez-le dans notre navigateur. Vous verrez la fenêtre avec les fonctions typiques de l'IDE. \n3. Cliquez sur l'icône Menu, puis allez dans Terminal et créez un nouveau terminal.\n\n<LessonImages src=\"boston-dynamics-spot/gitpod_terminal.png\" alt=\"terminal\" imageClasses=\"mb\"/>\n    \n    \n4. Copiez-collez cette commande :\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npython3 prepare_yggdrasil.py\nsudo ./start_yggdrasil.sh\n\n</LessonCodeWrapper>\n\net appuyez sur `Entrée`.\n\n1. Ouvrez un nouveau terminal (maintenant vous pouvez le faire en appuyant sur le bouton `+`) et testez la connexion avec la commande\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nping6 200:42f6:d055:e74e:ce4a:35aa:953a:70f7\n\n</LessonCodeWrapper>\n\nVous devriez voir quelque chose comme ceci :\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngitpod /workspace/spot-edu-environment (main) $ ping6 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09\nPING 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09(202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09) 56 data bytes\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=1 ttl=64 time=846 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=2 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=3 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=4 ttl=64 time=197 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=5 ttl=64 time=219 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=6 ttl=64 time=242 ms\n\n</LessonCodeWrapper>\n\n1. Avant l'heure prévue, nous vous enverrons une clé privée pour établir une connexion SSH.\n2. Copiez votre clé privée dans le fichier `id_ed25519`. Vous pouvez trouver le fichier dans l'explorateur de la barre latérale de *stop-edu-enviroment*.\n3. **Ajoutez une ligne vide à la fin du** fichier `id_ed25519` ***, c'est nécessaire pour que SSH fonctionne correctement.*** Appuyez sur `Ctrl+S` pour enregistrer les modifications.\n\nSi tout est en ordre, vous pouvez commencer à compléter la leçon en éditant `lesson1.py`\n\nPour exécuter le code, utilisez la commande :\n\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n\n</LessonCodeWrapper>\n\n\n<RoboAcademyText fWeight=\"700\" fStyle=\"normal\">\nN'oubliez pas de vous assurer que personne d'autre n'exécute son programme pour le moment.\n</RoboAcademyText>\n\n\n## Planifiez la session de pratique\n\nUtilisez le site de planification de Spot pour choisir le créneau horaire de votre session de pratique :\n\n[meetings.hubspot.com/strelka](https://meetings.hubspot.com/strelka)\n\n## Pratique\n\nMaintenant, nous allons créer un script simple pour Spot pour dessiner à l'écran en utilisant les mouvements de sa tête. \n\n<LessonCodeWrapper language=\"python\" codeClass=\"big-code\">\n# Import Spot Control modules\nimport bosdyn.client\nfrom bosdyn.client.robot_command import RobotCommandClient, blocking_stand\nfrom bosdyn.client.robot_command import RobotCommandBuilder\nfrom bosdyn.geometry import EulerZXY\nimport time\n# ENTER YOUR AUTH DATA HERE\nROBOT_IP=\"192.168.50.3\"\nSPOT_USERNAME=\"student\"\nSPOT_PASSWORD=\"\"\n# Helpers to control camera drawing (you don't need to modify it)\nimport requests\nVIDEOSERVER_URL=\"http://luke.merklebot:8000/\"\nVIDEOSERVER_TOKEN=\"1234\"\ndef notify_start_line():\n  requests.post(VIDEOSERVER_URL + \"start_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_stop_line():\n  requests.post(VIDEOSERVER_URL + \"stop_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_clear_canvas():\n    requests.post(VIDEOSERVER_URL + \"clear_canvas\", json={\"token\": VIDEOSERVER_TOKEN})\n# Start with registering out SDK\nsdk = bosdyn.client.create_standard_sdk('LessonOneClient')\n# Create instance of robot and auth with credentials\nrobot = sdk.create_robot(ROBOT_IP)\nrobot.authenticate(SPOT_USERNAME, SPOT_PASSWORD)\n# Create lease client and take exclusive control over Spot.  \nlease_client = robot.ensure_client('lease')\nlease = lease_client.take()\nlease_keep_alive = bosdyn.client.lease.LeaseKeepAlive(lease_client)\n# Try to power on the robot\nrobot.power_on(timeout_sec=20)\nif robot.is_powered_on():\n    print(\"Powered On\")\n\t\t# If everything went smooth, Spot face lights should turn green\nelse:\n\t\t# In case of some problems, e.g. somebody stole control over robot\n    print(\"Failed\")\n    exit(0)\n# Synchronize Spor inner time with ours - to avoid outdated commands\nrobot.time_sync.wait_for_sync()\n# To execute robot movement, create command client through which orders are sent\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\n# Start movement with simple stand up\nblocking_stand(command_client, timeout_sec=10)\n# Rotate robot body:\n#  1. Build command for body rotation. It’s not an easy task to control robot motion with commands on low level. \n#     Bosdyn Client allow as to use a shortcut - RobotCommandBuilder. It contains a number of predefined commands, \n#     you need just to choose one of your liking and insert parameters\nfootprint_R_body = EulerZXY(yaw=0.1, roll=0.1, pitch=0.1)\ncmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n#  2. Execute builded command\ncommand_client.robot_command(cmd)\ntime.sleep(2)\n# Return robot state back\ncommand_client.robot_command(RobotCommandBuilder.synchro_stand_command(footprint_R_body=EulerZXY(yaw=0, roll=0, pitch=0)))\ntime.sleep(2)\n# Change robot height\ncmd = RobotCommandBuilder.synchro_stand_command(body_height=0.1)\ncommand_client.robot_command(cmd)\n# Now we are ready to draw letter. \ndef draw_letter(command_client):\n\t\t# Choose points to draw (see the coords explanation bellow)\n    points_xy_draw = (\n        (125, 125),\n        (375, 875),\n        (500, 500),\n        (250, 500),\n        (500, 500),\n        (625, 125),\n    )\n    for x, y in points_xy_draw:\n        convert = lambda x: (x / 1000 - 0.5) * -1\n        x, y = map(convert, (x, y))\n        footprint_R_body = EulerZXY(\n            yaw=x, \n            roll=0.0, \n            pitch=y,\n        )\n        cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n        command_client.robot_command(cmd)\n        time.sleep(1)\nnotify_clear_canvas()\nnotify_start_line()\ndraw_letter(command_client)\nnotify_stop_line()\n# Turn off the robot gracefully\nrobot.power_off(cut_immediately=False)\n\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nSi nous devons déplacer la tête de Spot vers un point de la caméra, nous devons effectuer de grands calculs avec de nombreux paramètres non linéaires, ce qui n'est pas une tâche simple du tout. Mais nous pourrions dire que localement, les angles de lacet et de tangage pourraient être utilisés approximativement comme des coordonnées cartésiennes avec un coefficient sur une image.\n</RoboAcademyText>\n\n\n<LessonImages src=\"boston-dynamics-spot/cartesian.jpeg\" alt=\"spot\" imageClasses=\"mb\"/>\n\nMaintenant, vous pouvez essayer d'exécuter le script et voir le résultat. N'oubliez pas d'enregistrer votre code avec Ctrl+S :\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n</LessonCodeWrapper>\n\n\n### La vidéo de Spot peut être trouvée ici :\n[https://codepen.io/smehnov/pen/BaVNrPM](https://codepen.io/smehnov/pen/BaVNrPM)\n\n\n## Défi\nCréez un script Python qui contrôle la position du corps du robot avec une séquence de mouvements :\n\n1. Se lever\n2. Tracez vos initiales avec son visage (une lettre, au moins 3 points)\n3. S'asseoir\n\n## Résultats\n\nMaintenant, vous savez comment :\n\n- travailler avec Spot SDK\n- construire une commande de base\n- faire pivoter le corps du robot\n- se connecter à Spot\n\nEt même dessiner une lettre. Félicitations !\n\n\n<RoboAcademyText fWeight=\"500\">\n\nNous avons collecté un [rosbag](http://wiki.ros.org/rosbag) avec les données des articulations de Spot, afin que vous puissiez les visualiser (par exemple avec [foxglove](https://www.notion.so/Lesson-1-Emergency-Stop-Initialization-Body-Position-Control-4ccf6316330d4680ab1bb571b2b788d5)). Le certificat vous sera envoyé par e-mail bientôt.\n\n</RoboAcademyText> \n\n\n## [Planifiez votre première leçon](https://meetings.hubspot.com/strelka)","fileInfo":{"path":"fr/learn/boston-dynamics-spot/overview.md","name":"overview"},"defaultName":"Software Developing for Boston Dynamics Spot","lastUpdate":null}},"context":{}}