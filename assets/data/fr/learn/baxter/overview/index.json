{"hash":"e32ec6aa0237b51fe496ef5a5df720ef84304a93","data":{"course":{"id":"993192dff7bb37fa639760f413bbd8af","title":"Contrôler le robot Baxter","description":"Contrôler le robot Baxter","content":"Exemple de fonctionnement :\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## Exigences:\n\n<List>\n\n<li class=\"flex\">\n\nROS Mélodique + Gazebo (manuel d'installation [ici][db2])  \n\n</li>\n\n<li>paquets supplémentaires:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effout-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS jusqu'à 0.6.0 (télécharger depuis [ici][db3] et installer)\n\n</li>\n\n<li> paquets python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nTélécharger le dernier [release][db4] de Robonomics node ici (dernière version testée v1.1)\n\n</li>\n\n<li>Extension du navigateur IPFS (non nécessaire)</li>\n\n</List>\n\n<br/>\n\n## 0. installer l'extension CV Bridge pour python3\n\n<List>\n\n<li> Créer un espace de travail catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Instruire catkin pour définir les variables cmake. Utilisez votre version actuelle de `python`. Pour moi, c'est `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Cloner cv_bridge src:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Trouver la version de cv_bridge dans votre dépôt:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Vérifier la bonne version dans le dépôt git. Dans notre cas, c'est 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Construire:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Étendre l'environnement avec le nouveau package:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Tester:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. Télécharger les packages de simulation et de contrôleur\nTélécharger les packages:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nN'oubliez pas d'ajouter la commande source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Démarrer la simulation\nCommençons par le monde de gazebo et mettons notre baxter dedans:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nOuvrez une autre fenêtre dans le terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nVous pouvez mettre quelques modèles devant notre baxter. Ce sera plus intéressant.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Gérer les comptes dans DAPP\n\nComme nous sommes en phase de test, créons un réseau robonomics local avec le fichier binaire robonomics. Allez dans le dossier avec le fichier robonomics et exécutez:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nAllez sur le [portail Robonomics Parachain][db5] et passez au nœud local\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nAllez dans Comptes et créez des comptes __Baxter__ et __Employeur__ (le compte __Robot__ n'est pas nécessaire)\n\n__Important!__ Copiez le **mnémonique** et l'**adresse** de chaque compte (pour copier l'adresse, cliquez sur l'icône du compte). Le **mnémonique** est la clé privée du compte.\nTransférez de l'argent (unités) sur ces comptes:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nAjoutez le **mnémonique** et l'**adresse** de Baxter à `config.yaml` dans `robot_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Démarrer la simulation\n\nDans une nouvelle fenêtre, exécutez:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nOuvrez un terminal séparé et lancez le *package de contrôleur*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nMaintenant, vous pouvez envoyer une transaction déclenchant le mouvement du Baxter et la collecte de données. Pour ce faire, vous pouvez utiliser le même [portail Robonomics Parachain][db5]. Allez sur **Développeur->Extrinsèques** et sélectionnez le compte employeur de Baxter, l'extrinsèque `launch`, le compte de Baxter comme compte cible et `oui` comme paramètre. Soumettez l'extrinsèque.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nLe robot devrait commencer à bouger. Il n'acceptera pas les commandes d'autres comptes ni les commandes avec le paramètre `non`.\nVous devriez voir ce qui suit:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nquand le travail est terminé, allez sur le Portail Robonomics à `Développeur > État de la chaîne`. Choisissez `datalog.datalogItem(AccountId,u64)` dans **requête d'état**. Si vous voulez afficher tous les datalogs, désactivez l'option `inclure` et affichez le message datalog de Baxter en utilisant le bouton \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nMaintenant, le hash IPFS de la télémétrie et des photos est enregistré dans la blockchain. Pour voir les données, il suffit de copier le hash et de l'insérer dans la barre de recherche avec l'URL: gateway.ipfs.io/ipfs/<br mettez votre hash ici >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\nCliquez sur __Voir sur la passerelle__ et c'est tout!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Simulation de Baxter v2.0\n\nExemple de fonctionnement:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## Exigences:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Mélodique + Gazebo (manuel d'installation [ici][db2])  \n\n</li>\n\n<li>paquets supplémentaires:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS jusqu'à 0.6.0 (télécharger depuis [ici][db3] et installer)\n\n</li>\n\n<li> paquets python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNœud Robonomics (fichier binaire) (télécharger la dernière [version][db4] ici)\n\n</li>\n\n<li class=\"flex\">\n\nCréez des comptes __Baxter__ et __Employeur__ sur le **Portail Robonomics** (vous pouvez trouver un tutoriel \"Créer un compte sur le Portail Robonomics\" [ici][db8]).\n</li>\n\n<li>Extension du navigateur IPFS (non nécessaire)</li>\n\n</List>\n\n<br/>\n\n## 0. installer l'extension CV Bridge pour python3\n\n<List>\n\n<li> Créer un espace de travail catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Instruire catkin pour définir les variables cmake. Utilisez votre version actuelle de `python`. Pour moi, c'est `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Cloner cv_bridge src:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Trouver la version de cv_bridge dans votre dépôt:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Vérifier la bonne version dans le dépôt git. Dans notre cas, c'est 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Construire:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Étendre l'environnement avec le nouveau package:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Tester:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. Télécharger les packages de simulation et de contrôleur\nNous devrons créer 2 espaces de travail - un pour les principaux packages de Baxter et un autre pour le programme de contrôle principal.\nPremier espace de travail. C'est le programme de contrôle principal. Il fonctionnera sous python3.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nDeuxième espace de travail. Tous les packages de Baxter seront là. La simulation est très ancienne, donc elle ne peut fonctionner qu'avec python2.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nCes packages ont été créés pour ROS indigo. Nous devons modifier certains fichiers pour les exécuter sur ROS mélodique.\nNous utiliserons des fichiers de **correctif**.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nEt construisons tous nos packages :  \nConstruisez d'abord les packages de Baxter\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nPuis retournez au premier espace de travail et construisez-le aussi:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nN'oubliez pas d'ajouter la commande source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Démarrer la simulation\n### Commençons notre simulation:\nTout d'abord, allez dans `robot_ws` et copiez et modifiez baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nTrouvez votre adresse IP locale avec la commande:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\nModifiez les valeurs suivantes dans `baxter.sh` :\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- votre_ip - mettez votre adresse IP locale. Voir `ip a`\n- ros_version - par exemple \"mélodique\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nExécutez le script shell de baxter avec sim spécifié:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nVous pouvez mettre quelques modèles devant notre baxter. Ce sera plus intéressant.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Gérer les comptes dans DAPP\n\nComme nous sommes en phase de test, créons un réseau robonomics local avec le fichier binaire robonomics. Allez dans le dossier avec le fichier robonomics et exécutez:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nAllez sur le [portail Robonomics Parachain][db5] et passez au nœud local\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nAllez dans Comptes et créez des comptes __Baxter__ et __Employeur__.\n\nVous pouvez trouver le manuel \"Créer un compte sur le Portail Robonomics\" [ici][db8]\n\n__Important!__ Copiez le **mnémonique** et l'**adresse** de chaque compte (pour copier l'adresse, cliquez sur l'icône du compte). Le **mnémonique** est la clé privée du compte.\n\nTransférez de l'argent (unités) sur ces comptes:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nAjoutez le **mnémonique** et l'**adresse** de Baxter à `config.yaml` dans `robonomics_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Démarrer la simulation\n\nDans une nouvelle fenêtre, exécutez:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nOuvrez un terminal séparé et lancez le *package de contrôleur*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nMaintenant vous pouvez envoyer une transaction pour déclencher le mouvement de Baxter et la collecte de données. Pour ce faire, vous pouvez utiliser le même portail [Portail Robonomics Parachain][db5]. Allez sur **Développeur->Extrinsèques** et sélectionnez le compte employeur de Baxter, l'extrinsèque `launch`, le compte de Baxter comme compte cible et `yes` comme paramètre. Soumettez l'extrinsèque.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nLe robot devrait commencer à bouger. Il n'acceptera pas les commandes d'autres comptes ni les commandes avec le paramètre `non`.\nVous devriez voir ce qui suit:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nQuand le travail est terminé, allez sur le Portail Robonomics à `Développeur > État de la chaîne`. Choisissez `datalog.datalogItem(AccountId,u64)` dans la **requête d'état**. Si vous voulez afficher tous les datalogs, alors désactivez l'option `include` et ajoutez la vue du message datalog de Baxter en utilisant le bouton \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nMaintenant, le hachage IPFS de la télémétrie et des photos est enregistré dans la blockchain. Pour voir les données, il suffit de copier le hachage et de l'insérer dans la barre de recherche avec l'URL :  \n#### gateway.ipfs.io/ipfs/< mettez votre hachage ici>\n\nC'est tout!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/Installation>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"fr/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}