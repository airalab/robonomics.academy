{"hash":"b7127cfb676a767c419fa0b68f47fd3dddba7323","data":{"course":{"id":"2d8d54bdd5ebc47a04f32de168226cad","title":"Connecteze le manipulateur Kuka","description":"Connectez le manipulateur","content":"\nUne vidéo avec un exemple de travail peut être trouvée ici:\n\nhttps://youtu.be/z55HepXbHr8\n\n<br/>\n\n***\n\n<br/>\n\n## Exigences\n\n<List>\n\n<li class=\"flex\">\n\nROS mélodique, Gazebo (instructions d'installation [ici](http://wiki.ros.org/melodic/Installation/Ubuntu))\n</li>\n\n<li>Quelques paquets supplémentaires\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li> IPFS 0.4.22 \n\n(téléchargez depuis [ici](https://www.npackd.org/p/ipfs/0.4.22) et installez)\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>pip3\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt-get install python3-pip\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li>substrate-interface\n\n<LessonCodeWrapper language=\"bash\">\npip3 install substrate-interface\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNœud Robonomics (fichier binaire) (téléchargez la dernière version [ici](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n<li>Extension du navigateur IPFS (non nécessaire)</li>\n\n</List>\n\n<br/>\n\n***\n\n<br/>\n\n## Installation\nInstallez le manipulateur Kuka et les packages de contrôle\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">cd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make</LessonCodeWrapper>\n\n***\n\n<br/>\n\n## Exécution du modèle gazebo\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n</LessonCodeWrapper>\n\nDans une nouvelle fenêtre\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun manipulator_gazebo move_arm_server\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/1.png\" alt=\"model\"/>\n\n***\n\n<br/>\n\n## Exécution de Robonomics\nAllez dans le dossier avec le fichier Robonomics et créez un réseau Robonomics local:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/robonomics.png\" alt=\"robonomics\"/>\n\nAllez sur le portail Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) et passez au nœud local\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/local.png\" alt=\"local\"/>\n\nEnsuite, allez dans Comptes et créez un compte `KUKA`. Enregistrez la clé mnémonique du compte, vous en aurez besoin plus tard. \n\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/create_acc.png\" alt=\"acc\"/>\n\nEnvoyez quelques unités au nouveau compte à partir d'un des comptes par défaut.\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/send_money.png\" alt=\"accs\"/>\n\n***\n<br/>\n\n## Exécution de IPFS\nExécuter ipfs daemon:\n\n<LessonCodeWrapper language=\"bash\">\nipfs daemon\n</LessonCodeWrapper>\n\n***\n\n</br>\n\n## Exécution du package de contrôle\nDans le répertoire de configuration du package de contrôle kuka_control, vous devez créer un fichier de configuration avec ces lignes, où `<votre_mnémonique>` est la graine mnémonique enregistrée:\n\n<LessonCodeWrapper language=\"bash\">\n{\n    \"kuka_mnemonic\": \"[your_mnemonic]\",\n    \"node\": \"ws://127.0.0.1:9944\"\n}\n</LessonCodeWrapper>\n\n\nMaintenant, vous pouvez exécuter le script de contrôle:\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun kuka_controller move_arm_client.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/run.png\" alt=\"control\"/>\n\n## Envoi de la transaction\nDans le portail Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) allez à `Développeur/Extrinsèques`, changez `extrinsèque` en `lancement`. Choisissez votre compte `KUKA` dans `robot` et changez `param` en `Oui`. Appuyez sur `Soumettre la transaction`\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/launch.png\" alt=\"transaction\"/>\n\nDans la fenêtre avec le package de contrôle kuka_control, vous verrez:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/res.png\" alt=\"done\"/>\n\nEnsuite, allez à `Développeur/État de la chaîne` sur le portail Robonomics, sélectionnez `datalog` et `datalogItem((AccountId,u64)): RingBufferItem` dans la requête et ajoutez le datalog `KUKA` avec le bouton '+':\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/datalog.png\" alt=\"datalog\"/>\n\nMaintenant, vous pouvez trouver la télémétrie du robot dans IPFS via ce lien avec votre hachage `https://gateway.ipfs.io/ipfs/<hash>`.\n\n## Dépannage\n\nSi `catkin_make` ne fonctionne pas avec le message indiquant qu'il ne peut pas trouver MoveArm.h, essayez de supprimer les quatre dernières lignes dans CMakeLists.txt dans le package kuka_manipulator_gazebo:\n\n<LessonCodeWrapper language=\"yaml\">\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(move_arm_server src/move_arm_server.cpp)\ntarget_link_libraries(move_arm_server ${catkin_LIBRARIES})\nadd_dependencies(move_arm_server beginner_tutorials_gencpp)\n</LessonCodeWrapper>\n\nFaites `catkin_make` sans ces lignes, puis remettez-les et refaites `catkin_make`.","fileInfo":{"path":"fr/learn/kuka/overview.md","name":"overview"},"defaultName":"Connect Kuka manipulator","lastUpdate":null}},"context":{}}