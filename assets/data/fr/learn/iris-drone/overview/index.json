{"hash":"e6c519792deb242508dbdc929978fb576e31f14b","data":{"course":{"id":"2bcbd35f931f9bb4c79204d93638af3c","title":"Connectezer un véhicule aérien sans pilote","description":"Connecter un véhicule aérien sans pilote","content":"\n**Le drone commence à se déplacer après la transaction et stocke le fichier avec les coordonnées dans IPFS. Le script de contrôle est basé sur le [script de démonstration GAAS](https://github.com/generalized-intelligence/GAAS)**  \n\nhttps://youtu.be/4CwtGAX1OwM\n\n<br/>\n\n## Exigences\n\n<List>\n\n<li> Dépendances pour le contrôle:\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt install -y \\\n\tpython3-pip \\\n\tninja-build \\\n\texiftool \\\n\tpython-argparse \\\n\tpython-empy \\\n\tpython-toml \\\n\tpython-numpy \\\n\tpython-yaml \\\n\tpython-dev \\\n\tpython-pip \\\n\tninja-build \\\n\tprotobuf-compiler \\\n\tlibeigen3-dev \\\n\tgenromfs\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\">\npip3 install \\\n\tpandas \\\n\tjinja2 \\\n\tpyserial \\\n\tcerberus \\\n\tpyulog \\\n\tnumpy \\\n\ttoml \\\n\tpyquaternion\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo [tutorial d'installation](http://wiki.ros.org/melodic/Installation)\n</li>\n\n<li>paquets supplémentaires:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\nsudo apt-get install python-jinja2\nsudo apt-get install python-catkin-pkg\nsudo apt-get install python3-catkin-pkg-modules\n</LessonCodeWrapper>\n\n</li>\n\n<li>Version IPFS 0.4.22\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nwget https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-amd64.tar.gz\ntar -xvzf go-ipfs_v0.4.22_linux-amd64.tar.gz\ncd go-ipfs\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNœud Robonomics (fichier binaire) (téléchargez la dernière version [ici](https://github.com/airalab/robonomics/releases))\n</li>\n\n</List>\n\n<br/>\n\n## Configuration de l'environnement\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nsudo ./install_geographiclib_datasets.sh\ncd ~/catkin_ws/src\ngit clone https://github.com/PX4/Firmware.git\ncd Firmware\ngit checkout v1.9.0\nbash ./Tools/setup/ubuntu.sh\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/catkin_ws/src\ngit clone https://github.com/generalized-intelligence/GAAS.git\ncp -r ~/catkin_ws/src/GAAS/simulator/models/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/models/\ncp -r ~/catkin_ws/src/GAAS/simulator/worlds/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/worlds/\ncp -r ~/catkin_ws/src/GAAS/simulator/posix-config/* ~/catkin_ws/src/Firmware/posix-configs/SITL/init/ekf2/\n</LessonCodeWrapper>\n\nModification de votre fichier `.bashrc`, en ajoutant les lignes suivantes en bas:  \n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash   \nsource ~/catkin_ws/src/Firmware/Tools/setup_gazebo.bash ~/catkin_ws/src/Firmware/ ~/catkin_ws/src/Firmware/build posix_sitl_default \nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware/Tools/sitl_gazebo\nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models:~/catkin_ws/src/GAAS/simulator/models\n</LessonCodeWrapper>  \n\n  \n## Installation du package de contrôle\nDans un nouveau terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd catkin_ws/src\ngit clone https://github.com/tubleronchik/robonomics_drone_sim.git\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\n## Réseau Robonomics\n\nPour créer un réseau robonomics local, allez dans le dossier avec le fichier binaire robonomic et exécutez:  \n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --rpc-cors all\n</LessonCodeWrapper>\n\nAjoutez le chemin de robonomic à `config.py`\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/IPFS.jpg\" alt=\"IPFS\"/>\n\nAllez sur le [portail Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) et passez au nœud local.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/localNode.jpg\" alt=\"localNode\"/>\n\nAllez dans **Comptes** et créez des comptes **DRONE** et **EMPLOYEUR**. Enregistrez les noms des comptes et les clés et le chemin vers **robonomics** dans `~/catkin_ws/src/drone_sim/src/config.py`. Transférez de l'argent dans les comptes.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/addingAcc.jpg\" alt=\"accounts\"/>\n\n## Lancement de la simulation\nLancez le démon IPFS\n\n<LessonCodeWrapper language=\"bash\">\ncd go-ipfs\nipfs daemon\n</LessonCodeWrapper>\n\nDans un autre terminal, lancez la simulation:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch px4 mavros_posix_sitl.launch\ncd ~/catkin_ws/src/robonomics_drone_sim/src\npython3 takeoff.py\n</LessonCodeWrapper>\n\nAttendre jusqu'à \"En attente de paiement\" \n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/launch.jpg\" alt=\"launch\"/>\n\nPour envoyer une transaction, exécutez dans une autre fenêtre:\n`echo \"ON\" | ./robonomics io write launch -r <drone_addres> -s <employer_key>` - où **<drone_address>** et **<employer_key>** doivent être remplacés par les chaînes de `config.py` en conséquence.\n\nUne fois les données envoyées à IPFS, allez dans l'**État de la chaîne** dans le [portail Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/). Sélectionnez **datalog** dans la requête et ajoutez le datalog DRONE en utilisant le bouton `+`.\n\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/datalog.jpg\" alt=\"datalog\"/>\n\nVous pouvez trouver la télémétrie du drone en exécutant `https://gateway.ipfs.io/ipfs/<hash>` en insérant le hash ci-dessus.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/output.jpg\" alt=\"output\"/>\n\nIl est important de supprimer le répertoire `db` avant les prochains lancements en utilisant  \n` rm -rf ~/.local/share/robonomics/chains/dev/db`","fileInfo":{"path":"fr/learn/iris-drone/overview.md","name":"overview"},"defaultName":"Connect unmanned aerial vehicle","lastUpdate":"Thu May 04 2023 12:53:05 GMT+0400 (Samara Standard Time)"}},"context":{}}