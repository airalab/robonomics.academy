{"hash":"d581ab531c5af1fcf498eba534e7cd9db8b6d676","data":{"course":{"id":"f0783ddc22afb98c537fee70cbb7cfd3","title":"बैक्सटर रोबोट को नियंत्रित करें","description":"बैक्सटर रोबोट को नियंत्रित करें","content":"कैसे काम करता है का उदाहरण:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## आवश्यकताएं:\n\n<List>\n\n<li class=\"flex\">\n\nROS मेलोडिक + गेज़बो (स्थापना मैनुअल [यहाँ][db2])  \n\n</li>\n\n<li>अतिरिक्त पैकेज:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS तक 0.6.0 (यहाँ से डाउनलोड करें [यहाँ][db3] और स्थापित करें)\n\n</li>\n\n<li> पायथन पैकेज:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nरोबोनॉमिक्स नोड नवीनतम [रिलीज][db4] यहाँ डाउनलोड करें (अंतिम परीक्षण रिलीज v1.1)\n\n</li>\n\n<li>IPFS ब्राउज़र एक्सटेंशन (आवश्यक नहीं)</li>\n\n</List>\n\n<br/>\n\n## 0. पायथन3 के लिए सीवी ब्रिज एक्सटेंशन स्थापित करें\n\n<List>\n\n<li> कैटकिन वर्कस्पेस बनाएं\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> कैटकिन को सीमेक चर मान निर्धारित करने के लिए निर्देशित करें। अपने वर्तमान संस्करण का उपयोग करें `पायथन`। मेरे लिए, यह `पायथन3.6` है:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> सीवी ब्रिज स्रोत क्लोन करें:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> अपने रिपॉजटरी में सीवी ब्रिज का संस्करण खोजें:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> गिट रिपो में सही संस्करण चेकआउट करें। हमारे मामले में यह 1.12.8 है:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> निर्माण:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> नए पैकेज के साथ पर्यावरण का विस्तार करें:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> टेस्ट:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. डाउनलोड सिमुलेशन और नियंत्रक पैकेज\nपैकेज डाउनलोड करें:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nमत भूलें स्रोत कमांड जोड़ने के लिए:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. सिमुलेशन शुरू करें\nचलो गेज़बो वर्ल्ड शुरू करें और हमारे बैक्स्टर को उसमें डालें:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nटर्मिनल में एक और विंडो खोलें:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nआप हमारे बैक्स्टर के सामने कुछ मॉडल रख सकते हैं। यह और भी दिलचस्प होगा।\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. DAPP में खातों का प्रबंधन करें\n\nक्योंकि हम टेस्टिंग कर रहे हैं, हमें रोबोनॉमिक्स बाइनरी फ़ाइल के साथ स्थानीय रोबोनॉमिक्स नेटवर्क बनाने दें। रोबोनॉमिक्स फ़ाइल के साथ फ़ोल्डर में जाएं और रन करें:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\n[Robonomics पैराचेन पोर्टल][db5] पर जाएं और स्थानीय नोड पर स्विच करें\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nखातों पर जाएं और __बैक्स्टर__ और __नियोक्ता__ खाते बनाएं (__रोबोट__ आवश्यक नहीं है)\n\n__महत्वपूर्ण!__ प्रत्येक खाते का **म्नेमोनिक** और **पता** कॉपी करें (पता कॉपी करने के लिए खाते के आइकन पर क्लिक करें)। **म्नेमोनिक** खाते का निजी कुंजी है।\nइन खातों में कुछ पैसे (इकाइयां) भेजें:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nबैक्स्टर के **म्नेमोनिक** और **पता** को `config.yaml` में जोड़ें `robot_ws/src/Baxter_simulation_controller/config/`\n\n## 4. प्रयोग सिमुलेशन शुरू करें\n\nनए विंडो में चलाएं:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nअलग टर्मिनल खोलें और *नियंत्रक पैकेज* शुरू करें:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nअब आप एक लेनदेन भेज सकते हैं जिससे Baxter को चलना और डेटा एकत्र करना शुरू हो जाए। इसे करने के लिए, आप वही [Robonomics Parachain पोर्टल][db5] का उपयोग कर सकते हैं। **Developer->Extrinsics** पर जाएं और Baxter के नियोक्ता खाता का चयन करें, `लॉन्च` एक्सट्रिंसिक, Baxter का खाता एक लक्ष्य खाता और पैरामीटर के रूप में `हाँ` का चयन करें। एक्सट्रिंसिक सबमिट करें।\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nरोबोट को चलना शुरू कर देना चाहिए. यह अन्य खातों से कमांड स्वीकार नहीं करेगा और न ही `no` पैरामीटर वाले कमांड स्वीकार करेगा।\nआपको निम्नलिखित देखना चाहिए:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nकाम समाप्त होने पर Robonomics पोर्टल पर जाएं `Developer > Chain state`. **राज्य क्वेरी** में `datalog.datalogItem(AccountId,u64)` चुनें। यदि आप सभी डेटालॉग दिखाना चाहते हैं, त `समावेश विकल्प` को बंद करें और \"+\" बटन का उपयोग करके Baxter के डेटालॉग संदेश को देखें।\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nअब टेलीमेट्री और फोटो का IPFS हैश ब्लॉकचेन में सहेजा गया है। डेटा देखने के लिए बस हैश कॉपी करें और इसे URL: gateway.ipfs.io/ipfs/<br यहां अपना हैश डालें > में डालें\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\n__गेटवे पर देखें__ पर क्लिक करें और यही सब है!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Baxter सिमुलेशन v2.0\n\nयह कैसे काम करता है इसका उदाहरण:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## आवश्यकताएं:\n\n<List>\n\n<li class=\"flex\">\n\n\nआरओएस मेलोडिक + गज़ेबो (इंस्टॉलेशन मैनुअल [यहां] [db2])\n\n</li>\n\n<li>अतिरिक्त पैकेज:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nआईपीएफएस 0.6.0 तक ([यहां][db3] से डाउनलोड करें और इंस्टॉल करें)\n\n</li>\n\n<li> पायथन पैकेज:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics नोड (बाइनरी फ़ाइल) (नवीनतम [रिलीज][db4] यहाँ डाउनलोड करें)\n\n</li>\n\n<li class=\"flex\">\n\n**Robonomics पोर्टल** पर __Baxter__ और __नियोक्ता__ खाते बनाएं (आप यहाँ ट्यूटोरियल [\"Robonomics पोर्टल पर खाता बनाएं\"][db8] पा सकते हैं)\n</li>\n\n<li>आईपीएफएस ब्राउज़र एक्सटेंशन (आवश्यक नहीं)</li>\n\n</List>\n\n<br/>\n\n## 0. Python3 के लिए CV ब्रिज एक्सटेंशन इंस्टॉल करें\n\n<List>\n\n<li> कैटकिन कार्यक्षेत्र बनाएं\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> कैटकिन को सेमेक वेरिएबल सेट करने का निर्देश दें। `पायथन` के अपने वर्तमान संस्करण का उपयोग करें। मेरे लिए, यह `पाइथन3.6` है:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li>क्लोन सीवी_ब्रिज स्रोत:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li>अपने भंडार में cv_bridge का संस्करण ढूंढें:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> गिट रेपो में सही संस्करण चेकआउट करें। हमारे मामले में यह 1.12.8 है:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> निर्माण:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> नए पैकेज के साथ पर्यावरण का विस्तार करें:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> परीक्षा:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. सिमुलेशन और नियंत्रक पैकेज डाउनलोड करें\nहमें 2 workspaces बनाने की आवश्यकता होगी - एक मुख्य Baxter's packages के लिए और दूसरा मुख्य नियंत्रण कार्यक्रम के लिए।\nपहला workspace। यह मुख्य नियंत्रण कार्यक्रम है। यह python3 के तहत चलाया जाएगा।\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nदूसरा workspace। यहाँ सभी Baxter's packages होंगे। सिमुलेशन बहुत पुरानी है, इसलिए यह केवल python2 के तहत चल सकती है।\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nये packages ROS indigo के लिए बनाए गए थे। हमें कुछ फ़ाइलें बदलनी होंगी ताकि हम उन्हें ROS melodic पर चला सकें।\nहम **patch** फ़ाइलें उपयोग करेंगे।\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nऔर हम भी हमारे पैकेज बनाएंगे:  \nपहले बैक्स्टर के पैकेज बनाएं\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nफिर पहले कार्यस्थल पर वापस जाएं और उसे भी बनाएं:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nस्रोत कमांड जोड़ना न भूलें:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Start simulation\n### हमारे सिमुलेशन शुरू करें:\nसबसे पहले `robot_ws` पर जाएं और baxter.sh की प्रतिलिपि बनाएं और संपादित करें\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nआदेश के साथ अपना स्थानीय आईपी पता खोजें:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\n`baxter.sh` में निम्नलिखित मानों को संपादित करें:\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- आपका आईपी - अपना स्थानीय आईपी पता डालें। `ip a` देखें\n- ros_version - उदाहरण के लिए \"मेलोडिक\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nबैक्सटर शैल स्क्रिप्ट को सिम के साथ चलाएं:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nआप हमारे बैक्सटर के सामने कुछ मॉडल रख सकते हैं। यह और भी दिलचस्प होगा.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3.डीएपीपी में खाते प्रबंधित करें\n\nचूंकि हम परीक्षण कर रहे हैं, आइए हम रोबोनॉमिक्स बाइनरी फ़ाइल के साथ एक स्थानीय रोबोनॉमिक्स नेटवर्क बनाएं। रोबोनॉमिक्स फ़ाइल वाले फ़ोल्डर में जाएँ और चलाएँ:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\n[रोबोनोमिक्स पैराचेन पोर्टल][db5] पर जाएं और स्थानीय नोड पर स्विच करें\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nखातों में जाएं और __बैक्स्टर__ और __नियोक्ता__ खाते बनाएं।\n\nआप यहाँ [db8] मैनुअल \"रोबोनॉमिक्स पोर्टल पर खाता बनाएं\" पा सकते हैं।\n\n__महत्वपूर्ण!__ प्रत्येक खाते का **स्मृति** और **पता** कॉपी करें (पता कॉपी करने के लिए खाते के आइकन पर क्लिक करें)। **स्मरक** खाते की निजी कुंजी है।\n\nइन खातों में कुछ पैसे (यूनिट) ट्रांसफर करें:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\n`robonomics_ws/src/Baxter_simulation_controller/config/` में `config.yaml` में बैक्स्टर का **म्नेमोनिक** और **पता** जोड़ें\n\n## 4. अनुकरण प्रारंभ करें\n\nनई विंडो में चलाएँ:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nअलग टर्मिनल खोलें और *नियंत्रक पैकेज* प्रारंभ करें:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nअब आप एक लेनदारी भेजकर बैक्स्टर को चलने और डेटा एकत्र करने के लिए ट्रिगर कर सकते हैं। इसके लिए, आप एक ही पोर्टल [रोबोनॉमिक्स पैराचैन पोर्टल][db5] का उपयोग कर सकते हैं। **डेवलपर->एक्सट्रिन्स** जाएं और बैक्स्टर के नियोक्ता खाता, `लॉन्च` एक्सट्रिन्स, बैक्स्टर का खाता लक्ष्य खाता और पैरामीटर के रूप में `हाँ` का चयन करें। एक्सट्रिन्स सबमिट करें।\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nरोबोट को चलना शुरू कर देना चाहिए. यह अन्य खातों से कमांड स्वीकार नहीं करेगा और न ही 'नहीं' पैरामीटर वाले कमांड स्वीकार करेगा।\nआपको निम्नलिखित देखना चाहिए:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nकाम समाप्त होने पर रोबोनॉमिक्स पोर्टल पर जाएं `डेवलपर > चेन स्थिति`। **स्थिति क्वेरी** में `datalog.datalogItem(AccountId,u64)` चुनें। अगर आप सभी डेटालॉग दिखाना चाहते हैं, तो `इनक्लूड ऑप्शन` को बंद करें और बैक्स्टर के डेटालॉग संदेश को \"+\" बटन का उपयोग करके देखें।\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nअब टेलीमेट्री और फोटो का आईपीएफएस हैश ब्लॉकचेन में सेव हो जाता है। डेटा देखने के लिए बस हैश को कॉपी करें और इसे यूआरएल के साथ सर्च बार में डालें: \n#### gateway.ipfs.io/ipfs/< अपना हैश यहाँ डालें>\n\nयह सब है!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/Installation>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"hi/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}