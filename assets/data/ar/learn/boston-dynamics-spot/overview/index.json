{"hash":"d581ab531c5af1fcf498eba534e7cd9db8b6d676","data":{"course":{"id":"cc21978affa7a8a4e3afb7652cdbce00","title":"توقف الطوارئ، التهيئة، التحكم في وضع الجسم","description":"خلال هذا الدرس ستتعلم كيفية تفويض نفسك كمستخدم، والحصول على تحكم في طاقة المحرك وإرسال الأوامر الأساسية إلى Spot.","content":"\n<RoboAcademyText fWeight=\"500\">\nخلال هذا الدرس، ستتعلم كيفية تفويض نفسك كمستخدم، والحصول على تحكم في طاقة المحرك وإرسال الأوامر الأساسية إلى Spot.\n</RoboAcademyText>\n\n## نظرية\n\nكجميع الروبوتات الجادة، يحتوي روبوت بوسطن ديناميكس سبوت على آلية حماية — [خدمة إيقاف الطوارئ](https://dev.bostondynamics.com/docs/concepts/estop_service) (توقف الطوارئ) التي يجب أن تكون دائمًا نشطة أثناء تشغيل Spot لتجنب الضرر الجسدي المحتمل. تشغيل توقف الطوارئ يجمد جميع المفاصل على الفور (يحدث هذا دون إيقاف المحركات إذا كان الروبوت مشغلًا).\n\nأولاً، يجب علينا تأجير التحكم في الروبوت. هناك طريقتان للقيام بذلك - *اكتساب* أو *أخذ*. *اكتساب* يعني طلب التحكم بطريقة لطيفة، إذا كان أي شخص يتحكم في الروبوت الآن، سيتم رفض طلبك. بطريقة أخرى، *أخذ* يعني أخذ التحكم بقوة، لا يهم ما إذا كان المشغل الحالي موجودًا.\n\nلذلك، للقيام ببعض الحركة، يجب عليك اتباع الخطة:\n\n<LessonImages src=\"boston-dynamics-spot/e_stop_scheme.png\" alt=\"حالات تنفيذ الروبوت\" imageClasses=\"mb\"/>\n\nRobot Execution States\n\nخلال هذا الدرس ستتعلم كيفية التحكم في دوران الروبوت عن طريق تغيير *الميل*، *الميل* و *الميل*. في الصورة أدناه يتم عرض نظام إحداثيات الإطار الجسم:\n\n<LessonImages src=\"boston-dynamics-spot/spot_coords.png\" alt=\"إحداثيات Spot\" imageClasses=\"mb\"/>\n\nSpot coordinates\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nالزوايا في الكود تمثل بالراديان.\n</RoboAcademyText>\n\nنتيجة للدرس، ستقوم برسم أول حرف من اسمك في الهواء باستخدام وجه Spot. لنبدأ الإعداد!\n\n## إعداد Gitpod\n\nلهذا الدرس، سنستخدم Gitpod، بيئة تطوير مبنية على السحابة تتيح لك الممارسة دون تثبيت أي برنامج خاص على جهاز الكمبيوتر الخاص بك.\n\n1. قم بالتسجيل في [Gitpod](https://gitpod.io/).\n2. انتقل إلى [بيئة تعليم Spot](https://gitpod.io/#github.com/merklebot/spot-edu-environment) وافتحها في متصفحك. سترى نافذة تحتوي على وظائف IDE النموذجية. \n3. انقر على أيقونة القائمة، ثم انتقل إلى الطرفية وأنشئ طرفية جديدة.\n\n<LessonImages src=\"boston-dynamics-spot/gitpod_terminal.png\" alt=\"terminal\" imageClasses=\"mb\"/>\n    \n    \n4. انسخ والصق هذا الأمر:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npython3 prepare_yggdrasil.py\nsudo ./start_yggdrasil.sh\n\n</LessonCodeWrapper>\n\nواضغط على `Enter`.\n\n1. افتح طرفية جديدة (يمكنك القيام بذلك الآن عن طريق الضغط على زر `+`) واختبر الاتصال بالأمر\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nping6 200:42f6:d055:e74e:ce4a:35aa:953a:70f7\n\n</LessonCodeWrapper>\n\nيجب أن ترى شيئًا مثل هذا:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngitpod /workspace/spot-edu-environment (main) $ ping6 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09\nPING 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09(202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09) 56 data bytes\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=1 ttl=64 time=846 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=2 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=3 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=4 ttl=64 time=197 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=5 ttl=64 time=219 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=6 ttl=64 time=242 ms\n\n</LessonCodeWrapper>\n\n1. قبل الوقت المحدد سنرسل لك مفتاح خاص لإنشاء اتصال SSH.\n2. انسخ المفتاح الخاص الخاص بك إلى الملف `id_ed25519`. يمكنك العثور على الملف في مستكشف الشريط الجانبي لـ *stop-edu-enviroment*.\n3. **أضف سطرًا فارغًا في نهاية** `id_ed25519` ***الملف، هذا ضروري لعمل SSH بشكل صحيح.*** اضغط `Ctrl+S` لحفظ التغييرات.\n\nإذا كان كل شيء على ما يرام، يمكنك بدء إكمال الدرس عن طريق تحرير `lesson1.py`\n\nلتنفيذ الكود، استخدم الأمر:\n\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n\n</LessonCodeWrapper>\n\n\n<RoboAcademyText fWeight=\"700\" fStyle=\"normal\">\nتذكر التأكد من عدم تشغيل أي شخص آخر لبرنامجه في الوقت الحالي.\n</RoboAcademyText>\n\n\n## جدولة جلسة الممارسة\n\nاستخدم موقع جدولة Spot لاختيار الفترة الزمنية لجلسة الممارسة الخاصة بك:\n\n[meetings.hubspot.com/strelka](https://meetings.hubspot.com/strelka)\n\n## ممارسة\n\nالآن سنقوم بإنشاء سكريبت بسيط لـ Spot للرسم على الشاشة باستخدام حركات رأسه. \n\n<LessonCodeWrapper language=\"python\" codeClass=\"big-code\">\n# Import Spot Control modules\nimport bosdyn.client\nfrom bosdyn.client.robot_command import RobotCommandClient, blocking_stand\nfrom bosdyn.client.robot_command import RobotCommandBuilder\nfrom bosdyn.geometry import EulerZXY\nimport time\n# ENTER YOUR AUTH DATA HERE\nROBOT_IP=\"192.168.50.3\"\nSPOT_USERNAME=\"student\"\nSPOT_PASSWORD=\"\"\n# Helpers to control camera drawing (you don't need to modify it)\nimport requests\nVIDEOSERVER_URL=\"http://luke.merklebot:8000/\"\nVIDEOSERVER_TOKEN=\"1234\"\ndef notify_start_line():\n  requests.post(VIDEOSERVER_URL + \"start_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_stop_line():\n  requests.post(VIDEOSERVER_URL + \"stop_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_clear_canvas():\n    requests.post(VIDEOSERVER_URL + \"clear_canvas\", json={\"token\": VIDEOSERVER_TOKEN})\n# Start with registering out SDK\nsdk = bosdyn.client.create_standard_sdk('LessonOneClient')\n# Create instance of robot and auth with credentials\nrobot = sdk.create_robot(ROBOT_IP)\nrobot.authenticate(SPOT_USERNAME, SPOT_PASSWORD)\n# Create lease client and take exclusive control over Spot.  \nlease_client = robot.ensure_client('lease')\nlease = lease_client.take()\nlease_keep_alive = bosdyn.client.lease.LeaseKeepAlive(lease_client)\n# Try to power on the robot\nrobot.power_on(timeout_sec=20)\nif robot.is_powered_on():\n    print(\"Powered On\")\n\t\t# If everything went smooth, Spot face lights should turn green\nelse:\n\t\t# In case of some problems, e.g. somebody stole control over robot\n    print(\"Failed\")\n    exit(0)\n# Synchronize Spor inner time with ours - to avoid outdated commands\nrobot.time_sync.wait_for_sync()\n# To execute robot movement, create command client through which orders are sent\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\n# Start movement with simple stand up\nblocking_stand(command_client, timeout_sec=10)\n# Rotate robot body:\n#  1. Build command for body rotation. It’s not an easy task to control robot motion with commands on low level. \n#     Bosdyn Client allow as to use a shortcut - RobotCommandBuilder. It contains a number of predefined commands, \n#     you need just to choose one of your liking and insert parameters\nfootprint_R_body = EulerZXY(yaw=0.1, roll=0.1, pitch=0.1)\ncmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n#  2. Execute builded command\ncommand_client.robot_command(cmd)\ntime.sleep(2)\n# Return robot state back\ncommand_client.robot_command(RobotCommandBuilder.synchro_stand_command(footprint_R_body=EulerZXY(yaw=0, roll=0, pitch=0)))\ntime.sleep(2)\n# Change robot height\ncmd = RobotCommandBuilder.synchro_stand_command(body_height=0.1)\ncommand_client.robot_command(cmd)\n# Now we are ready to draw letter. \ndef draw_letter(command_client):\n\t\t# Choose points to draw (see the coords explanation bellow)\n    points_xy_draw = (\n        (125, 125),\n        (375, 875),\n        (500, 500),\n        (250, 500),\n        (500, 500),\n        (625, 125),\n    )\n    for x, y in points_xy_draw:\n        convert = lambda x: (x / 1000 - 0.5) * -1\n        x, y = map(convert, (x, y))\n        footprint_R_body = EulerZXY(\n            yaw=x, \n            roll=0.0, \n            pitch=y,\n        )\n        cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n        command_client.robot_command(cmd)\n        time.sleep(1)\nnotify_clear_canvas()\nnotify_start_line()\ndraw_letter(command_client)\nnotify_stop_line()\n# Turn off the robot gracefully\nrobot.power_off(cut_immediately=False)\n\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nإذا كنا بحاجة إلى تحريك رأس Spot إلى نقطة ما في الكاميرا، يجب علينا إجراء حسابات كبيرة مع العديد من المعلمات غير الخطية، وهو أمر ليس بالأمر البسيط على الإطلاق. ولكن يمكننا أن نقول، أنه محليًا، يمكن استخدام زوايا الميل والميل تقريبًا كإحداثيات كارتيسية مع بعض العوامل على صورة.\n</RoboAcademyText>\n\n\n<LessonImages src=\"boston-dynamics-spot/cartesian.jpeg\" alt=\"spot\" imageClasses=\"mb\"/>\n\nالآن يمكنك محاولة تشغيل السكريبت ورؤية النتيجة. لا تنسى حفظ الكود الخاص بك بـ Ctrl+S:\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n</LessonCodeWrapper>\n\n\n### يمكن العثور على فيديو لـ Spot هنا:\n[https://codepen.io/smehnov/pen/BaVNrPM](https://codepen.io/smehnov/pen/BaVNrPM)\n\n\n## تحدي\nإنشاء سكريبت Python يتحكم في وضع الجسم الروبوت بتسلسل من الحركات:\n\n1. الوقوف\n2. تتبع حروفك الأولى بوجهه (حرف واحد، على الأقل 3 نقاط)\n3. الجلوس\n\n## النتائج\n\nالآن، أنت تعرف يفية:\n\n- العمل مع SDK Spot\n- بناء أمر أساسي\n- تدوير جسم الروبوت\n- الاتصال بـ Spot\n\nوحتى رسمت حرفًا. تهانينا!\n\n\n<RoboAcademyText fWeight=\"500\">\n\nلقد جمعنا [rosbag](http://wiki.ros.org/rosbag) مع بيانات المفاصل الخاصة بـ Spot، حتى تتمكن من تصورها (على سبيل المثال باستخدام [foxglove](https://www.notion.so/Lesson-1-Emergency-Stop-Initialization-Body-Position-Control-4ccf6316330d4680ab1bb571b2b788d5)). سيتم إرسال الشهادة إلى بريدك الإلكتروني قريبًا.\n\n</RoboAcademyText> \n\n\n## [جدولة أول درس لك](https://meetings.hubspot.com/strelka)","fileInfo":{"path":"ar/learn/boston-dynamics-spot/overview.md","name":"overview"},"defaultName":"Software Developing for Boston Dynamics Spot","lastUpdate":null}},"context":{}}