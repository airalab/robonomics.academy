{"hash":"1eafca61b16c3525f2f7c5d47de816b7adf0794c","data":{"course":{"id":"6b571cbcc8111fb233efc2f36d9eb58a","title":"توصيل الطائرة بدون طيار المتوافقة مع ROS","description":"توصيل أي روبوت متوافق مع ROS تحت تحكم سلسلة الكتل روبونوميكس.","content":"\n\n## الجزء 1. إطلاق بواسطة المعاملة\n\n**في هذه المقالة سنظهر أنه بمساعدة أدوات روبونوميكس يمكنك التحكم في أي جهاز متوافق مع ROS. سنجد حزمة محاكاة للطائرة بدون طيار عشوائية على الويب ونقوم بضبطها لتعمل مع روبونوميكس.**\n**المتطلبات:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (دليل التثبيت [هنا](http://wiki.ros.org/melodic/التثبيت))\n\n</li>\n\n<li class=\"flex\">\n\nعقدة روبونوميكس (ملف ثنائي) (تحميل أحدث إصدار [هنا](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n</List>\n\n<br/>\n\nيتم تقديم العملية بأكملها لترميز هذا الجزء من العرض التوضيحي في الفيديو أدناه.\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. العثور على محاكاة\nلنتصفح الويب. ابحث في Google عن `محاكي طائرة بدون طيار ROS`. من المحتمل أن يظهر لك الرابط الأول صفحة `tum_simulator` على [http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\nإنها قديمة إلى حد ما، لذا من الأفضل أن نجد فرعًا لنظامنا. ابحث في Google عن `tum_simulator Ubuntu 18 Gazebo 9 fork`. النتيجة الأولى هي مستودع GitHub [repo](https://github.com/tahsinkose/sjtu-drone) مع حزمة مناسبة. قم بتنزيلها\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\nلا تنسى إضافة أمر المصدر إلى `~/.bashrc`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\nالآن يمكننا تشغيل المحاكاة لنرى ماذا نحتاج إلى فعله لأخذ الطائرة بدون طيار تحت تحكم سلسلة الكتل.\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. تفقد مواضيع ROS\nعند تشغيل المحاكاة، في علامة تبويب جديدة قم بتشغيل الأمر التالي لرؤية قائمة المواضيع المستخدمة من قبل الطائرة بدون طيار:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\nلنلق نظرة على `/cmd_vel`, `/drone/takeoff` و `/drone/land`:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\nكما يمكن رؤيته، يجب أن تكون هناك رسائل من أنواع `Twist` و `Empty`، وهي أجزاء من `std_msgs` و `geometry_msgs`، سنستخدم هذا في المتحكم. أوقف المحاكاة لفترة.\n\n## 3. تنزيل حزمة المتحكم\nعلى المستوى العالمي، الفرق الرئيسي عن المتحكم العادي لروبو ROS هو كتلة من الشيفرة، التي تفحص جميع المعاملات في الشبكة باستخدام [Robonomics IO](https://wiki.robonomics.network/docs/rinterface/). الحزمة نفسها متاحة على GitHub. قم بتنزيلها وبناء مساحة العمل:\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. إدارة الحسابات في DAPP\nنظرًا لأننا نقوم بالاختبار، دعنا ننشئ عقدة شبكة روبونوميكس محلية مع ملف ثنائي لروبونوميكس:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**مهم!** قبل الإطلاقات التالية، من الضروري إزالة دليل `db` مع\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nبعد إطلاق ناجح، قم بإنشاء حسابات وفقًا لهذا الدليل. **لا تنسى حفظ بذور كل حساب وعنوان! ستحتاج إليها للمعاملات**. أضف هذه العناوين والبذور والمسار إلى ملف `config.config` في `robonomics_ws/src/robonomics_sample_controller/src`. قم بتحويل بعض الأموال (الوحدات) إلى هذه الحسابات:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. إطلاق الطائرة بدون طيار تحت تحكم سلسلة الكتل\n\nحتى الآن يجب أن تون العقدة المحلية لروبونوميكس الشيء الوحيد الذي يعمل. في نافذة الطرفية الفرعية، قم بتشغيل محاكاة الطائرة بدون طيار:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nقم بتشغيل النص:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\nالآن يمكنك إرسال معاملة تشغيل الطائرة بدء الطيران. للقيام بذلك، يجب عليك استخدام الأمر الفرعي `write` من ملف روبونوميكس الثنائي:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nحيث يتم استبدال `<DRONE_ADDRESS>` و `<EMPLOYER’S_KEY>` بالسلاسل المحفوظة مسبقًا بشكل مناسب.\nيجب أن ترى سجل `\"Taking Off\"` ويجب أن تبدأ الطائرة بالطيران:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\nهكذا يمكن التحكم في أي روبوت متوافق مع ROS بواسطة تحكم سلسلة الكتل روبونوميكس.\n\n\n##  الجزء 2. حفظ البيانات في سلسلة الكتل\n\n**في هذا الجزء سنستمر في استخدام أدوات روبونوميكس لجعل الطائرة تتحكم بها سلسلة كتل. هذه المرة سنضيف إرسال البيانات إلى IPFS وخيارات تخزين التجزئة في السلسلة. أدناه هو التعليمات ومقاطع الشيفرة. المتطلبات:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (دليل التثبيت [هنا](http://wiki.ros.org/melodic/التثبيت))\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22 (تنزيل من [هنا](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz) وتثبيته)\n</li>\n\n<li class=\"flex\">\n\nعقدة روبونوميكس (ملف ثنائي) (تحميل أحدث إصدار [هنا](https://github.com/airalab/robonomics/releases))\n</li>\n\n<li>الاعتماديات الخاصة بالبايثون:\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\nيتم تقديم العملية بأكملها لترميز هذا الجزء من العرض التوضيحي في الفيديو أدناه.\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. إضافة الاعتماديات\nإذا قمنا بتشغيل محاكاة ونظرنا إلى قائمة المواضيع (انظر الجزء 1)، سنرى أن هناك موضوعًا واحدًا يحتوي على بيانات الكاميرا الأمامية ويستخدم نوع الرسالة `sensor_msgs/Image`:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\nلنحاول التقاط صورة كل ثانية واحدة وبعد الرحلة نشر هذه الصور على IPFS. إذا كنت قد أكملت البرنامج التعليمي الأول، فليس عليك تنزيل أي شيء آخر. إنه البرنامج النصي `drone_sample_controller_pictures.py`.\n\n## 2. إدارة الحسابات في DAPP\nكما تم في برنامج تعليمي سابق، قم بإنشاء عقد شبكة robonomics المحلية مع ملف robonomics الثنائي:\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**مهم!** قبل الإطلاقات التالية، من الضروري إزالة دليل `db` مع\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nبعد إطلاق ناجح، قم بإنشاء حسابات وفقًا لهذا الدليل. **لا تنسى حفظ بذور كل حساب وعنوان! ستحتاج إليها للمعاملات**. أضف هذه العناوين والبذور والمسار إلى ملف `config.config` في `robonomics_ws/src/robonomics_sample_controller/src`. قم بتحويل بعض الأموال (الوحدات) إلى هذه الحسابات:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. إطلاق\nحتى الآن يجب أن تون العقدة المحلية لروبونوميكس الشيء الوحيد الذي يعمل. في نافذة الطرفية الفرعية، قم بتشغيل محاكاة الطائرة بدون طيار:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nفي إطلاق آخر، قم بتشغيل خادم ipfs:\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nقم بتشغيل النص:\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\nالآن يمكنك إرسال معاملة تشغيل الطائرة بالتصوير. للقيام بذلك، يجب عليك استخدام الأمر الفرعي `write` من Robonomics IO في ملف robonomics الثنائي:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nحيث يتم استبدال `<DRONE_ADDRESS>` و `<EMPLOYER’S_KEY>` بالسلاسل المحفوظة مسبقًا بشكل مناسب.\nيجب أن ترى سجل `\"Taking Off\"` ويجب أن تبدأ الطائرة بالطيران والتقاط الصور:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\nفي وقت لاحق، عندما يتم الانتهاء من العمل، انتقل إلى بوابة Robonomics `Developer` -> `Chain state` وأضف بيانات داتالوج `DRONE` باستخدام زر `“+”` مع اختيار `datalog` كاستعلام حالة. تم حفظ اش IPFS للتلميتري في البلوكشين. لرؤية البيانات، ما عليك سوى نسخ الهاش وإضافته إلى عنوان البوابة المحلية [gateway](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/) `localhost:8080/ipfs/`:\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"ar/learn/connect-any-ros-compatible-drone/overview.md","name":"overview"},"defaultName":"Connect ROS-compatible drone","lastUpdate":"Thu May 04 2023 12:52:55 GMT+0400 (Samara Standard Time)"}},"context":{}}