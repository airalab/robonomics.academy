{"hash":"e32ec6aa0237b51fe496ef5a5df720ef84304a93","data":{"course":{"id":"92a2ba694e577ef59eee9d7a5e1c5973","title":"تحكم في روبوت باكستر","description":"تحكم في روبوت باكستر","content":"مثال على كيفية عمله:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## المتطلبات:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (دليل التثبيت [هنا][db2])  \n\n</li>\n\n<li>حزم إضافية:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effأوt-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS حتى 0.6.0 (تحميل من [هنا][db3] وتثبيت)\n\n</li>\n\n<li> حزم Python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nتحميل Robonomics node الأحدث [هنا][db4] (آخر إصدار تم اختباره v1.1)\n\n</li>\n\n<li>امتداد متصفح IPFS (غير ضروري)</li>\n\n</List>\n\n<br/>\n\n## 0. تثبيت امتداد CV Bridge لـ python3\n\n<List>\n\n<li> إنشاء مساحة عمل catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> إرشاد catkin لتعيين متغيرات cmake. استخدم الإصدار الحالي من `python`. بالنسبة لي، هو `python3.6`\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> استنساخ cv_bridge src:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> العثور على إصدار cv_bridge في مستودعك:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> التحقق من الإصدار الصحيح في مستودع جيت. في حالتنا هو 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> بناء:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> توسيع البيئة بحزمة جديدة:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> اختبار:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. تحميل حزم المحاكاة والتحكم\nتحميل الحزم:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nلا تنسى إضافة أمر المصدر:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. بدء المحاكاة\nلنبدأ عالم gazebo ونضع بكسرنا فيه:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nافتح نافذة إضافية في الطرفية:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nيمكنك وضع بعض النماذج أمام بكسرنا. سيكون الأمر أكثر إثارة.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. إدارة الحسابات في DAPP\n\nنظرًا لأننا في مرحلة الاختبار، دعنا نقوم بإنشاء شبكة robonomics المحلية باستخدام ملف robonomics الثنائي. انتقل إلى المجلد الذي يحتوي على ملف robonomics وقم بتشغيله:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nانتقل إلى [بوابة Robonomics Parachain][db5] وانتقل إلى العقد المحلي\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nانتقل إلى الحسابات وأنشئ حسابات __باكستر__ و __صاحب العمل__ (ليس من الضروري وجود __روبوت__)\n\n__مهم!__ انسخ **الكلمة السرية** و **العنوان** لكل حساب (لنسخ العنوان، انقر على رمز الحساب). **الكلمة السرية** هي المفتاح الخاص للحساب.\nقم بتحويل بعض الأموال (الوحدات) إلى هذه الحسابات:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nأضف **الذاكرة** و**العنوان** الخاص بـ Baxter إلى `config.yaml` في `robot_ws/src/Baxter_simulation_controller/config/`\n\n## 4. بدء المحاكاة\n\nفي نافذة جديدة قم بتشغيل:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nافتح نافذة الطرفية الفرعية وابدأ *حزمة التحكم*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nالآن يمكنك إرسال معاملة تقوم بتشغيل Baxter للحركة وجمع البيانات. للقيام بذلك، يمكنك استخدام نفس [بوابة Robonomics Parachain][db5]. اذهب إلى **المطور->المستخرجات** وحدد حساب عمل بكسر، مستخرج `launch`، حساب بكسر كحساب هدف و`نعم` كمعلمة. قدم المستخرج.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nيجب أن يبدأ الروبوت بالحركة. لن يقبل الأوامر من حسابات أخرى ولا الأوامر بمعلمة `لا`.\nيجب أن ترى ما يلي:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nعندما ينتهي العمل، اذهب إلى بوابة Robonomics لـ `المطور > حالة السلسلة`. اختر `datalog.datalogItem(AccountId,u64)` في **استعلام الحالة**. إذا كنت ترغب في عرض جميع datalog's، ثم قم بإيقاف `خيار الشمول` وأضف عرض رسالة datalog بكسر باستخدام زر \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nالآن تم حفظ هاش IPFS للتلميحات والصور في البلوكشين. لرؤية البيانات، ما عليك سوى نسخ الهاش ولصقه في شريط البحث مع عنوان URL: gateway.ipfs.io/ipfs/<br ضع هاشك هنا >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\nانقر على __عرض على البوابة__ وهذا كل شيء!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## محاكاة باكستر v2.0\n\nمثال على كيفية عمله:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## المتطلبات:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (دليل التثبيت [هنا][db2])  \n\n</li>\n\n<li>حزم إضافية:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS حتى 0.6.0 (تحميل من [هنا][db3] وتثبيت)\n\n</li>\n\n<li> حزم Python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics node (ملف ثنائي) (تحميل أحدث [إصدار][db4] هنا)\n\n</li>\n\n<li class=\"flex\">\n\nإنشاء حسابات __Baxter__ و __Employer__ على **بوابة Robonomics** (يمكنك العثور على البرنامج التعليمي [\"إنشاء حساب على بوابة Robonomics\"][db8] هنا).\n</li>\n\n<li>امتداد متصفح IPFS (غير ضروري)</li>\n\n</List>\n\n<br/>\n\n## 0. تثبيت امتداد CV Bridge لـ python3\n\n<List>\n\n<li> إنشاء مساحة عمل catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> إرشاد catkin لتعيين متغيرات cmake. استخدم الإصدار الحالي من `python`. بالنسبة لي، هو `python3.6`\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> استنساخ cv_bridge src:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> العثور على إصدار cv_bridge في مستودعك:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> التحقق من الإصدار الصحيح في مستودع جيت. في حالتنا هو 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> بناء:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> توسيع البيئة بحزمة جديدة:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> اختبار:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. تحميل حزم المحاكاة والتحكم\nسنحتاج إلى إنشاء 2 مساحات عمل - واحدة لحزم Baxter الرئيسية والأخرى لبرنامج التحكم الرئيسي.\nالمساحة العمل الأولى. إنه برنامج التحكم الرئيسي. سيعمل تحت python3.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nالمساحة العمل الثانية. ستكون هناك جميع حزم Baxter. المحاكاة قديمة جدًا، لذا قد تعمل فقط تحت python2.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nتم إنشاء هذه الحزم لـ ROS indigo. يجب علينا تغيير بعض الملفات لتشغيلها على ROS melodic.\nسنستخدم ملفات **patch**.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nو لنقم ببناء جميع حزمنا:  \nأولاً قم ببناء حزم Baxter\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nثم عد إلى المساحة العمل الأولى وقم ببنائها أيضًا:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nلا تنسى إضافة أمر المصدر:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. بدء المحاكاة\n### لنبدأ محاكاتنا:\nأولاً انتقل إلى `robot_ws` وانسخ وعدل baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nابحث عن عنوان IP المحلي الخاص بك باستخدام الأمر:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\nقم بتحرير القيم التالية في `baxter.sh` :\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- your_ip - ضع عنوان IP المحلي الخاص بك. انظر `ip a`\n- ros_version - على سبيل المثال \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nقم بتشغيل نص الأوامر baxter مع sim المحدد:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nيمكنك وضع بعض النماذج أمام بكسرنا. سيكون الأمر أكثر إثارة.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. إدارة الحسابات في DAPP\n\nنظرًا لأننا في مرحلة الاختبار، دعنا نقوم بإنشاء شبكة robonomics المحلية باستخدام ملف robonomics الثنائي. انتقل إلى المجلد الذي يحتوي على ملف robonomics وقم بتشغيله:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nانتقل إلى [بوابة Robonomics Parachain][db5] وانتقل إلى العقد المحلي\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nانتقل إلى الحسابات وأنشئ حسابات __Baxter__ و __Employer__.\n\nيمكنك العثور على الدليل \"إنشاء حساب على بوابة Robonomics\" [هنا][db8]\n\n__مهم!__ انسخ **الكلمة السرية** و **العنوان** لكل حساب (لنسخ العنوان، انقر على رمز الحساب). **الكلمة السرية** هي المفتاح الخاص للحساب.\n\nقم بتحويل بعض الأموال (الوحدات) إلى هذه الحسابات:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nأضف **Mnemonic** و **address** لـ Baxter إلى `config.yaml` في `robonomics_ws/src/Baxter_simulation_controller/config/`\n\n## 4. بدء المحاكاة\n\nفي نافذة جديدة قم بتشغيل:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nافتح نافذة الطرفية الفرعية وابدأ *حزمة التحكم*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nالآن يمكنك إرسال معاملة تشغيل Baxter للبدء في التحرك وجمع البيانات. للقيام بذلك، يمكنك استخدام نفس البوابة [بوابة Robonomics Parachain][db5]. انتقل إلى **Developer->Extrinsics** وحدد حساب موظف Baxter، معامل `launch`، حساب Baxter كحساب هدف و `نعم` كمعلمة. قدم المعاملة.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nيجب أن يبدأ الروبوت بالحركة. لن يقبل الأوامر من حسابات أخرى ولا الأوامر بمعلمة `لا`.\nيجب أن ترى ما يلي:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nعندما ينتهي العمل، انتقل إلى بوابة Robonomics لـ `Developer > Chain state`. اختر `datalog.datalogItem(AccountId,u64)` في **state query**. إذا كنت ترغب في عرض جميع datalog's، ثم قم بإيقاف `include option` وأضف عرض رسالة Baxter's datalog باستخدام زر \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nالآن تم حفظ الهاش الخاص بالتلميتر والصور في بلوكشين. لرؤية البيانات، ما عليك سوى نسخ الهاش ولصقه في شريط البحث مع عنوان URL:  \n#### gateway.ipfs.io/ipfs/< ضع هاش الخاص بك هنا>\n\nهذا كل شيء!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/التثبيت>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"ar/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}