{"hash":"1eafca61b16c3525f2f7c5d47de816b7adf0794c","data":{"course":{"id":"f74b4fb3b5943dedf7739f95112ed350","title":"توصيل مسبار الفضاء كيوريوسيتي على المريخ","description":"توصيل مسبار الفضاء كيوريوسيتي على المريخ تحت تحكم سلسلة كتل Robonomics.","content":"\n**دعنا نرى كيف يسمح تحكم سلسلة كتل Robonomics بتحريك مسبار الفضاء كيوريوسيتي. المتطلبات:**\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (دليل التثبيت [هنا](http://wiki.ros.org/melodic/التثبيت))\n\n</li>\n\n\n<li>حزم إضافية:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n  sudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS حتى [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n\n</li>\n\n<li class=\"flex\">\n\n[IPFS Companion Extension](https://github.com/ipfs/ipfs-companion)\n\n</li>\n\n<li class=\"flex\">\n\nعقد Robonomics (ملف ثنائي) (قم بتنزيل الإصدار الأحدث [هنا](https://github.com/airalab/robonomics/releases). تم اختبار هذا البرنامج التعليمي بنجاح على الإصدار 1.1)\n\n</li>\n\n</List>\n\n<br/>\n\nهنا الفيديو الذي يظهر إطلاقًا ناجحًا:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n\n<br/>\n\n### 1. إعداد محاكاة\n\nقم بتنزيل حزمة مسبار الفضاء كيوريوسيتي:\n<LessonCodeWrapper language=\"bash\">\n  mkdir -p robonomics_ws/src\n  cd robonomics_ws/src\n  git clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\n  cd ..\n  catkin build\n</LessonCodeWrapper>\n\nنحتاج إلى ضبط الظروف الابتدائية لجعل مسبارنا يظهر بسلاسة:\n\n<List>\n\n<li>انتقل إلى\n\n`src/master/curiosity_mars_rover_description/worlds` وقم بتغيير السطر 14 من الملف` mars_curiosity.world` to \n`<pose>0 0 8 0 0 0</pose>`\n\n</li>\n\n<li>انتقل إلى\n\n`src/master/curiosity_mars_rover_description/launch` وقم بتغيير السطر 4 في الملف `mars_curiosity_world.launch` إلى \n`<arg name=\"paused\" default=\"false\"/>`\n\nلا تنس إضافة أمر المصدر إلى `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n</li>\n\n<li> أعد تشغيل وحدة التحكم وقم بتشغيل المحاكاة:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\n  roslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/rover.jpg\" alt=\"Mars rover\"/>\n\n</li>\n\n</List>\n\nملاحظة: إذا كانت الصورة مظلمة، على سبيل المثال، مظلمة، قم بتغيير `Camera` إلى `Orthorgraphic` في شريط أدوات Gazebo.\nيمكن إغلاق المحاكاة لفترة مؤقتة.\n\n------------\n\n<br/>\n\n### 2. تنزيل حزمة تحكم Robonomics\nلتنزيل حزمة تحكم لمسبار الفضاء، اكتب في الطرفية:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n</LessonCodeWrapper>\n\n\n------------\n\n<br/>\n\n### 3. إدارة الحسابات في DAPP\nنظرًا لأننا نقوم بالاختبار، دعنا نقوم بإنشاء شبكة Robonomics المحلية باستخدام ملف Robonomics الثنائي:\n\n<LessonCodeWrapper language=\"bash\">\n  ./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/robonomics.jpg\" alt=\"تشغيلning node\"/>\n\n\nانتقل إلى [بوابة Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) وانتقل إلى العقد المحلي \n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/local_node.jpg\" alt=\"Local node\"/>\n\n\nانتقل إلى الحسابات وأنشئ حسابات **CURIOSITY** و **EMPLOYER**.\n\n**مهم**! انسخ عنوان كل حساب (لنسخ العنوان، انقر فوق أيقونة الحساب) وكلمة الإدخال البذري لحساب كيوريوسيتي (التي تم الحصول عليها أثناء إنشاء الحساب)\nقم بتحويل بعض الأموال (الوحدات) إلى هذه الحسابات. يمكنك قراءة المزيد حول الحسابات في Robonomics [هنا](https://wiki.robonomics.network/docs/en/create-account-in-dapp/)\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/account_creation.jpg\" alt=\"Account creation\"/>\n\n\nأضف هذه العناوين وكلمة الإدخال وعنوان العقد (الذي يعتمد على `ws://127.0.0.1:9944` افتراضيًا لعقد المطور) في `config.config` في `robonomics_ws/src/robonomics_sample_controller/src`. بدون علاات اقتباس.\n\n------------\n\n<br/>\n\n### 4. بدء Robonomics\n\nقبل المضي قدمًا، تأكد من أنك قد قمت بتثبيت [ملحق IPFS Companion](https://github.com/ipfs/ipfs-companion).\n\nفي طرفية منفصلة، قم بتشغيل IPFS:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nifps init #يجب عليك فقط القيام بذلك مرة واحدة لكل تثبيت IPFS\nipfs daemon\n</LessonCodeWrapper>\n\nفي طرفية منفصلة أخرى، قم بتشغيل محاكاة كيوريوسيتي إذا لم تكن مباشرة:\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\nانتظر حتى يبقى ثابتًا\n\nفي طرفية أخرى، قم بتشغيل الوحدة التحكم:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nrosrun robonomics_sample_controller sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/controller.jpg\" alt=\"Controller\"/>\n\nالآن يمكنك إرسال معاملة تشغيل المسبار لبدء التحرك وجمع البيانات. للقيام بذلك، يمكنك استخدام نفس [بوابة Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/).\nانتقل إلى `Developer->Extrinsics` وحدد حساب كيوريوسيتي كحساب موظف، معامل `launch`، حساب كيوريوسيتي كحساب هدف، و `نعم` كمعلمة.\nقدم المعاملة.\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/extrinsic.jpg\" alt=\"Extrinsic\"/>\n\nيجب أن يبدأ الروبوت في التحرك. لن يقبل الأوامر من حسابات أخرى ولا الأوامر بمعلمة `لا`. سيتحرك المسبار حوله ويجمع البيانات لمدة حوالي ديقة.\nفي وقت لاحق، عندما يتم الانتهاء من العمل:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/job_done.jpg\" alt=\"Job done\"/>\n\n\nانتقل إلى `Developer -> Chain state` على بوابة Robonomics واحصل على بيانات السجلات `CURIOSITY` باستخدام زر “+” مع تحديد `datalog -> RingBufferItem` كاستعلام: \n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/datalog.jpg\" alt=\"Datalog\"/>\n\n\nالآن تم حفظ تجزئة IPFS للبيانات التلقائية في سلسلة الكتل. لرؤية البيانات، قم ببساطة بنسخ التجزئة والبحث عنها على بوابة:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/data_in_ipfs.jpg\" alt=\"Data in IPFS\"/>\n\n\nهذه البيانات التلقائية محفوظة في تخزين مركزي، وتم حفظ تجزئتها في سلسلة كتل!\n","fileInfo":{"path":"ar/learn/connect-mars-curiosity-rover/overview.md","name":"overview"},"defaultName":"Connect Mars Curiosity Rover","lastUpdate":"Thu May 18 2023 10:41:00 GMT+0400 (Samara Standard Time)"}},"context":{}}