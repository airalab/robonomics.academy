{"hash":"39646b78023bddea786f995e516360c6cbdb9af0","data":{"course":{"id":"ebd43803681c326c686a7e20e4069611","title":"توصيل جهاز التلاعب Kuka","description":"توصيل جهاز التلاعب","content":"\nيمكن العثور على فيديو مع مثال على العمل هنا:\n\nhttps://youtu.be/z55HepXbHr8\n\n<br/>\n\n***\n\n<br/>\n\n## المتطلبات\n\n<List>\n\n<li class=\"flex\">\n\nROS melodic، Gازيبو (تعليمات التثبيت [هنا](http://wiki.ros.org/melodic/التثبيت/Ubuntu))\n</li>\n\n<li>بعض الحزم الإضافية\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li> IPFS 0.4.22 \n\n(تنزيل من [هنا](https://www.npackd.org/p/ipfs/0.4.22) وتثبيتها)\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>pip3\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt-get install python3-pip\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li>substrate-interface\n\n<LessonCodeWrapper language=\"bash\">\npip3 install substrate-interface\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics node (ملف ثنائي) (تنزيل أحدث إصدار [هنا](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n<li>امتداد متصفح IPFS (غير ضروري)</li>\n\n</List>\n\n<br/>\n\n***\n\n<br/>\n\n## التثبيت\nتثبيت جهاز التلاعب Kuka وحزم التحكم\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">cd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make</LessonCodeWrapper>\n\n***\n\n<br/>\n\n## تشغيل نموذج gazebo\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n</LessonCodeWrapper>\n\nفي نافذة جديدة\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun manipulator_gazebo move_arm_server\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/1.png\" alt=\"model\"/>\n\n***\n\n<br/>\n\n## تشغيل robonomics\nانتقل إلى المجلد الذي يحتوي على ملف robonomics وأنشئ شبكة robonomics المحلية:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/robonomics.png\" alt=\"robonomics\"/>\n\nانتقل إلى [بوابة Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) وانتقل إلى العقد المحلي\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/local.png\" alt=\"local\"/>\n\nثم انتقل إلى الحسابات وأنشئ حساب `KUKA`. احفظ مفتاح الذاكرة النصية للحساب، ستحتاج إليه لاحقًا. \n\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/create_acc.png\" alt=\"acc\"/>\n\nأرسل بعض الوحدات إلى الحساب الجديد من أحد الحسابات الافتراضية.\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/send_money.png\" alt=\"accs\"/>\n\n***\n<br/>\n\n## تشغيل ipfs\nتشغيل ipfs daemon:\n\n<LessonCodeWrapper language=\"bash\">\nipfs daemon\n</LessonCodeWrapper>\n\n***\n\n</br>\n\n## تشغيل حزمة التحكم\nفي دليل التكوين في حزمة التحكم kuka_control، تحتاج إلى إنشاء ملف تكوين بهذه الأسطر، حيث `<your_mnemonic>` هو بذرة الذاكرة المحفوظة:\n\n<LessonCodeWrapper language=\"bash\">\n{\n    \"kuka_mnemonic\": \"[your_mnemonic]\",\n    \"node\": \"ws://127.0.0.1:9944\"\n}\n</LessonCodeWrapper>\n\n\nالآن يمكنك تشغيل النص التحكم:\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun kuka_controller move_arm_client.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/run.png\" alt=\"control\"/>\n\n## إرسال المعاملة\nفي [بوابة Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) انتقل إلى `Developer/Extrinsics`، غير `extrinsic` إلى `launch`. اختر حساب `KUKA` الخاص بك في `robot` وغير `param` إلى `Yes`. ثم اضغط على `Submit Transaction`\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/launch.png\" alt=\"transaction\"/>\n\nفي النافذة مع حزمة التحكم kuka_control سترى:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/res.png\" alt=\"done\"/>\n\nثم انتقل إلى `Developer/Chain State` على بوابة Robonomics، حدد `datalog` و `datalogItem((AccountId,u64)): RingBufferItem` في الاستعلام وأضف datalog `KUKA` بزر '+'\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/datalog.png\" alt=\"datalog\"/>\n\nالآن يمكنك العثور على تلميحات الروبوت في IPFS عبر هذا الرابط مع تجزئتك `<hash>`: `https://gateway.ipfs.io/ipfs/<hash>`.\n\n## استكشاف الأخطاء وإصلاحها\n\nإذا لم يعمل `catkin_make` مع رسالة فيد بعدم العثور على MoveArm.h، جرب إزالة الأسطر الأربع الأخيرة في CMakeLists.txt في حزمة kuka_manipulator_gazebo:\n\n<LessonCodeWrapper language=\"yaml\">\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(move_arm_server src/move_arm_server.cpp)\ntarget_link_libraries(move_arm_server ${catkin_LIBRARIES})\nadd_dependencies(move_arm_server beginner_tutorials_gencpp)\n</LessonCodeWrapper>\n\nقم بعمل `catkin_make` بدون هذه الأسطر، ثم أعدها وقم بعمل `catkin_make` مرة أخرى.","fileInfo":{"path":"ar/learn/kuka/overview.md","name":"overview"},"defaultName":"Connect Kuka manipulator","lastUpdate":null}},"context":{}}