{"hash":"76c8f6c333fd43be28237b9e09f4e90eec13e11a","data":{"course":{"id":"ac187732988e04229ab2f8a2aebca61a","title":"Bedien Baxter-robot","description":"Bedien Baxter-robot","content":"Voorbeeld van hoe het werkt:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## Vereisten:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (installatiehandleiding [hier][db2])  \n\n</li>\n\n<li>extra pakketten:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effoft-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS tot 0.6.0 (download van [hier][db3] en installeer)\n\n</li>\n\n<li> python pakketten:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics node download laatste [release][db4] hier (laatst geteste release v1.1)\n\n</li>\n\n<li>IPFS browserextensie (niet noodzakelijk)</li>\n\n</List>\n\n<br/>\n\n## 0. installeer de CV Bridge-extensie voor python3\n\n<List>\n\n<li> Maak een catkin-werkruimte aan\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Instrueer catkin om cmake-variabelen in te stellen. Gebruik uw huidige versie van `python`. Voor mij is het `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Kloon cv_bridge src:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Zoek de versie van cv_bridge in uw repository:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Checkout juiste versie in git repo. In ons geval is het 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Bouwen:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Breid de omgeving uit met nieuw pakket:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Test:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. Download simulatie- en controllerpakketten\nDownload pakketten:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nVergeet niet om het source-commando toe te voegen:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Start simulatie\nLaten we de gazebo-wereld starten en onze baxter erin plaatsen:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nOpen nog een venster in de terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nJe kunt wat modellen voor onze baxter plaatsen. Het zal interessanter zijn.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Beheer accounts in DAPP\n\nAangezien we aan het testen zijn, laten we een lokaal robonomics-netwerk maken met het robonomics-binair bestand. Ga naar de map met het robonomics-bestand en voer uit:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nGa naar [Robonomics Parachain portal][db5] en schakel over naar de lokale node\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nGa naar Accounts en maak __Baxter__ en __Werkgever__ accounts aan (__Robot__ is niet nodig)\n\n__Belangrijk!__ Kopieer het **Mnemonic** en **adres** van elk account (om het adres te kopiëren, klik op het pictogram van het account). **Mnemonic** is de privésleutel voor het account.\nVerzend wat geld (eenheden) naar deze accounts:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nVoeg de **Mnemonic** en **adres** van Baxter toe aan `config.yaml` in `robot_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Start simulatie\n\nVoer in een nieuw venster uit:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nOpen een aparte terminal en start het *controllerpakket*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nNu kun je een transactie verzenden om de Baxter te laten bewegen en gegevens te verzamelen. Hiervoor kun je dezelfde [Robonomics Parachain portal][db5] gebruiken. Ga naar **Developer->Extrinsics** en selecteer het werkgeversaccount van Baxter, `launch` extrinsiek, het account van Baxter als doelaccount en `ja` als parameter. Dien de extrinsieke in.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nDe robot zou moeten beginnen met bewegen. Het zal geen opdrachten accepteren van andere accounts noch opdrachten met de parameter `nee`.\nJe zou het volgende moeten zien:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nwanneer het werk voorbij is, ga naar de Robonomics Portal naar `Developer > Chain state`. Kies `datalog.datalogItem(AccountId,u64)` in **state query**. Als je alle datalogs wilt laten zien, schakel dan `include option` uit en bekijk het datalogbericht van Baxter met de \"+\" knop.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nNu wordt de IPFS-hash van de telemetrie en foto's opgeslagen in de blockchain. Om de gegevens te zien, kopieer eenvoudig de hash en plak deze in de zoekbalk met URL: gateway.ipfs.io/ipfs/<br zet hier je hash >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\nKlik op  __Bekijken op Gateway__ en dat is alles!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Baxter-simulatie v2.0\n\nVoorbeeld van hoe het werkt:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## Vereisten:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (installatiehandleiding [hier][db2])  \n\n</li>\n\n<li>extra pakketten:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS tot 0.6.0 (download van [hier][db3] en installeer)\n\n</li>\n\n<li> python pakketten:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics-node (binair bestand) (download de nieuwste [release][db4] hier)\n\n</li>\n\n<li class=\"flex\">\n\nMaak __Baxter__ en __Werkgever__ accounts aan op **Robonomics Portal** (je kunt een tutorial vinden [\"Maak een account aan op Robonomics Portal\"][db8] hier).\n</li>\n\n<li>IPFS browserextensie (niet noodzakelijk)</li>\n\n</List>\n\n<br/>\n\n## 0. installeer CV Bridge-extensie voor python3\n\n<List>\n\n<li> Maak een catkin-werkruimte aan\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Instrueer catkin om cmake-variabelen in te stellen. Gebruik uw huidige versie van `python`. Voor mij is het `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Kloon cv_bridge src:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Zoek de versie van cv_bridge in uw repository:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Checkout juiste versie in git repo. In ons geval is het 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Bouwen:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Breid de omgeving uit met nieuw pakket:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Test:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. Download simulatie- en controllerpakketten\nWe moeten 2 werkruimtes maken - een voor de belangrijkste Baxter-pakketten en de andere voor het belangrijkste besturingsprogramma.\nEerste werkruimte. Het is het belangrijkste besturingsprogramma. Het zal worden uitgevoerd onder python3.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nTweede werkruimte. Daar zullen alle Baxter-pakketten zijn. De simulatie is erg oud, dus het kan alleen worden uitgevoerd onder python2.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nDeze pakketten zijn gemaakt voor ROS indigo. We moeten enkele bestanden wijzigen om ze op ROS melodic te laten werken.\nWe zullen **patch**-bestanden gebruiken.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nEn laten we al onze pakketten bouwen:  \nBouw eerst de Baxter-pakketten\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nGa dan terug naar de eerste werkruimte en bouw het ook:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nVergeet niet om het source-commando toe te voegen:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Start simulatie\n### Laten we onze simulatie starten:\nGa eerst naar `robot_ws` en kopieer en bewerk baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nZoek uw lokale ip-adres met het commando:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\nBewerk de volgende waarden in `baxter.sh` :\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- your_ip - plaats uw lokale ip-adres. Zie `ip a`\n- ros_version - bijvoorbeeld \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nVoer het baxter-shellscript uit met sim gespecificeerd:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nJe kunt wat modellen voor onze baxter plaatsen. Het zal interessanter zijn.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Beheer accounts in DAPP\n\nAangezien we aan het testen zijn, laten we een lokaal robonomics-netwerk maken met het robonomics-binair bestand. Ga naar de map met het robonomics-bestand en voer uit:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nGa naar [Robonomics Parachain portal][db5] en schakel over naar de lokale node\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nGa naar Accounts en maak __Baxter__ en __Werkgever__ accounts aan.\n\nJe kunt de handleiding \"Maak een account aan op Robonomics Portal\" [hier][db8] vinden\n\n__Belangrijk!__ Kopieer het **Mnemonic** en **adres** van elk account (om het adres te kopiëren, klik op het pictogram van het account). **Mnemonic** is de privésleutel voor het account.\n\nVerzend wat geld (eenheden) naar deze accounts:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nVoeg Baxter's **Mnemonic** en **adres** toe aan `config.yaml` in `robonomics_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Start simulatie\n\nVoer in een nieuw venster uit:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nOpen een aparte terminal en start het *controllerpakket*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nNu kun je een transactie verzenden die de Baxter activeert om te beginnen met bewegen en gegevens te verzamelen. Hiervoor kun je dezelfde portal [Robonomics Parachain portal][db5] gebruiken. Ga naar **Developer->Extrinsics** en selecteer het werkgeversaccount van Baxter, `launch` extrinsiek, Baxter's account als doelaccount en `ja` als parameter. Dien de extrinsieke in.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nDe robot zou moeten beginnen met bewegen. Het zal geen opdrachten accepteren van andere accounts noch opdrachten met de parameter `nee`.\nJe zou het volgende moeten zien:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nWanneer het werk voorbij is, ga naar de Robonomics Portal naar `Developer > Chain state`. Kies `datalog.datalogItem(AccountId,u64)` in **state query**. Als je alle datalogs wilt laten zien, schakel dan de `include option` uit en bekijk Baxter's datalogbericht met de \"+\" knop.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nNu is de IPFS-hash van de telemetrie en foto's opgeslagen in de blockchain. Om de gegevens te zien, kopieer eenvoudig de hash en plak deze in de zoekbalk met URL:  \n#### gateway.ipfs.io/ipfs/< plaats hier je hash>\n\nDat is alles!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/Installatie>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"nl/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}