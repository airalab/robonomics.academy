{"hash":"76c8f6c333fd43be28237b9e09f4e90eec13e11a","data":{"course":{"id":"e2eaba017abb197edf62e8c4a7c4b99c","title":"Noodstop, Initialisatie, Lichaamspositiecontrole","description":"Tijdens deze les leer je hoe je jezelf kunt autoriseren als gebruiker, motorvermogensregeling kunt krijgen en basiscommando's naar Spot kunt sturen.","content":"\n<RoboAcademyText fWeight=\"500\">\nTijdens deze les leer je hoe je jezelf kunt autoriseren als gebruiker, motorvermogensregeling kunt krijgen en basiscommando's naar Spot kunt sturen.\n</RoboAcademyText>\n\n## Theorie\n\nNet als alle serieuze robots heeft Boston Dynamics Spot een beschermingsmechanisme - [E-Stop-service](https://dev.bostondynamics.com/docs/concepts/estop_service) (noodstop) dat altijd actief moet zijn tijdens de werking van Spot om mogelijke fysieke schade te voorkomen. Het inschakelen van de E-Stop bevriest onmiddellijk alle gewrichten (dit gebeurt zonder de motoren uit te schakelen als de robot was ingeschakeld).\n\nAllereerst moeten we de controle over de robot leasen. Er zijn twee manieren om dit te doen - *acquire* of *take*. *Acquire* betekent op een vriendelijke manier om controle vragen, als iemand nu de robot bestuurt, wordt uw verzoek afgewezen. Op een andere manier betekent *take* het krachtig overnemen van de controle, het maakt niet uit of de huidige operator bestaat.\n\nDus, om wat beweging te maken, moet je het schema volgen:\n\n<LessonImages src=\"boston-dynamics-spot/e_stop_scheme.png\" alt=\"Robot Uitvoeringsstaten\" imageClasses=\"mb\"/>\n\nRobot Execution States\n\nIn deze les leer je hoe je de robotrotatie kunt regelen door zijn *yaw*, *roll* en *pitch* te veranderen. In de afbeelding hieronder wordt het coördinatensysteem van het lichaamskader getoond:\n\n<LessonImages src=\"boston-dynamics-spot/spot_coords.png\" alt=\"Spot coördinaten\" imageClasses=\"mb\"/>\n\nSpot coordinates\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nDe hoeken in een code worden weergegeven in radialen.\n</RoboAcademyText>\n\nAls resultaat van de les zul je een eerste letter van je naam in de lucht tekenen met het gezicht van Spot. Laten we beginnen met de installatie!\n\n## Gitpod instellen\n\nVoor deze les zullen we Gitpod gebruiken, een cloudgebaseerde IDE waarmee je kunt oefenen zonder speciale software op je computer te installeren.\n\n1. Meld je aan voor [Gitpod](https://gitpod.io/).\n2. Ga naar onze [Spot-onderwijsomgeving](https://gitpod.io/#github.com/merklebot/spot-edu-environment) en open het in onze browser. U ziet het venster met typische IDE-functies. \n3. Klik op het menupictogram, ga vervolgens naar Terminal en maak een nieuwe terminal aan.\n\n<LessonImages src=\"boston-dynamics-spot/gitpod_terminal.png\" alt=\"terminal\" imageClasses=\"mb\"/>\n    \n    \n4. Kopieer en plak deze opdracht:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npython3 prepare_yggdrasil.py\nsudo ./start_yggdrasil.sh\n\n</LessonCodeWrapper>\n\nen druk op `Enter`.\n\n1. Open een nieuwe terminal (nu kun je dit doen door op de `+` knop te drukken) en test de verbinding met het commando\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nping6 200:42f6:d055:e74e:ce4a:35aa:953a:70f7\n\n</LessonCodeWrapper>\n\nJe zou iets als dit moeten zien:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngitpod /workspace/spot-edu-environment (main) $ ping6 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09\nPING 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09(202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09) 56 data bytes\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=1 ttl=64 time=846 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=2 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=3 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=4 ttl=64 time=197 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=5 ttl=64 time=219 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=6 ttl=64 time=242 ms\n\n</LessonCodeWrapper>\n\n1. Voor de geplande tijd sturen we u een privésleutel om een SSH-verbinding tot stand te brengen.\n2. Kopieer uw privésleutel naar het bestand `id_ed25519`. U kunt het bestand vinden in de zijbalkverkenner van *stop-edu-enviroment*.\n3. **Voeg een lege regel toe aan het einde van het** `id_ed25519` ***bestand, dit is nodig voor SSH om correct te werken.*** Druk op `Ctrl+S` om wijzigingen op te slaan.\n\nAls alles in orde is, kunt u beginnen met het voltooien van de les door `lesson1.py` te bewerken\n\nOm de code uit te voeren, gebruik het commando:\n\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n\n</LessonCodeWrapper>\n\n\n<RoboAcademyText fWeight=\"700\" fStyle=\"normal\">\nVergeet niet om ervoor te zorgen dat niemand anders op dat moment zijn programma uitvoert.\n</RoboAcademyText>\n\n\n## Plan de oefensessie\n\nGebruik de Spot-planningswebsite om het tijdsblok voor uw oefensessie te kiezen:\n\n[meetings.hubspot.com/strelka](https://meetings.hubspot.com/strelka)\n\n## Oefenen\n\nNu zullen we een eenvoudig script maken voor Spot om op het scherm te tekenen met behulp van zijn hoofdbewegingen. \n\n<LessonCodeWrapper language=\"python\" codeClass=\"big-code\">\n# Import Spot Control modules\nimport bosdyn.client\nfrom bosdyn.client.robot_command import RobotCommandClient, blocking_stand\nfrom bosdyn.client.robot_command import RobotCommandBuilder\nfrom bosdyn.geometry import EulerZXY\nimport time\n# ENTER YOUR AUTH DATA HERE\nROBOT_IP=\"192.168.50.3\"\nSPOT_USERNAME=\"student\"\nSPOT_PASSWORD=\"\"\n# Helpers to control camera drawing (you don't need to modify it)\nimport requests\nVIDEOSERVER_URL=\"http://luke.merklebot:8000/\"\nVIDEOSERVER_TOKEN=\"1234\"\ndef notify_start_line():\n  requests.post(VIDEOSERVER_URL + \"start_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_stop_line():\n  requests.post(VIDEOSERVER_URL + \"stop_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_clear_canvas():\n    requests.post(VIDEOSERVER_URL + \"clear_canvas\", json={\"token\": VIDEOSERVER_TOKEN})\n# Start with registering out SDK\nsdk = bosdyn.client.create_standard_sdk('LessonOneClient')\n# Create instance of robot and auth with credentials\nrobot = sdk.create_robot(ROBOT_IP)\nrobot.authenticate(SPOT_USERNAME, SPOT_PASSWORD)\n# Create lease client and take exclusive control over Spot.  \nlease_client = robot.ensure_client('lease')\nlease = lease_client.take()\nlease_keep_alive = bosdyn.client.lease.LeaseKeepAlive(lease_client)\n# Try to power on the robot\nrobot.power_on(timeout_sec=20)\nif robot.is_powered_on():\n    print(\"Powered On\")\n\t\t# If everything went smooth, Spot face lights should turn green\nelse:\n\t\t# In case of some problems, e.g. somebody stole control over robot\n    print(\"Failed\")\n    exit(0)\n# Synchronize Spor inner time with ours - to avoid outdated commands\nrobot.time_sync.wait_for_sync()\n# To execute robot movement, create command client through which orders are sent\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\n# Start movement with simple stand up\nblocking_stand(command_client, timeout_sec=10)\n# Rotate robot body:\n#  1. Build command for body rotation. It’s not an easy task to control robot motion with commands on low level. \n#     Bosdyn Client allow as to use a shortcut - RobotCommandBuilder. It contains a number of predefined commands, \n#     you need just to choose one of your liking and insert parameters\nfootprint_R_body = EulerZXY(yaw=0.1, roll=0.1, pitch=0.1)\ncmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n#  2. Execute builded command\ncommand_client.robot_command(cmd)\ntime.sleep(2)\n# Return robot state back\ncommand_client.robot_command(RobotCommandBuilder.synchro_stand_command(footprint_R_body=EulerZXY(yaw=0, roll=0, pitch=0)))\ntime.sleep(2)\n# Change robot height\ncmd = RobotCommandBuilder.synchro_stand_command(body_height=0.1)\ncommand_client.robot_command(cmd)\n# Now we are ready to draw letter. \ndef draw_letter(command_client):\n\t\t# Choose points to draw (see the coords explanation bellow)\n    points_xy_draw = (\n        (125, 125),\n        (375, 875),\n        (500, 500),\n        (250, 500),\n        (500, 500),\n        (625, 125),\n    )\n    for x, y in points_xy_draw:\n        convert = lambda x: (x / 1000 - 0.5) * -1\n        x, y = map(convert, (x, y))\n        footprint_R_body = EulerZXY(\n            yaw=x, \n            roll=0.0, \n            pitch=y,\n        )\n        cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n        command_client.robot_command(cmd)\n        time.sleep(1)\nnotify_clear_canvas()\nnotify_start_line()\ndraw_letter(command_client)\nnotify_stop_line()\n# Turn off the robot gracefully\nrobot.power_off(cut_immediately=False)\n\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nAls we de kop van Spot naar een punt in de camera moeten verplaatsen, moeten we enkele grote berekeningen uitvoeren met veel niet-lineaire parameters, wat helemaal geen eenvoudige taak is. Maar we zouden kunnen zeggen dat lokaal, yaw- en pitchhoeken ongeveer als cartesiaanse coördinaten met een bepaalde coëfficiënt op een afbeelding kunnen worden gebruikt.\n</RoboAcademyText>\n\n\n<LessonImages src=\"boston-dynamics-spot/cartesian.jpeg\" alt=\"spot\" imageClasses=\"mb\"/>\n\nNu kun je proberen het script uit te voeren en het resultaat te zien. Vergeet niet om je code op te slaan met Ctrl+S:\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n</LessonCodeWrapper>\n\n\n### De video van Spot is hier te vinden:\n[https://codepen.io/smehnov/pen/BaVNrPM](https://codepen.io/smehnov/pen/BaVNrPM)\n\n\n## Uitdaging\nMaak een Python-script dat de lichaamspositie van de robot bestuurt met een reeks bewegingen:\n\n1. Opstaan\n2. Traceer je initialen met zijn gezicht (één letter, minstens 3 punten)\n3. Ga zitten\n\n## Resultaataataten\n\nNu weet je hoe je:\n\n- werken met Spot SDK\n- een basiscommando construeren\n- robotlichaam draaien\n- verbinden met de Spot\n\nEn zelfs een letter hebt getekend. Gefeliciteerd!\n\n\n<RoboAcademyText fWeight=\"500\">\n\nWe hebben een [rosbag](http://wiki.ros.org/rosbag) verzameld met de gewrichtsgegevens van Spot, zodat je ze kunt visualiseren (bijvoorbeeld met [foxglove](https://www.notion.so/Lesson-1-Emergency-Stop-Initialization-Body-Position-Control-4ccf6316330d4680ab1bb571b2b788d5)). Het certificaat wordt binnenkort naar uw e-mailadres gestuurd.\n\n</RoboAcademyText> \n\n\n## [Plan uw eerste les](https://meetings.hubspot.com/strelka)","fileInfo":{"path":"nl/learn/boston-dynamics-spot/overview.md","name":"overview"},"defaultName":"Software Developing for Boston Dynamics Spot","lastUpdate":null}},"context":{}}