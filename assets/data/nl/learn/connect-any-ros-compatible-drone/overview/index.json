{"hash":"ebf92df2790a8f2dc659c241c969d5c9f2c95e48","data":{"course":{"id":"1406cdaa10a6ef65dccf9f48479a6dc7","title":"Verbind ROS-compatibele drone","description":"Verbind elke ros-compatibele robot onder robonomics parachain controle.","content":"\n\n## Deel 1. Starten via Transactie\n\n**In dit artikel zullen we laten zien dat je met behulp van Robonomics tools elk ROS-compatibel apparaat kunt besturen. We zullen een willekeurig drone-simulatiepakket op het web vinden en aanpassen om met Robonomics te werken.**\n**Vereisten:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (installatiehandleiding [hier](http://wiki.ros.org/melodic/Installatie))\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics node (binair bestand) (download de nieuwste release [hier](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n</List>\n\n<br/>\n\nHet hele proces van het coderen van dit deel van de demo wordt gepresenteerd in een video hieronder.\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. Zoek een simulatie\nLaten we het web opgaan. Zoek op Google naar 'ROS drone simulator'. De eerste link zal je waarschijnlijk de 'tum_simulator' pagina laten zien op [http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\nHet is behoorlijk verouderd, dus we kunnen beter een fork voor ons systeem vinden. Zoek op Google naar 'tum_simulator Ubuntu 18 Gazebo 9 fork'. Het eerste resultaat is een GitHub [repo](https://github.com/tahsinkose/sjtu-drone) met een geschikt pakket. Download het\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\nVergeet niet om het source commando toe te voegen aan `~/.bashrc`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\nNu kunnen we de simulatie uitvoeren om te zien wat we moeten doen om de drone onder parachain controle te nemen.\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. Inspecteer ROS-onderwerpen\nWanneer de simulatie draait, voer dan in een nieuw tabblad het volgende commando uit om de lijst met onderwerpen te zien die door de drone worden gebruikt:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\nLaten we eens kijken naar `/cmd_vel`, `/drone/takeoff` en `/drone/land`:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\nZoals te zien is, zouden er berichten van de typen `Twist` en `Empty` moeten zijn, ze maken deel uit van `std_msgs` en `geometry_msgs`, we zullen dit gebruiken in de controller. Sluit de simulatie even af.\n\n## 3. Download controllerpakket\nOver het algemeen is het belangrijkste verschil met de normale ROS-robotcontroller een blok code, dat alle transacties in het netwerk controleert met behulp van [Robonomics IO](https://wiki.robonomics.network/docs/rinterface/). Het pakket zelf is beschikbaar op GitHub. Download het en bouw de werkruimte:\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. Beheer accounts in DAPP\nAangezien we aan het testen zijn, laten we een lokale robonomics netwerknodes maken met het robonomics binair bestand:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Belangrijk!** Voordat je de volgende lanceringen uitvoert, is het noodzakelijk om een map `db` te verwijderen met\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nNa een succesvolle lancering maak je accounts aan volgens [deze](https://wiki.robonomics.network/docs/create-account-in-dapp/) handleiding. **Vergeet niet om de seed en het adres van elk account op te slaan! Je hebt ze nodig voor transacties**. Voeg deze adressen, seeds en het pad naar het robonomics binair bestand toe aan het bestand `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Verstuur wat geld (eenheden) naar deze accounts:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. Start de drone onder parachain controle\n\nTot nu toe zou het **enige dat draait** de lokale robonomics node moeten zijn. Start in een aparte terminal de dronesimulatie:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nVoer het script uit:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\nNu kun je een transactie verzenden om de drone te laten vliegen. Gebruik hiervoor de Robonomics IO `write` subcommando van het robonomics binair bestand:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nWaar `<DRONE_ADRES>` en `<WERKGEVERSLEUTEL>` worden vervangen door eerder opgeslagen strings.\nJe zou de log `\"Opstijgen\"` moeten zien en de drone zou moeten beginnen te vliegen:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\nZo kan elke ROS-compatibele robot worden bestuurd door Robonomics parachain controle.\n\n\n##  Deel 2. Gegevens opslaan op Blockchain\n\n**In dit deel zullen we doorgaan met het gebruik van Robonomics tools om een drone te laten besturen door een parachain. Deze keer zullen we opties toevoegen voor het verzenden van gegevens naar IPFS en het opslaan van hashes in de chain. Hieronder vind je de instructies en codefragmenten. Vereisten:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (installatiehandleiding [hier](http://wiki.ros.org/melodic/Installatie))\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22 (download van [hier](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz) en installeer)\n</li>\n\n<li class=\"flex\">\n\nRobonomics node (binair bestand) (download de nieuwste release [hier](https://github.com/airalab/robonomics/releases))\n</li>\n\n<li>Python-afhankelijkheden:\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\nHet hele proces van het coderen van dit deel van de demo wordt gepresenteerd in een video hieronder.\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. Voeg afhankelijkheden toe\nAls we een simulatie starten en de lijst met onderwerpen bekijken (zie deel 1), zullen we zien dat er één onderwerp is dat frontcamera-gegevens bevat en het berichttype `sensor_msgs/Image` gebruikt:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\nLaten we proberen om elke 1 seconde een foto te maken en na de vlucht deze foto's te publiceren naar IPFS. Als je de eerste tutorial hebt voltooid, hoef je niets anders te downloaden. Het is het `drone_sample_controller_pictures.py` script.\n\n## 2. Beheer accounts in DAPP\nZoals gedaan in een eerdere tutorial, maak een lokale robonomics netwerknode aan met het robonomics binair bestand:\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Belangrijk!** Voordat je de volgende lanceringen uitvoert, is het noodzakelijk om een map `db` te verwijderen met\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nNa een succesvolle lancering maak je accounts aan volgens [deze](https://wiki.robonomics.network/docs/create-account-in-dapp/) handleiding. **Vergeet niet om de seed en het adres van elk account op te slaan! Je hebt ze nodig voor transacties**. Voeg deze adressen, seeds en het pad naar het robonomics binair bestand toe aan het bestand `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Verstuur wat geld (eenheden) naar deze accounts:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. Lancering\nTot nu toe zou het **enige dat draait** de lokale robonomics node moeten zijn. Start in een aparte terminal de dronesimulatie:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nStart in een ander venster de ipfs daemon:\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nVoer het script uit:\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\nNu kun je een transactie verzenden om de drone te laten vliegen en foto's te laten maken. Hiervoor moet je de Robonomics IO `write` subopdracht van het robonomics binair bestand gebruiken:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nWaar `<DRONE_ADRES>` en `<WERKGEVERSLEUTEL>` worden vervangen door eerder opgeslagen strings.\nJe zou de log `\"Opstijgen\"` moeten zien en de drone zou moeten beginnen met vliegen en foto's maken:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\nLater, wanneer de taak is voltooid, ga naar de Robonomics portal en ga naar `Ontwikkelaar` -> `Ketenstatus` en voeg een `DRONE` datalog toe met de `+` knop met geselecteerde `datalog` als statusquery. De IPFS-hash van de telemetrie is opgeslagen in de blockchain. Om de gegevens te zien, kopieer eenvoudigweg de hash en voeg deze toe aan het lokale [gateway](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/) adres `localhost:8080/ipfs/`:\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"nl/learn/connect-any-ros-compatible-drone/overview.md","name":"overview"},"defaultName":"Connect ROS-compatible drone","lastUpdate":"Thu May 04 2023 12:52:55 GMT+0400 (Samara Standard Time)"}},"context":{}}