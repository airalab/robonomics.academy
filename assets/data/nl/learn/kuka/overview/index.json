{"hash":"b245a40217fbced1639aa527710a032ddca236bc","data":{"course":{"id":"2b9c03b7a2b93de152d026afae13c104","title":"Verbind Kuka manipulator","description":"Verbind Manipulator","content":"\nVideo met een voorbeeld van werk kan hier worden gevonden:\n\nhttps://youtu.be/z55HepXbHr8\n\n<br/>\n\n***\n\n<br/>\n\n## Vereisten\n\n<List>\n\n<li class=\"flex\">\n\nROS melodic, Gazebo (installatie-instructie [hier](http://wiki.ros.org/melodic/Installatie/Ubuntu))\n</li>\n\n<li>Enkele extra pakketten\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li> IPFS 0.4.22 \n\n(download van [hier](https://www.npackd.org/p/ipfs/0.4.22) en installeer)\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>pip3\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt-get install python3-pip\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li>substrate-interface\n\n<LessonCodeWrapper language=\"bash\">\npip3 install substrate-interface\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics node (binair bestand) (download de nieuwste release [hier](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n<li>IPFS-browserextensie (niet noodzakelijk)</li>\n\n</List>\n\n<br/>\n\n***\n\n<br/>\n\n## Installatie\nInstalleer Kuka manipulator en besturingspakketten\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">cd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make</LessonCodeWrapper>\n\n***\n\n<br/>\n\n## Gazebo-model uitvoeren\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n</LessonCodeWrapper>\n\nIn een nieuw venster\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun manipulator_gazebo move_arm_server\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/1.png\" alt=\"model\"/>\n\n***\n\n<br/>\n\n## Robonomics uitvoeren\nGa naar de map met het robonomics-bestand en maak een lokaal robonomics-netwerk:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/robonomics.png\" alt=\"robonomics\"/>\n\nGa naar [Robonomics Parachain-portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) en schakel over naar de lokale node\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/local.png\" alt=\"local\"/>\n\nGa vervolgens naar Accounts en maak een `KUKA`-account aan. Sla de mnemonische sleutel van het account op, je hebt het later nodig. \n\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/create_acc.png\" alt=\"acc\"/>\n\nStuur wat eenheden naar het nieuwe account vanuit een van de standaardaccounts.\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/send_money.png\" alt=\"accs\"/>\n\n***\n<br/>\n\n## IPFS uitvoeren\nVoer uit ipfs daemon:\n\n<LessonCodeWrapper language=\"bash\">\nipfs daemon\n</LessonCodeWrapper>\n\n***\n\n</br>\n\n## Besturingspakket uitvoeren\nIn de config-map in het kuka_control-pakket moet je een configuratiebestand maken met deze regels, waar `<your_mnemonic>` de opgeslagen mnemonische seed is:\n\n<LessonCodeWrapper language=\"bash\">\n{\n    \"kuka_mnemonic\": \"[your_mnemonic]\",\n    \"node\": \"ws://127.0.0.1:9944\"\n}\n</LessonCodeWrapper>\n\n\nNu kun je het besturingsscript uitvoeren:\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun kuka_controller move_arm_client.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/run.png\" alt=\"control\"/>\n\n## Transactie verzenden\nGa naar [Robonomics Parachain-portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) naar `Developer/Extrinsics`, verander `extrinsic` in `launch`. Kies je `KUKA`-account in `robot` en verander `param` in `Ja`. Druk op `Transactie verzenden`\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/launch.png\" alt=\"transaction\"/>\n\nIn het venster met het kuka_control-pakket zie je:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/res.png\" alt=\"done\"/>\n\nGa vervolgens naar `Developer/Chain State` op het Robonomics-portaal, selecteer `datalog` en `datalogItem((AccountId,u64)): RingBufferItem` in de query en voeg `KUKA` datalog toe met de knop '+':\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/datalog.png\" alt=\"datalog\"/>\n\nNu kun je de telemetrie van de robot vinden in IPFS via deze link met je hash `https://gateway.ipfs.io/ipfs/<hash>`.\n\n## Probleemoplossing\n\nAls `catkin_make` niet werkt met de melding dat het MoveArm.h niet kan vinden, probeer dan de laatste vier regels in CMakeLists.txt in het kuka_manipulator_gazebo-pakket te verwijderen:\n\n<LessonCodeWrapper language=\"yaml\">\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(move_arm_server src/move_arm_server.cpp)\ntarget_link_libraries(move_arm_server ${catkin_LIBRARIES})\nadd_dependencies(move_arm_server beginner_tutorials_gencpp)\n</LessonCodeWrapper>\n\nDoe `catkin_make` zonder deze regels, voeg ze dan weer toe en doe `catkin_make` opnieuw.","fileInfo":{"path":"nl/learn/kuka/overview.md","name":"overview"},"defaultName":"Connect Kuka manipulator","lastUpdate":null}},"context":{}}