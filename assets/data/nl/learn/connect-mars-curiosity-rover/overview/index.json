{"hash":"b245a40217fbced1639aa527710a032ddca236bc","data":{"course":{"id":"1804e139057b00098dcf8f780cd30e21","title":"Verbind Mars Curiosity Rover","description":"Verbind Mars Curiosity rover onder Robonomics parachain controle.","content":"\n**Laten we eens kijken hoe Robonomics Parachain controle het mogelijk maakt om Mars Curiosity rover te laten bewegen. Vereisten:**\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (installatiehandleiding [hier](http://wiki.ros.org/melodic/Installatie))\n\n</li>\n\n\n<li>extra pakketten:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n  sudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS tot [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n\n</li>\n\n<li class=\"flex\">\n\n[IPFS Companion-extensie](https://github.com/ipfs/ipfs-companion)\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics node (binair bestand) (download de nieuwste release [hier](https://github.com/airalab/robonomics/releases). Deze tutorial is getest op v1.1)\n\n</li>\n\n</List>\n\n<br/>\n\nHier is de video die een succesvolle lancering laat zien:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n\n<br/>\n\n### 1. Stel een simulatie in\n\nDownload Curiosity rover pakket:\n<LessonCodeWrapper language=\"bash\">\n  mkdir -p robonomics_ws/src\n  cd robonomics_ws/src\n  git clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\n  cd ..\n  catkin build\n</LessonCodeWrapper>\n\nWe moeten de startcondities aanpassen om onze rover soepel te laten spawnen:\n\n<List>\n\n<li>Ga naar\n\n`src/master/curiosity_mars_rover_description/worlds` en wijzig regel 14 van het bestand` mars_curiosity.world` to \n`<pose>0 0 8 0 0 0</pose>`\n\n</li>\n\n<li>Ga naar\n\n`src/master/curiosity_mars_rover_description/launch` en verander regel 4 van het bestand `mars_curiosity_world.launch` naar \n`<arg name=\"paused\" default=\"false\"/>`\n\nVergeet niet de bronopdracht toe te voegen aan `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n</li>\n\n<li> Herstart de console en start de simulatie:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\n  roslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/rover.jpg\" alt=\"Mars rover\"/>\n\n</li>\n\n</List>\n\nOpmerking: als de afbeelding donker is, bijv. in de schaduw, verander `Camera` in `Orthorgraphic` in de Gazebo-werkbalk.\nDe simulatie kan even worden gesloten.\n\n------------\n\n<br/>\n\n### 2. Download Robonomics controller pakket\nOm een controller pakket voor Rover te downloaden, typ in de terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n</LessonCodeWrapper>\n\n\n------------\n\n<br/>\n\n### 3. Beheer accounts in DAPP\nAangezien we aan het testen zijn, laten we een lokale robonomics netwerk maken met het robonomics binair bestand:\n\n<LessonCodeWrapper language=\"bash\">\n  ./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/robonomics.jpg\" alt=\"Voer uitning node\"/>\n\n\nGa naar [Robonomics Parachain-portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) en schakel over naar de lokale node \n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/local_node.jpg\" alt=\"Local node\"/>\n\n\nGa naar Accounts en maak **CURIOSITY** en **WERKGEVER** accounts aan.\n\n**Belangrijk**! Kopieer het adres van elk account (om het adres te kopiëren, klik op het pictogram van het account) en de **mnemonische seed** van het Curiosity-account (verkregen bij het aanmaken van het account)\nVerplaats wat geld (eenheden) naar deze accounts. U kunt meer lezen over accounts in Robonomics [hier](https://wiki.robonomics.network/docs/en/create-account-in-dapp/)\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/account_creation.jpg\" alt=\"Account creation\"/>\n\n\nVoeg deze adressen, seed en node-adres (standaard naar `ws://127.0.0.1:9944` voor ontwikkelaarsnode) toe in `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Geen aanhalingstekens.\n\n------------\n\n<br/>\n\n### 4. Start Robonomics\n\nVoordat u verder gaat, zorg ervoor dat u de [IPFS Companion Extension](https://github.com/ipfs/ipfs-companion) heeft geïnstalleerd.\n\nStart IPFS in een aparte terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nifps init #dit hoeft u slechts één keer per IPFS-installatie te doen\nipfs daemon\n</LessonCodeWrapper>\n\nStart in een andere aparte terminal de Curiosity-simulatie als deze niet actief is:\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\nWacht tot hij stil blijft staan\n\nStart in een andere terminal de controller:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nrosrun robonomics_sample_controller sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/controller.jpg\" alt=\"Controller\"/>\n\nNu kunt u een transactie verzenden om de Rover te laten bewegen en gegevens te laten verzamelen. Hiervoor kunt u dezelfde [Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) gebruiken.\nGa naar `Developer->Extrinsics` en selecteer het werkgeversaccount van Curiosity, `launch` extrinsiek, Curiosity's account als doelaccount en `ja` als parameter.\nDien de extrinsieke in.\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/extrinsic.jpg\" alt=\"Extrinsic\"/>\n\nDe robot zou moeten beginnen met bewegen. Hij zal geen commando's accepteren van andere accounts of commando's met de parameter `nee`. De rover zal ongeveer een minuut rondrijden en gegevens verzamelen.\nLater, wanneer de taak is voltooid:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/job_done.jpg\" alt=\"Job done\"/>\n\n\nGa op de Robonomics-portal naar `Developer -> Chain state` en verkrijg een `CURIOSITY` datalog met de “+” knop met geselecteerde `datalog -> RingBufferItem` als query: \n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/datalog.jpg\" alt=\"Datalog\"/>\n\n\nNu is de IPFS-hash van de telemetrie opgeslagen in de blockchain. Om de gegevens te zien, kopieert u eenvoudig de hash en zoekt u deze op een gateway:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/data_in_ipfs.jpg\" alt=\"Data in IPFS\"/>\n\n\nDeze telemetrie wordt bewaard in een gedecentraliseerde opslag, en de hash ervan is opgeslagen in een blockchain!\n","fileInfo":{"path":"nl/learn/connect-mars-curiosity-rover/overview.md","name":"overview"},"defaultName":"Connect Mars Curiosity Rover","lastUpdate":"Thu May 18 2023 10:41:00 GMT+0400 (Samara Standard Time)"}},"context":{}}