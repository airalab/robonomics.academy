{"hash":"ebf92df2790a8f2dc659c241c969d5c9f2c95e48","data":{"course":{"id":"56d2111e5f635adb31e05f0800d05031","title":"Conectar el Rover Curiosity de Marte","description":"Conectar el rover Curiosity de Marte bajo el control de la paracaídas de Robonomics.","content":"\n**Veamos cómo el control de la paracaídas de Robonomics permite que el rover Curiosity de Marte se mueva. Requisitos:**\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (manual de instalación [aquí](http://wiki.ros.org/melodic/Instalación))\n\n</li>\n\n\n<li>paquetes adicionales:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n  sudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS hasta [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n\n</li>\n\n<li class=\"flex\">\n\n[Extensión complementaria de IPFS](https://github.com/ipfs/ipfs-companion)\n\n</li>\n\n<li class=\"flex\">\n\nNodo de Robonomics (archivo binario) (descargue la última versión [aquí](https://github.com/airalab/robonomics/releases). Este tutorial se probó bien en la versión 1.1)\n\n</li>\n\n</List>\n\n<br/>\n\nAquí está el video que muestra el lanzamiento exitoso:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n\n<br/>\n\n### 1. Configurar una simulación\n\nDescargar el paquete del rover Curiosity:\n<LessonCodeWrapper language=\"bash\">\n  mkdir -p robonomics_ws/src\n  cd robonomics_ws/src\n  git clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\n  cd ..\n  catkin build\n</LessonCodeWrapper>\n\nNecesitamos ajustar las condiciones iniciales para que nuestro rover aparezca suavemente:\n\n<List>\n\n<li>Ir a\n\n`src/master/curiosity_mars_rover_description/worlds` y cambiar la línea 14 del archivo` mars_curiosity.world` to \n`<pose>0 0 8 0 0 0</pose>`\n\n</li>\n\n<li>Ir a\n\n`src/master/curiosity_mars_rover_description/launch` y cambiar la línea 4 del archivo `mars_curiosity_world.launch` a \n`<arg name=\"paused\" default=\"false\"/>`\n\nNo olvides agregar el comando fuente a `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n</li>\n\n<li> Reiniciar la consola y lanzar la simulación:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\n  roslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/rover.jpg\" alt=\"Mars rover\"/>\n\n</li>\n\n</List>\n\nNota: si la imagen está oscura, por ejemplo, sombreada, cambie `Cámara` a `Ortográfica` en la barra de herramientas de Gazebo.\nLa simulación se puede cerrar por un tiempo.\n\n------------\n\n<br/>\n\n### 2. Descargar el paquete del controlador de Robonomics\nPara descargar un paquete de controlador para el Rover escriba en la terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n</LessonCodeWrapper>\n\n\n------------\n\n<br/>\n\n### 3. Administrar cuentas en DAPP\nDado que estamos probando, creemos una red de robonomics local con el archivo binario de robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n  ./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/robonomics.jpg\" alt=\"Ejecutarning node\"/>\n\n\nIr a [portal de Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) y cambiar a nodo local \n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/local_node.jpg\" alt=\"Local node\"/>\n\n\nIr a Cuentas y crear las cuentas **CURIOSITY** y **EMPLEADOR**.\n\n**¡Importante**! Copie la dirección de cada cuenta (para copiar la dirección haga clic en el icono de la cuenta) y la **semilla mnemotécnica** de la cuenta de Curiosity (obtenida al crear la cuenta)\nTransferir algo de dinero (unidades) a estas cuentas. Puede leer más sobre las cuentas en Robonomics [aquí](https://wiki.robonomics.network/docs/en/create-account-in-dapp/)\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/account_creation.jpg\" alt=\"Account creation\"/>\n\n\nAgregue estas direcciones, semilla y dirección del nodo (por defecto `ws://127.0.0.1:9944` para el nodo de desarrollador) en `config.config` en `robonomics_ws/src/robonomics_sample_controller/src`. Sin comillas.\n\n------------\n\n<br/>\n\n### 4. Iniciar Robonomics\n\nAntes de continuar, asegúrese de haber instalado la [Extensión de Compañero de IPFS](https://github.com/ipfs/ipfs-companion).\n\nEn una terminal separada inicie IPFS:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nifps init #solo necesita hacer esto una vez por instalación de IPFS\nipfs daemon\n</LessonCodeWrapper>\n\nEn otra terminal separada inicie la simulación de Curiosity si no está en vivo:\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\nEspere hasta que se quede quieto\n\nEn otra terminal inicie el controlador:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nrosrun robonomics_sample_controller sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/controller.jpg\" alt=\"Controller\"/>\n\nAhora puede enviar una transacción que haga que el Rover comience a moverse y a recopilar datos. Para hacerlo, puede usar el mismo [portal de la Paracaídas de Robonomics](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/).\nIr a `Desarrollador->Extrínsecos` y seleccionar la cuenta empleadora de Curiosity, el extrínseco `lanzamiento`, la cuenta de destino de Curiosity y `sí` como parámetro.\nEnviar el extrínseco.\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/extrinsic.jpg\" alt=\"Extrinsic\"/>\n\nEl robot debería comenzar a moverse. No aceptará comandos de otras cuentas ni comandos con parámetro `no`. El rover se moverá y recopilará datos durante aproximadamente un minuto.\nMás tarde, cuando se haya completado el trabajo:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/job_done.jpg\" alt=\"Job done\"/>\n\n\nEn el portal de Robonomics vaya a `Desarrollador -> Estado de la cadena` y obtenga un datalog de `CURIOSITY` usando el botón “+” con `datalog -> RingBufferItem` seleccionado como consulta: \n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/datalog.jpg\" alt=\"Datalog\"/>\n\n\nAhora el hash de IPFS de la telemetría está guardado en la cadena de bloques. Para ver los datos simplemente copie el hash y encuéntralo en una puerta de enlace:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/data_in_ipfs.jpg\" alt=\"Data in IPFS\"/>\n\n\n¡Esta telemetría se mantiene en un almacenamiento descentralizado, y su hash está almacenado en una cadena de bloques!\n","fileInfo":{"path":"es/learn/connect-mars-curiosity-rover/overview.md","name":"overview"},"defaultName":"Connect Mars Curiosity Rover","lastUpdate":"Thu May 18 2023 10:41:00 GMT+0400 (Samara Standard Time)"}},"context":{}}