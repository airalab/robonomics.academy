{"hash":"f33052c6cd25aad5fc1a1101d4bd76b0f766a37b","data":{"course":{"id":"63925d543d1decd547f8731d2bd9053a","title":"Conectar vehículo aéreo no tripulado","description":"Conectar vehículo aéreo no tripulado","content":"\n**El dron comienza a moverse después de la transacción y almacena el archivo con las coordenadas en IPFS. El script de control se basa en el [script de demostración de GAAS](https://github.com/generalized-intelligence/GAAS)**  \n\nhttps://youtu.be/4CwtGAX1OwM\n\n<br/>\n\n## Requisitos\n\n<List>\n\n<li> dependencias para el control:\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt install -y \\\n\tpython3-pip \\\n\tninja-build \\\n\texiftool \\\n\tpython-argparse \\\n\tpython-empy \\\n\tpython-toml \\\n\tpython-numpy \\\n\tpython-yaml \\\n\tpython-dev \\\n\tpython-pip \\\n\tninja-build \\\n\tprotobuf-compiler \\\n\tlibeigen3-dev \\\n\tgenromfs\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\">\npip3 install \\\n\tpandas \\\n\tjinja2 \\\n\tpyserial \\\n\tcerberus \\\n\tpyulog \\\n\tnumpy \\\n\ttoml \\\n\tpyquaternion\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo [tutorial de instalación](http://wiki.ros.org/melodic/Instalación)\n</li>\n\n<li>paquetes adicionales:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\nsudo apt-get install python-jinja2\nsudo apt-get install python-catkin-pkg\nsudo apt-get install python3-catkin-pkg-modules\n</LessonCodeWrapper>\n\n</li>\n\n<li>Versión de IPFS 0.4.22\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nwget https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-amd64.tar.gz\ntar -xvzf go-ipfs_v0.4.22_linux-amd64.tar.gz\ncd go-ipfs\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNodo de Robonomics (archivo binario) (descargar la última versión [aquí](https://github.com/airalab/robonomics/releases))\n</li>\n\n</List>\n\n<br/>\n\n## Configuración del entorno\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nsudo ./install_geographiclib_datasets.sh\ncd ~/catkin_ws/src\ngit clone https://github.com/PX4/Firmware.git\ncd Firmware\ngit checkout v1.9.0\nbash ./Tools/setup/ubuntu.sh\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/catkin_ws/src\ngit clone https://github.com/generalized-intelligence/GAAS.git\ncp -r ~/catkin_ws/src/GAAS/simulator/models/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/models/\ncp -r ~/catkin_ws/src/GAAS/simulator/worlds/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/worlds/\ncp -r ~/catkin_ws/src/GAAS/simulator/posix-config/* ~/catkin_ws/src/Firmware/posix-configs/SITL/init/ekf2/\n</LessonCodeWrapper>\n\nModifique su archivo `.bashrc`, agregando las siguientes líneas al final:  \n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash   \nsource ~/catkin_ws/src/Firmware/Tools/setup_gazebo.bash ~/catkin_ws/src/Firmware/ ~/catkin_ws/src/Firmware/build posix_sitl_default \nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware/Tools/sitl_gazebo\nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models:~/catkin_ws/src/GAAS/simulator/models\n</LessonCodeWrapper>  \n\n  \n## Instalación del paquete de control\nEn una nueva Terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd catkin_ws/src\ngit clone https://github.com/tubleronchik/robonomics_drone_sim.git\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\n## Red de Robonomics\n\nPara crear una red de robonomics local, vaya a la carpeta con el archivo binario de robonomics y ejecute:  \n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --rpc-cors all\n</LessonCodeWrapper>\n\nAgregue la ruta de robonomics a `config.py`\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/IPFS.jpg\" alt=\"IPFS\"/>\n\nVaya al [portal de Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) y cambie a nodo local.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/localNode.jpg\" alt=\"localNode\"/>\n\nVaya a **Cuentas** y cree cuentas **DRONE** y **EMPLEADOR**. Guarde los nombres de cuenta, las claves y la ruta de **robonomics** en `~/catkin_ws/src/drone_sim/src/config.py`. Transfiera algo de dinero a las cuentas.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/addingAcc.jpg\" alt=\"accounts\"/>\n\n## Ejecución de la simulación\nEjecute el daemon de IPFS\n\n<LessonCodeWrapper language=\"bash\">\ncd go-ipfs\nipfs daemon\n</LessonCodeWrapper>\n\nEn otra terminal, inicie la simulación:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch px4 mavros_posix_sitl.launch\ncd ~/catkin_ws/src/robonomics_drone_sim/src\npython3 takeoff.py\n</LessonCodeWrapper>\n\nEsperando hasta \"Esperando pago\" \n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/launch.jpg\" alt=\"launch\"/>\n\nPara enviar una transacción, ejecute en otra ventana:\n`echo \"ON\" | ./robonomics io write launch -r <dirección_del_dron> -s <clave_del_empleador>` - donde **<dirección_del_dron>** y **<clave_del_empleador>** deben ser reemplazados con las cadenas de `config.py` correspondientemente.\n\nDespués de que los datos se hayan enviado a IPFS, vaya al **Estado de la Cadena** en el [portal de Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/). Seleccione **datalog** en la consulta y agregue el datalog de DRONE usando el botón `+`.\n\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/datalog.jpg\" alt=\"datalog\"/>\n\nPuede encontrar la telemetría del dron ejecutando `https://gateway.ipfs.io/ipfs/<hash>` insertando el hash anterior.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/output.jpg\" alt=\"output\"/>\n\nEs importante eliminar el directorio `db` antes de los próximos lanzamientos  \n` rm -rf ~/.local/share/robonomics/chains/dev/db`","fileInfo":{"path":"es/learn/iris-drone/overview.md","name":"overview"},"defaultName":"Connect unmanned aerial vehicle","lastUpdate":"Thu May 04 2023 12:53:05 GMT+0400 (Samara Standard Time)"}},"context":{}}