{"hash":"5d4f08f99729279cbad41c23c8d66dce511a8ae5","data":{"course":{"id":"b04002659477daa302424d7f268baf52","title":"Conectar manipulador Kuka","description":"Conectar Manipulador","content":"\nEl video con un ejemplo de trabajo se puede encontrar aquí:\n\nhttps://youtu.be/z55HepXbHr8\n\n<br/>\n\n***\n\n<br/>\n\n## Requisitos\n\n<List>\n\n<li class=\"flex\">\n\nROS melodic, Gazebo (instrucciones de instalación [aquí](http://wiki.ros.org/melodic/Instalación/Ubuntu))\n</li>\n\n<li>Algunos paquetes adicionales\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li> IPFS 0.4.22 \n\n(descargar desde [aquí](https://www.npackd.org/p/ipfs/0.4.22) e instalar)\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>pip3\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt-get install python3-pip\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li>substrate-interface\n\n<LessonCodeWrapper language=\"bash\">\npip3 install substrate-interface\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNodo Robonomics (archivo binario) (descargar la última versión [aquí](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n<li>Extensión del navegador IPFS (no es necesaria)</li>\n\n</List>\n\n<br/>\n\n***\n\n<br/>\n\n## Instalación\nInstalar el manipulador Kuka y los paquetes de control\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">cd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make</LessonCodeWrapper>\n\n***\n\n<br/>\n\n## Ejecutar el modelo de gazebo\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n</LessonCodeWrapper>\n\nEn una nueva ventana\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun manipulator_gazebo move_arm_server\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/1.png\" alt=\"model\"/>\n\n***\n\n<br/>\n\n## Ejecutar robonomics\nIr a la carpeta con el archivo de robonomics y crear una red de robonomics local:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/robonomics.png\" alt=\"robonomics\"/>\n\nIr a [Portal de Parachain Robonomics](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) y cambiar a nodo local\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/local.png\" alt=\"local\"/>\n\nLuego ir a Cuentas y crear la cuenta `KUKA`. Guarda la clave mnemotécnica de la cuenta, la necesitarás más tarde. \n\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/create_acc.png\" alt=\"acc\"/>\n\nEnviar algunas unidades a la nueva cuenta desde una de las cuentas predeterminadas.\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/send_money.png\" alt=\"accs\"/>\n\n***\n<br/>\n\n## Ejecutar ipfs\nEjecutar ipfs daemon:\n\n<LessonCodeWrapper language=\"bash\">\nipfs daemon\n</LessonCodeWrapper>\n\n***\n\n</br>\n\n## Ejecutar paquete de control\nEn el directorio de configuración en el paquete de control de kuka_control necesitas crear un archivo de configuración con estas líneas, donde `<tu_mnemotécnico>` es la semilla mnemotécnica guardada:\n\n<LessonCodeWrapper language=\"bash\">\n{\n    \"kuka_mnemonic\": \"[your_mnemonic]\",\n    \"node\": \"ws://127.0.0.1:9944\"\n}\n</LessonCodeWrapper>\n\n\nAhora puedes ejecutar el script de control:\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun kuka_controller move_arm_client.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/run.png\" alt=\"control\"/>\n\n## Enviando transacción\nEn [Portal de Parachain Robonomics](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) ve a `Desarrollador/Extrínsecos`, cambia `extrínseco` a `lanzamiento`. Elige tu cuenta `KUKA` en `robot` y cambia `param` a `Sí`. Luego presiona `Enviar transacción`\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/launch.png\" alt=\"transaction\"/>\n\nEn la ventana con el paquete de control de kuka_control verás:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/res.png\" alt=\"done\"/>\n\nLuego ve a `Desarrollador/Estado de la Cadena` en el portal de Robonomics, selecciona `datalog` y `datalogItem((AccountId,u64)): RingBufferItem` en la consulta y agrega el datalog `KUKA` con el botón '+':\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/datalog.png\" alt=\"datalog\"/>\n\nAhora puedes encontrar la telemetría del robot en IPFS a través de este enlace con tu hash `https://gateway.ipfs.io/ipfs/<hash>`.\n\n## Solución de problemas\n\nSi `catkin_make` no funciona con el mensaje de que no puede encontrar MoveArm.h, intenta eliminar las últimas cuatro líneas en CMakeLists.txt en el paquete kuka_manipulator_gazebo:\n\n<LessonCodeWrapper language=\"yaml\">\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(move_arm_server src/move_arm_server.cpp)\ntarget_link_libraries(move_arm_server ${catkin_LIBRARIES})\nadd_dependencies(move_arm_server beginner_tutorials_gencpp)\n</LessonCodeWrapper>\n\nHaz `catkin_make` sin estas líneas, luego vuélvelas a colocar y haz `catkin_make` de nuevo.","fileInfo":{"path":"es/learn/kuka/overview.md","name":"overview"},"defaultName":"Connect Kuka manipulator","lastUpdate":null}},"context":{}}