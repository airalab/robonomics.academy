{"hash":"e32ec6aa0237b51fe496ef5a5df720ef84304a93","data":{"course":{"id":"ff246fa4e1d94e6336acd2683d7ac07b","title":"Controlar el robot Baxter","description":"Controlar el robot Baxter","content":"Example of how it woks:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## Requisitos:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (manual de instalación [aquí][db2])  \n\n</li>\n\n<li>paquetes adicionales:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effot-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS hasta 0.6.0 (descargar desde [aquí][db3] e instalar)\n\n</li>\n\n<li> paquetes de python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nDescargar el último [lanzamiento][db4] del nodo Robonomics aquí (último lanzamiento probado v1.1)\n\n</li>\n\n<li>Extensión del navegador IPFS (no es necesario)</li>\n\n</List>\n\n<br/>\n\n## 0. install CV Bridge extension fo python3\n\n<List>\n\n<li> Crear espacio de trabajo de catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Instruir a catkin para establecer variables de cmake. Utilice su versión actual de `python`. Para mí, es `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Clonar src de cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Encontrar la versión de cv_bridge en su repositorio:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Verificar la versión correcta en el repositorio de git. En nuestro caso es 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Construir:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Extender el entorno con el nuevo paquete:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Probar:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. Descargar paquetes de simulación y controlador\nDescargar paquetes:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nNo olvides agregar el comando source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Iniciar la simulación\nVamos a iniciar el mundo de gazebo y poner nuestro baxter en él:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nAbrir una ventana más en la terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nPuedes poner algunos modelos frente a nuestro baxter. Será más interesante.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Gestionar cuentas en DAPP\n\nDado que estamos probando, creemos una red local de robonomics con el archivo binario de robonomics. Ve a la carpeta con el archivo de robonomics y ejecuta:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nIr al [portal de Parachain de Robonomics][db5] y cambiar a nodo local\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nIr a Cuentas y crear cuentas de __Baxter__ y __Empleador__ (no es necesario __Robot__)\n\n__¡Importante!__ Copiar el **Mnemónico** y la **dirección** de cada cuenta (para copiar la dirección haz clic en el icono de la cuenta). El **Mnemónico** es la clave privada de la cuenta.\nTransferir algo de dinero (unidades) a estas cuentas:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nAgregar el **Mnemónico** y la **dirección** de Baxter a `config.yaml` en `robot_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Iniciar la simulación\n\nEn una nueva ventana ejecutar:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nAbrir una terminal separada y iniciar el *paquete de control*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nAhora puedes enviar una transacción que haga que Baxter comience a moverse y recopilar datos. Para hacerlo, puedes usar el mismo [portal de Parachain de Robonomics][db5]. Ve a **Desarrollador->Extrínsecos** y selecciona la cuenta del empleador de Baxter, el extrínseco `launch`, la cuenta de Baxter como cuenta objetivo y `sí` como parámetro. Enviar el extrínseco.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nEl robot debería comenzar a moverse. No aceptará comandos de otras cuentas ni comandos con parámetro `no`.\nDeberías ver lo siguiente:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\ncuando el trabajo haya terminado ve al Portal de Robonomics a `Desarrollador > Estado de la cadena`. Elige `datalog.datalogItem(AccountId,u64)` en **consulta de estado**. Si deseas mostrar todos los datalogs, entonces desactiva la opción `incluir` y agrega ver el mensaje de datalog de Baxter usando el botón \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nAhora el hash de IPFS de la telemetría y las fotos está guardado en la cadena de bloques. Para ver los datos simplemente copia el hash e insértalo en la barra de búsqueda con la URL: gateway.ipfs.io/ipfs/<br poner tu hash aquí >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\nHaz clic en __Ver en el Gateway__ ¡y eso es todo!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Simulación de Baxter v2.0\n\nEjemplo de cómo funciona:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## Requisitos:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (manual de instalación [aquí][db2])  \n\n</li>\n\n<li>paquetes adicionales:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS hasta 0.6.0 (descargar desde [aquí][db3] e instalar)\n\n</li>\n\n<li> paquetes de python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNodo de Robonomics (archivo binario) (descargar el último [lanzamiento][db4] aquí)\n\n</li>\n\n<li class=\"flex\">\n\nCrear cuentas de __Baxter__ y __Empleador__ en el **Portal de Robonomics** (puedes encontrar el tutorial \"Crear una cuenta en el Portal de Robonomics\" [aquí][db8]).\n</li>\n\n<li>Extensión del navegador IPFS (no es necesario)</li>\n\n</List>\n\n<br/>\n\n## 0. instalar la extensión CV Bridge para python3\n\n<List>\n\n<li> Crear espacio de trabajo de catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Instruir a catkin para establecer variables de cmake. Utilice su versión actual de `python`. Para mí, es `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Clonar src de cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Encontrar la versión de cv_bridge en su repositorio:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Verificar la versión correcta en el repositorio de git. En nuestro caso es 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Construir:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Extender el entorno con el nuevo paquete:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Probar:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. Descargar paquetes de simulación y controlador\nNecesitaremos crear 2 espacios de trabajo - uno para los paquetes principales de Baxter y otro para el programa de control principal.\nPrimer espacio de trabajo. Es el programa de control principal. Se ejecutará bajo python3.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nSegundo espacio de trabajo. Allí estarán todos los paquetes de Baxter. La simulación es muy antigua, por lo que solo se puede ejecutar bajo python2.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nEstos paquetes fueron creados para ROS indigo. Debemos cambiar algunos archivos para ejecutarlos en ROS melodic.\nUsaremos archivos de **parche**.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nY construyamos todos nuestros paquetes:  \nPrimero construir los paquetes de Baxter\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nLuego regresar al primer espacio de trabajo y construirlo también:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nNo olvides agregar el comando source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Iniciar la simulación\n### Vamos a iniciar nuestra simulación:\nPrimero ve a `robot_ws` y copia y edita baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nEncuentra tu dirección IP local con el comando:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\nEdita los siguientes valores en `baxter.sh` :\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- tu_ip - pon tu dirección IP local. Ver `ip a`\n- versión de ros - por ejemplo \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nEjecutar el script de shell de baxter con sim especificado:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nPuedes poner algunos modelos frente a nuestro baxter. Será más interesante.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Gestionar cuentas en DAPP\n\nDado que estamos probando, creemos una red local de robonomics con el archivo binario de robonomics. Ve a la carpeta con el archivo de robonomics y ejecuta:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nIr al [portal de Parachain de Robonomics][db5] y cambiar a nodo local\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nIr a Cuentas y crear cuentas de __Baxter__ y __Empleador__.\n\nPuedes encontrar el manual \"Crear una cuenta en el Portal de Robonomics\" [aquí][db8]\n\n__¡Importante!__ Copiar el **Mnemónico** y la **dirección** de cada cuenta (para copiar la dirección haz clic en el icono de la cuenta). El **Mnemónico** es la clave privada de la cuenta.\n\nTransferir algo de dinero (unidades) a estas cuentas:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nAgrega el **mnemónico** y la **dirección** de Baxter a `config.yaml` en `robonomics_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Iniciar la simulación\n\nEn una nueva ventana ejecutar:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nAbrir una terminal separada y iniciar el *paquete de control*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nAhora puedes enviar una transacción que haga que Baxter comience a moverse y recopilar datos. Para hacerlo, puedes usar el mismo portal [Portal de Parachain de Robonomics][db5]. Ve a **Desarrollador->Extrínsecos** y selecciona la cuenta del empleador de Baxter, el extrínseco `lanzamiento`, la cuenta de Baxter como cuenta de destino y `sí` como parámetro. Envía el extrínseco.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nEl robot debería comenzar a moverse. No aceptará comandos de otras cuentas ni comandos con parámetro `no`.\nDeberías ver lo siguiente:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nCuando el trabajo haya terminado, ve al Portal de Robonomics a `Desarrollador > Estado de la cadena`. Elige `datalog.datalogItem(AccountId,u64)` en **consulta de estado**. Si deseas mostrar todos los datalogs, entonces desactiva la opción `incluir` y agrega la vista del mensaje de datalog de Baxter usando el botón \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nAhora el hash de IPFS de la telemetría y las fotos se guarda en la cadena de bloques. Para ver los datos simplemente copia el hash e insértalo en la barra de búsqueda con la URL:  \n#### gateway.ipfs.io/ipfs/< coloca tu hash aquí>\n\n¡Eso es todo!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/Instalación>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"es/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}