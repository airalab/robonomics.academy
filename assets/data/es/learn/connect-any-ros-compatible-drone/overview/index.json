{"hash":"f0f5c02be608963a98931b1ff3d7b952f1efb26f","data":{"course":{"id":"1272c49e713b8fb773bea75ef71530f5","title":"Conectar dron compatible con ROS","description":"Conectar cualquier robot compatible con ROS bajo el control de la paracadena de Robonomics.","content":"\n\n## Parte 1. Lanzamiento por Transacción\n\n**En este artículo mostraremos que con la ayuda de las herramientas de Robonomics puedes controlar cualquier dispositivo compatible con ROS. Encontraremos un paquete de simulación de dron aleatorio en la web y lo ajustaremos para que funcione con Robonomics.**\n**Requisitos:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (manual de instalación [aquí](http://wiki.ros.org/melodic/Instalación))\n\n</li>\n\n<li class=\"flex\">\n\nNodo de Robonomics (archivo binario) (descarga la última versión [aquí](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n</List>\n\n<br/>\n\nTodo el proceso de codificación de esta parte de la demostración se presenta en un video a continuación.\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. Encontrar una simulación\nVamos a navegar por la web. Busca en Google `simulador de dron ROS`. El primer enlace probablemente te mostrará la página `tum_simulator` en [http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\nEstá bastante desactualizado, así que es mejor encontrar un fork para nuestro sistema. Busca en Google `tum_simulator Ubuntu 18 Gazebo 9 fork`. El primer resultado es un repositorio de GitHub [repo](https://github.com/tahsinkose/sjtu-drone) con un paquete apropiado. Descárgalo\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\nNo olvides agregar el comando de origen a `~/.bashrc`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\nAhora podemos ejecutar la simulación para ver qué necesitamos hacer para llevar el dron bajo control de la paracadena.\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. Inspeccionar los temas de ROS\nCuando la simulación esté en ejecución, en una nueva pestaña ejecuta el siguiente comando para ver la lista de temas utilizados por el dron:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\nEchemos un vistazo a `/cmd_vel`, `/drone/takeoff` y `/drone/land`:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\nComo se puede ver, debería haber mensajes de los tipos `Twist` y `Empty`, que son partes de `std_msgs` y `geometry_msgs`, los usaremos en el controlador. Detén la simulación por un momento.\n\n## 3. Descargar paquete de controlador\nGlobalmente, la principal diferencia del controlador de robot ROS casual es un bloque de código, que verifica todas las transacciones en la red usando [Robonomics IO](https://wiki.robonomics.network/docs/rinterface/). El paquete en sí está disponible en GitHub. Descárgalo y construye el espacio de trabajo:\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. Gestionar cuentas en DAPP\nComo estamos probando, creemos un nodo de red local de robonomics con el archivo binario de robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**¡Importante!** Antes de los próximos lanzamientos es necesario eliminar un directorio `db` con\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nDespués de un lanzamiento exitoso, crea cuentas siguiendo este manual [aquí](https://wiki.robonomics.network/docs/create-account-in-dapp/). **¡No olvides guardar la semilla y la dirección de cada cuenta! Las necesitarás para las transacciones**. Agrega estas direcciones, semillas y la ruta al archivo binario de robonomics al archivo `config.config` en `robonomics_ws/src/robonomics_sample_controller/src`. Transfiere algo de dinero (unidades) a estas cuentas:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. Lanzamiento del dron bajo control de la paracadena\n\nHasta ahora **lo único que se está ejecutando** debería ser el nodo local de robonomics. En una terminal separada lanza la simulación del dron:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nEjecuta el script:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\nAhora puedes enviar una transacción que haga que el dron comience a volar. Para hacerlo, debes usar el subcomando `write` de Robonomics IO del archivo binario de robonomics:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nDonde `<DIRECCIÓN_DEL_DRON>` y `<CLAVE_DEL_EMPLEADOR>` se reemplazan con las cadenas guardadas previamente.\nDeberías ver el registro `\"Despegando\"` y el dron debería comenzar a volar:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\nAsí es como cualquier robot compatible con ROS puede ser controlado por el control de la paracadena de Robonomics.\n\n\n##  Parte 2. Guardar Datos en la Cadena de Bloques\n\n**En esta parte continuaremos usando las herramientas de Robonomics para hacer que un dron sea controlado por una paracadena. Esta vez agregaremos opciones de enviar datos a IPFS y almacenar el hash en la cadena. A continuación se muestra la instrucción y fragmentos de código. Requisitos:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (manual de instalación [aquí](http://wiki.ros.org/melodic/Instalación))\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22 (descarga desde [aquí](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz) e instala)\n</li>\n\n<li class=\"flex\">\n\nNodo de Robonomics (archivo binario) (descarga la última versión [aquí](https://github.com/airalab/robonomics/releases))\n</li>\n\n<li>Dependencias de Python:\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\nTodo el proceso de codificación de esta parte de la demostración se presenta en un video a continuación.\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. Agregar dependencias\nSi lanzamos una simulación y miramos la lista de temas (ver parte 1), veremos que hay un tema que contiene datos de la cámara frontal y usa el tipo de mensaje `sensor_msgs/Image`:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\nIntentemos tomar una foto cada 1 segundo y después del vuelo publicar estas fotos en IPFS. Si has completado el primer tutorial, no necesitas descargar nada más. Es el script `drone_sample_controller_pictures.py`.\n\n## 2. Gestionar cuentas en DAPP\nComo se hizo en un tutorial anterior, crear un nodo de red local de robonomics con el archivo binario de robonomics:\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**¡Importante!** Antes de los próximos lanzamientos es necesario eliminar un directorio `db` con\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nDespués de un lanzamiento exitoso, crea cuentas siguiendo este manual [aquí](https://wiki.robonomics.network/docs/create-account-in-dapp/). **¡No olvides guardar la semilla y la dirección de cada cuenta! Las necesitarás para las transacciones**. Agrega estas direcciones, semillas y la ruta al archivo binario de robonomics al archivo `config.config` en `robonomics_ws/src/robonomics_sample_controller/src`. Transfiere algo de dinero (unidades) a estas cuentas:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. Lanzar\nHasta ahora **lo único que se está ejecutando** debería ser el nodo local de robonomics. En una terminal separada lanza la simulación del dron:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nEn otro lanzamiento, iniciar el daemon de ipfs:\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nEjecuta el script:\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\nAhora puedes enviar una transacción que haga que el dron comience a volar y tomar fotos. Para hacerlo, debes usar el subcomando `write` de Robonomics IO del archivo binario de robonomics:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nDonde `<DIRECCIÓN_DEL_DRON>` y `<CLAVE_DEL_EMPLEADOR>` se reemplazan con las cadenas guardadas previamente.\nDeberías ver el registro `\"Despegando\"` y el dron debería comenzar a volar y tomar fotos:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\nMás tarde, cuando el trabajo esté hecho, en el portal de Robonomics ve a `Desarrollador` -> `Estado de la cadena` y agrega un datalog `DRONE` usando el botón `“+”` con el datalog seleccionado como consulta de estado. El hash de IPFS de la telemetría se ha guardado en la cadena de bloques. Para ver los datos, simplemente copia el hash y agrégalo a la dirección local del [gateway](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/) `localhost:8080/ipfs/`:\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"es/learn/connect-any-ros-compatible-drone/overview.md","name":"overview"},"defaultName":"Connect ROS-compatible drone","lastUpdate":"Thu May 04 2023 12:52:55 GMT+0400 (Samara Standard Time)"}},"context":{}}