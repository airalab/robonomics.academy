{"hash":"8d66541f6e2b7bde6cbd76ed09ec87c40b5569d7","data":{"course":{"id":"0ea467be38363968da5a6bdeb8e5fdeb","title":"Подключите совместимый с ROS дрон","description":"Подключите любого совместимого с ROS робота под управлением парачейна Robonomics.","content":"\n\n## Часть 1. Запуск по транзакции\n\n**В этой статье мы покажем, что с помощью инструментов Robonomics вы можете контролировать любое устройство, совместимое с ROS. Мы найдем случайный пакет симуляции дрона в Интернете и настроим его для работы с Robonomics.**\n**Требования:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (инструкция по установке [здесь](http://wiki.ros.org/melodic/Установка))\n\n</li>\n\n<li class=\"flex\">\n\nУзел Robonomics (бинарный файл) (скачать последний релиз [здесь](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n</List>\n\n<br/>\n\nВесь процесс написания этой части демонстрации представлен в видео ниже.\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. Найти симуляцию\nДавайте покопаемся в Интернете. Поищите в Google `ROS drone simulator`. Первая ссылка скорее всего покажет вам страницу `tum_simulator` на [http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\nОна довольно устарела, поэтому лучше найти форк для нашей системы. Поищите в Google `tum_simulator Ubuntu 18 Gazebo 9 fork`. Первый результат - GitHub [репо](https://github.com/tahsinkose/sjtu-drone) с соответствующим пакетом. Скачайте его\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\nНе забудьте добавить команду source в `~/.bashrc`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\nТеперь мы можем запустить симуляцию, чтобы увидеть, что нам нужно сделать, чтобы взять дрона под контроль парачейна.\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. Изучить темы ROS\nКогда симуляция запущена, в новой вкладке выполните следующую команду, чтобы увидеть список тем, используемых дроном:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\nДавайте посмотрим на `/cmd_vel`, `/drone/takeoff` и `/drone/land`:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\nКак можно видеть, должны быть сообщения типов `Twist` и `Empty`, они являются частями `std_msgs` и `geometry_msgs`, мы будем использовать это в контроллере. Ненадолго остановите симуляцию.\n\n## 3. Скачать пакет контроллера\nВ целом, основное отличие от обычного контроллера робота ROS - это блок кода, который проверяет все транзакции в сети с использованием [Robonomics IO](https://wiki.robonomics.network/docs/rinterface/). Сам пакет доступен на GitHub. Скачайте его и постройте рабочее пространство:\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. Управление учетными записями в DAPP\nПоскольку мы проводим тестирование, давайте создадим локальный узел сети robonomics с бинарным файлом robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Важно!** Перед следующими запусками необходимо удалить каталог `db` с\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nПосле успешного запуска создайте учетные записи, следуя инструкции [здесь](https://wiki.robonomics.network/docs/create-account-in-dapp/). **Не забудьте сохранить каждый seed и адрес учетной записи! Вам понадобятся они для транзакций**. Добавьте эти адреса, seed и путь к бинарному файлу robonomics в файл `config.config` в `robonomics_ws/src/robonomics_sample_controller/src`. Переведите некоторые деньги (единицы) на эти счета:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. Запуск дрона под управлением парачейна\n\nДо сих пор **единственное, что запущено** должен быть локальный узел robonomics. В отдельном терминале запустите симуляцию дрона:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nЗапустите скрипт:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\nТеперь вы можете отправить транзакцию, запускающую дрона на полет. Для этого вы должны использовать подкоманду `write` Robonomics IO бинарного файла robonomics:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nГде `<DRONE_ADDRESS>` и `<EMPLOYER’S_KEY>` заменены на ранее сохраненные строки соответственно.\nВы должны увидеть журнал `\"Taking Off\"` и дрон должен начать летать:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\nВот как любой совместимый с ROS робот может быть управляем парачейном Robonomics.\n\n\n##  Часть 2. Сохранение данных в блокчейне\n\n**В этой части мы продолжим использовать инструменты Robonomics, чтобы дрон был управляем парачейном. На этот раз мы добавим отправку данных в IPFS и опции хранения хеша в цепочке. Ниже приведены инструкция и фрагменты кода. Требования:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (инструкция по установке [здесь](http://wiki.ros.org/melodic/Установка))\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22 (скачать с [здесь](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz) и установить)\n</li>\n\n<li class=\"flex\">\n\nУзел Robonomics (бинарный файл) (скачать последний релиз [здесь](https://github.com/airalab/robonomics/releases))\n</li>\n\n<li>Зависимости Python:\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\nВесь процесс написания этой части демонстрации представлен в видео ниже.\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. Добавить зависимости\nЕсли мы запустим симуляцию и посмотрим список тем (см. часть 1), мы увидим, что есть одна тема, содержащая данные передней камеры и использующая тип сообщения `sensor_msgs/Image`:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\nДавайте попробуем сделать фотографию каждую секунду и после полета опубликуем эти фотографии в IPFS. Если вы завершили первое руководство, вам не нужно ничего дополнительно скачивать. Это скрипт `drone_sample_controller_pictures.py`.\n\n## 2. Управление учетными записями в DAPP\nКак сделано в предыдущем руководстве, создайте локальный узел сети robonomics с помощью двоичного файла robonomics:\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Важно!** Перед следующими запусками необходимо удалить каталог `db` с\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nПосле успешного запуска создайте учетные записи, следуя инструкции [здесь](https://wiki.robonomics.network/docs/create-account-in-dapp/). **Не забудьте сохранить каждый seed и адрес учетной записи! Вам понадобятся они для транзакций**. Добавьте эти адреса, seed и путь к бинарному файлу robonomics в файл `config.config` в `robonomics_ws/src/robonomics_sample_controller/src`. Переведите некоторые деньги (единицы) на эти счета:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. Запуск\nДо сих пор **единственное, что запущено** должен быть локальный узел robonomics. В отдельном терминале запустите симуляцию дрона:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nЗапустите ipfs демон:\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nЗапустите скрипт:\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\nТеперь вы можете отправить транзакцию, запускающую дрон для полета и съемки фотографий. Для этого вам следует использовать подкоманду `write` Robonomics IO двоичного файла robonomics:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nГде `<DRONE_ADDRESS>` и `<EMPLOYER’S_KEY>` заменены на ранее сохраненные строки соответственно.\nВы должны увидеть журнал `\"Взлет\"`, и дрон должен начать летать и снимать фотографии:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\nПозже, когда работа будет выполнена, на портале Robonomics перейдите в `Разработчик` -> `Состояние цепи` и добавьте даталог `DRONE`, используя кнопку `“+”` с выбранным `datalog` в качестве запроса состояния. Хэш IPFS телеметрии был сохранен в блокчейне. Чтобы увидеть данные, просто скопируйте хэш и добавьте его в локальный [шлюз](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/) адрес `localhost:8080/ipfs/`:\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"ru/learn/connect-any-ros-compatible-drone/overview.md","name":"overview"},"defaultName":"Connect ROS-compatible drone","lastUpdate":"Thu May 04 2023 12:52:55 GMT+0400 (Samara Standard Time)"}},"context":{}}