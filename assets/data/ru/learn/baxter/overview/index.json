{"hash":"5d4f08f99729279cbad41c23c8d66dce511a8ae5","data":{"course":{"id":"75c2373683964b17dd9490b6a7d42bed","title":"Управление роботом Бакстер","description":"Управление роботом Бакстер","content":"Пример того, как это работает:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## Требования:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (руководство по установке здесь)  \n\n</li>\n\n<li>дополнительные пакеты:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effилиt-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS до 0.6.0 (скачать отсюда и установить)\n\n</li>\n\n<li> пакеты python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nСкачать последний релиз узла Robonomics здесь (последний протестированный релиз v1.1)\n\n</li>\n\n<li>Расширение браузера IPFS (не обязательно)</li>\n\n</List>\n\n<br/>\n\n## 0. установите расширение CV Bridge для python3.\n\n<List>\n\n<li> Создать рабочее пространство catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Инструкция catkin по установке переменных cmake. Используйте вашу текущую версию `python`. Для меня это `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Клонировать исходный код cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Найти версию cv_bridge в вашем репозитории:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Переключиться на правильную версию в git-репозитории. В нашем случае это 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Сборка:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Расширение среды новым пакетом:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Тест:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. Скачать пакеты симуляции и контроллера\nСкачать пакеты:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nНе забудьте добавить команду source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Запустить симуляцию\nДавайте запустим мир gazebo и поместим нашего бакстера в него:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nОткройте еще одно окно в терминале:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nВы можете поставить некоторые модели перед нашим бакстером. Это будет более интересно.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Управление учетными записями в DAPP\n\nПоскольку мы проводим тестирование, давайте создадим локальную сеть робономики с помощью двоичного файла робономики. Перейдите в папку с файлом робономики и запустите:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nПерейдите на портал Робономики Парачейн и переключитесь на локальный узел\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nПерейдите в раздел Учетные записи и создайте учетные записи __Baxter__ и __Работодатель__ (__Робот__ не обязателен)\n\n__Важно!__ Скопируйте каждый **Мнемонический** и **адрес** учетной записи (для копирования адреса щелкните по значку учетной записи). **Мнемонический** - это закрытый ключ для учетной записи.\nПереведите немного денег (единиц) на эти учетные записи:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nДобавьте **Мнемонический** и **адрес** Бакстера в `config.yaml` в `robot_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Запустить симуляцию\n\nЗапустите в новом окне:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nОткройте отдельный терминал и запустите *пакет контроллера*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nТеперь вы можете отправить транзакцию, запускающую бакстер на движение и сбор данных. Для этого вы можете использовать тот же портал Робономики Парачейн. Перейдите в **Разработчик->Экстрансики** и выберите учетную запись работодателя Бакстера, экстрансик `launch`, учетную запись Бакстера в качестве целевой учетной записи и `yes` в качестве параметра. Отправьте экстрансик.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nРобот должен начать двигаться. Он не будет принимать команды от других учетных записей и команды с параметром `no`.\nВы должны увидеть следующее:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nкогда работа закончится, перейдите на портал Робономики в `Разработчик > Состояние цепи`. Выберите `datalog.datalogItem(AccountId,u64)` в **запросе состояния**. Если вы хотите показать все данные журнала, то отключите `включить опцию`, добавьте просмотр сообщения журнала Бакстера, используя кнопку \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nТеперь хэш IPFS телеметрии и фотографий сохранен в блокчейне. Чтобы увидеть данные, просто скопируйте хэш и вставьте его в строку поиска с URL: gateway.ipfs.io/ipfs/<вставьте ваш хэш здесь >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\nНажмите  __Просмотр на шлюзе__ и это все!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Симуляция Бакстера v2.0\n\nПример работы:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## Требования:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (руководство по установке здесь)  \n\n</li>\n\n<li>дополнительные пакеты:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS до 0.6.0 (скачать отсюда и установить)\n\n</li>\n\n<li> пакеты python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nУзел Robonomics (двоичный файл) (скачать последний релиз здесь)\n\n</li>\n\n<li class=\"flex\">\n\nСоздайте учетные записи __Baxter__ и __Работодатель__ на **Портале Робономики** (вы можете найти учебник \"Создать учетную запись на Портале Робономики\" здесь).\n</li>\n\n<li>Расширение браузера IPFS (не обязательно)</li>\n\n</List>\n\n<br/>\n\n## 0. установить расширение CV Bridge для python3\n\n<List>\n\n<li> Создать рабочее пространство catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Инструкция catkin по установке переменных cmake. Используйте вашу текущую версию `python`. Для меня это `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Клонировать исходный код cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Найти версию cv_bridge в вашем репозитории:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Переключиться на правильную версию в git-репозитории. В нашем случае это 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Сборка:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Расширение среды новым пакетом:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Тест:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. Скачать пакеты симуляции и контроллера\nНам нужно создать 2 рабочих пространства - одно для основных пакетов Бакстера и другое для основной программы управления.\nПервое рабочее пространство. Это основная программа управления. Она будет работать под python3.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nВторое рабочее пространство. Здесь будут все пакеты Бакстера. Симуляция очень старая, поэтому она может работать только под python2.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nЭти пакеты были созданы для ROS indigo. Нам нужно изменить некоторые файлы, чтобы запустить их на ROS melodic.\nМы будем использовать файлы **patch**.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nИ давайте соберем все наши пакеты:  \nСначала соберите пакеты Бакстера\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nЗатем вернитесь в первое рабочее пространство и также соберите его:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nНе забудьте добавить команду source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Запустить симуляцию\n### Давайте начнем нашу симуляцию:\nСначала перейдите в `robot_ws` и скопируйте и отредактируйте baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nНайдите свой локальный IP-адрес с помощью команды:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\nОтредактируйте следующие значения в `baxter.sh` :\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- your_ip - введите свой локальный IP-адрес. См. `ip a`\n- ros_version - например \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nЗапустите скрипт оболочки бакстера с указанием sim:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nВы можете поставить некоторые модели перед нашим бакстером. Это будет более интересно.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Управление учетными записями в DAPP\n\nПоскольку мы проводим тестирование, давайте создадим локальную сеть робономики с помощью двоичного файла робономики. Перейдите в папку с файлом робономики и запустите:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nПерейдите на портал Робономики Парачейн и переключитесь на локальный узел\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nПерейдите в Учетные записи и создайте учетные записи __Baxter__ и __Работодатель__.\n\nВы можете найти руководство \"Создать учетную запись на Портале Робономики\" здесь\n\n__Важно!__ Скопируйте каждый **Мнемонический** и **адрес** учетной записи (для копирования адреса щелкните по значку учетной записи). **Мнемонический** - это закрытый ключ для учетной записи.\n\nПереведите немного денег (единиц) на эти учетные записи:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nДобавьте **мнемонику** и **адрес** Бакстера в `config.yaml` в `robonomics_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Запустить симуляцию\n\nЗапустите в новом окне:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nОткройте отдельный терминал и запустите *пакет контроллера*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nТеперь вы можете отправить транзакцию, запускающую движение Бакстера и сбор данных. Для этого вы можете использовать тот же портал [Robonomics Parachain portal][db5]. Перейдите в **Разработчик->Экстрансиксы** и выберите учетную запись работодателя Бакстера, экстрансикс `launch`, учетную запись Бакстера в качестве целевой учетной записи и `yes` в качестве параметра. Отправьте экстрансикс.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nРобот должен начать двигаться. Он не будет принимать команды от других учетных записей и команды с параметром `no`.\nВы должны увидеть следующее:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nКогда работа закончится, перейдите на портал Robonomics в `Разработчик > Состояние цепи`. Выберите `datalog.datalogItem(AccountId,u64)` в **запросе состояния**. Если вы хотите показать все данные журнала, то отключите `включить опцию`, добавьте просмотр сообщения журнала Бакстера, используя кнопку \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nТеперь IPFS-хеш телеметрии и фотографий сохранен в блокчейне. Чтобы увидеть данные, просто скопируйте хеш и вставьте его в строку поиска с URL:  \n#### gateway.ipfs.io/ipfs/<вставьте ваш хэш здесь>\n\nВот и все!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/Установка>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"ru/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}