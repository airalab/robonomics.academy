{"hash":"39646b78023bddea786f995e516360c6cbdb9af0","data":{"course":{"id":"0c6fa96145482e680fc9043ad72e99bc","title":"Подключите марсоход Curiosity","description":"Подключите марсоход Curiosity под управлением Robonomics parachain.","content":"\n**Давайте посмотрим, как управление Robonomics Parachain позволяет двигать марсоход Curiosity. Требования:**\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (инструкция по установке [здесь](http://wiki.ros.org/melodic/Установка))\n\n</li>\n\n\n<li>дополнительные пакеты:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n  sudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS до [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n\n</li>\n\n<li class=\"flex\">\n\n[Сопутствующее расширение IPFS](https://github.com/ipfs/ipfs-companion)\n\n</li>\n\n<li class=\"flex\">\n\nУзел Robonomics (исполняемый файл) (скачать последнюю версию [здесь](https://github.com/airalab/robonomics/releases). Этот учебник успешно протестирован на v1.1)\n\n</li>\n\n</List>\n\n<br/>\n\nВот видео успешного запуска:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n\n<br/>\n\n### 1. Настройка симуляции\n\nСкачать пакет марсохода Curiosity:\n<LessonCodeWrapper language=\"bash\">\n  mkdir -p robonomics_ws/src\n  cd robonomics_ws/src\n  git clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\n  cd ..\n  catkin build\n</LessonCodeWrapper>\n\nНам нужно настроить начальные условия, чтобы наш марсоход появился плавно:\n\n<List>\n\n<li>Перейдите в\n\n`src/master/curiosity_mars_rover_description/worlds` и измените строку 14 файла` mars_curiosity.world` to \n`<pose>0 0 8 0 0 0</pose>`\n\n</li>\n\n<li>Перейдите в\n\n`src/master/curiosity_mars_rover_description/launch` и измените строку 4 файла `mars_curiosity_world.launch` на \n`<arg name=\"paused\" default=\"false\"/>`\n\nНе забудьте добавить исходную команду в `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n</li>\n\n<li> Перезагрузите консоль и запустите симуляцию:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\n  roslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/rover.jpg\" alt=\"Mars rover\"/>\n\n</li>\n\n</List>\n\nПримечание: если изображение темное, например, затененное, измените `Камера` на `Ортографическая` в панели инструментов Gazebo.\nСимуляцию можно закрыть на некоторое время.\n\n------------\n\n<br/>\n\n### 2. Скачать пакет управления Robonomics\nЧтобы скачать пакет управления для Rover, введите в терминале:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n</LessonCodeWrapper>\n\n\n------------\n\n<br/>\n\n### 3. Управление учетными записями в DAPP\nПоскольку мы проводим тестирование, давайте создадим локальную сеть robonomics с помощью исполняемого файла robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n  ./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/robonomics.jpg\" alt=\"Запуститьning node\"/>\n\n\nПерейдите на портал [Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) и переключитесь на локальный узел \n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/local_node.jpg\" alt=\"Local node\"/>\n\n\nПерейдите в Учетные записи и создайте учетные записи **CURIOSITY** и **EMPLOYER**.\n\n**Важно**! Скопируйте адрес каждой учетной записи (для копирования адреса нажмите на значок учетной записи) и **мнемоническую фразу** учетной записи Curiosity (полученную при создании учетной записи)\nПереведите немного денег (единиц) на эти учетные записи. Вы можете узнать больше о учетных записях в Robonomics [здесь](https://wiki.robonomics.network/docs/en/create-account-in-dapp/)\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/account_creation.jpg\" alt=\"Account creation\"/>\n\n\nДобавьте эти адреса, мнемоническую фразу и адрес узла (по умолчанию `ws://127.0.0.1:9944` для узла разработчика) в `config.config` в `robonomics_ws/src/robonomics_sample_controller/src`. Без кавычек.\n\n------------\n\n<br/>\n\n### 4. Запуск Robonomics\n\nПрежде чем продолжить, убедитесь, что у вас установлено [расширение IPFS Companion](https://github.com/ipfs/ipfs-companion).\n\nВ отдельном терминале запустите IPFS:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nifps init #вам нужно сделать это только один раз при установке IPFS\nipfs daemon\n</LessonCodeWrapper>\n\nВ другом отдельном терминале запустите симуляцию Curiosity, если она не активна:\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\nПодождите, пока она остановится\n\nВ другом терминале запустите контроллер:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nrosrun robonomics_sample_controller sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/controller.jpg\" alt=\"Controller\"/>\n\nТеперь вы можете отправить транзакцию, запускающую марсоход для начала движения и сбора данных. Для этого вы можете использовать тот же [портал Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/).\nПерейдите в `Разработчик->Экстрансиксы` и выберите учетную запись работодателя Curiosity, экстрансикс `launch`, учетную запись Curiosity в качестве целевой учетной записи и `yes` в качестве параметра.\nОтправьте экстрансикс.\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/extrinsic.jpg\" alt=\"Extrinsic\"/>\n\nРобот должен начать движение. Он не будет принимать команды от других учетных записей и команды с параметром `no`. Марсоход будет перемещаться и собирать данные примерно минуту.\nПозже, когда работа будет выполнена:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/job_done.jpg\" alt=\"Job done\"/>\n\n\nНа портале Robonomics перейдите в `Разработчик -> Состояние цепи` и получите `CURIOSITY` даталог, используя кнопку “+” с выбранным `datalog -> RingBufferItem` в качестве запроса: \n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/datalog.jpg\" alt=\"Datalog\"/>\n\n\nТеперь хэш IPFS телеметрии сохранен в блокчейне. Чтобы увидеть данные, просто скопируйте хэш и найдите его на шлюзе:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/data_in_ipfs.jpg\" alt=\"Data in IPFS\"/>\n\n\nЭта телеметрия хранится в децентрализованном хранилище, и ее хэш хранится в блокчейне!\n","fileInfo":{"path":"ru/learn/connect-mars-curiosity-rover/overview.md","name":"overview"},"defaultName":"Connect Mars Curiosity Rover","lastUpdate":"Thu May 18 2023 10:41:00 GMT+0400 (Samara Standard Time)"}},"context":{}}