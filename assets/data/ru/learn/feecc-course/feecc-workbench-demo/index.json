{"hash":"66c202d3783d3c594c78856019b23f3916cdea2f","data":{"course":{"id":"9de5937ff6c90cb960bdf01391b3f0f3","title":"Демонстрация Feecc","description":"Этот курс посвящен знакомству с системой Feecc и всеми ее компонентами.","content":"\n<RoboAcademyText fWeight=\"500\">\nВ этом уроке вы протестируете основные функции Feecc, используя виртуальное испытательное поле в качестве примера, которое эмулирует реальный пример системы отслеживания производства.\n</RoboAcademyText>\n\nДля целей демонстрации в нем отсутствуют некоторые типичные функции, такие как печать этикеток или запись видео, но он содержит основную концепцию такой системы.\n\n## Предварительные требования\n\nДля запуска демонстрации вам понадобится:\n\n- Система подобная UNIX (протестировано на [Ubuntu 22.04.2](https://releases.ubuntu.com/jammy/))\n- [Docker](https://docs.docker.com/engine/install/ubuntu/) и [Docker compose](https://docs.docker.com/compose/)\n- Веб-браузер (протестировано в Google Chrome и Mozilla Firefox)\n\n## Установка\n\nВыполните следующие команды:\n\n<LessonCodeWrapper language=\"bash\">\ngit clone https://github.com/Multi-Agent-io/feecc-academy\ncd feecc-academy\nsudo docker compose up -d --build\n</LessonCodeWrapper>\n\nЧтобы проверить работающие контейнеры, выполните следующее:\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker ps -a\n</LessonCodeWrapper>\n\nВы должны увидеть следующий вывод:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\" noLines noCopyIcon>\nCONTAINER ID   IMAGE                               COMMAND                  CREATED          STATUS                             PORTS     NAMES\n0db8382bb271   feecc-academy-workbench-daemon      \"uvicorn app:app --h…\"   19 seconds ago   Up 7 seconds (healthy)                       feecc_academy_workbench_daemon\n0dbc7bb977d1   feecc-academy-workbench-frontend    \"node nodeServer.js\"     20 seconds ago   Up 19 seconds (health: starting)             feecc_academy_workbench_frontend\na74fa229eb90   robonomics/robonomics:sha-bd71a23   \"robonomics --dev --…\"   20 seconds ago   Up 19 seconds (health: starting)             feecc_academy_robonomics_node\n0c9e8022658a   mongo:jammy                         \"docker-entrypoint.s…\"   20 seconds ago   Up 19 seconds (healthy)                      feecc_academy_mongoDB\n6b0748904d0f   ipfs/go-ipfs:v0.17.0                \"/sbin/tini -- /usr/…\"   20 seconds ago   Up 19 seconds (healthy)                      feecc_academy_ipfsnode\n814e6f489a77   nyurik/alpine-python3-requests      \"tail -f /dev/null\"      20 seconds ago   Up 19 seconds                                feecc_academy_hid_emulator\n</LessonCodeWrapper>\n\n## Запуск демонстрации\n\n1. Перейдите на http://localhost:3000/ в своем браузере, вы должны увидеть экран приветствия.\n\n2. На этом этапе система должна попросить сотрудника поместить свою RFID-карту на сканер для авторизации. В демонстрации вы можете использовать `hid-emulator.py` для авторизации. Для этого запустите отдельный контейнер Docker:\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker exec -ti feecc_academy_hid_emulator sh\npython3 hid-emulator.py\n</LessonCodeWrapper>\n\nОн способен эмулировать две функции: предоставление RFID-карты и сканирование штрихкода; вам нужна первая функция, введите `1`.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\" noLines noCopyIcon>\n> Select emulated action (1/2): \n>  1. Put ID card on the Сканер RFID.\n>  2. Scan a sample barcode with a barcode scanner.\n> 1\n> INFO:2023-03-21 21:42:05,370:Event relayed to endpoint http://127.0.0.1:5000/workbench/hid-event\n</LessonCodeWrapper>\n\n3. Вы увидите экран выбора типа композиции, выберите `ОДИНОЧНОЕ УСТРОЙСТВО`.\n\n<LessonImages src=\"feecc-course/menu.png\" alt=\"Feecc start menu\"/>\n\n4. Уведомления появятся в левом нижнем углу, указывая на начало работы на устройстве, для которого создается уникальный идентификатор. Синее уведомление также отобразит активность виртуального принтера; на фактической установке в это время будет напечатан штрих-код с идентификатором устройства.\n\n<LessonImages src=\"feecc-course/single_device.png\" alt=\"Single device composition\"/>\n\n5. Нажмите на `НАЧАТЬ СОСТАВЛЕНИЕ`, чтобы начать запись процесса сборки устройства. Вам будет предложено пройти все необходимые этапы сборки; каждый раз, когда сотрудник завершает шаг, он должен нажать кнопку `ДАЛЕЕ`, после чего видео будет сохранено в IPFS. Также возможно приостановить сборку (`ПАУЗА`), чтобы вернуться к ней позже или полностью остановить процесс (`СТОП`).\n\n6. Когда все этапы сборки завершены, появляется кнопка `ЗАВЕРШИТЬ`, после чего Feecc предлагает сохранить сертификат устройства. Однако, прежде чем это сделать, откройте [локальный узел Robonomics](https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/explorer) в вашем браузере, вам это понадобится позже. После этого вернитесь в Feecc и нажмите `СОХРАНИТЬ ПАСПОРТ`.\n    \n    На экране появятся новые уведомления: уведомление о загрузке сертификата в Robonomics и IPFS, а также два синих сообщения о печати печати печати и QR-кода, ведущего к сертификату.\n\n<LessonImages src=\"feecc-course/single_certificate.png\" alt=\"Cetrificate of single composition\"/>\n\n7. В разделе `Информация о цепочке` на экране локального узла Robonomics вы должны увидеть новое событие `datalog.NewRecord` в столбце `последние события`. Если вы его развернете, то в поле `байты` будет показан IPFS CID, соответствующий файлу сертификата устройства.\n\n<LessonImages src=\"feecc-course/single_datalog.png\" alt=\"Datalog of single composition\"/>\n\nНапечатанный QR-код содержит ссылку на этот CID, что позволяет открыть файл сертификата в браузере. Поскольку ваш локальный узел IPFS может не иметь такой обнаружимости, вы можете получить доступ к файлу локально с помощью `localhost:8080/ipfs/CID.` Содержимое сертификата выглядит примерно так:\n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\" noLines noCopyIcon>\nUnit Unique Code: 423d3c1b42f6427e80cc881a16e07451\nUnit Model Name: Single Device\nTotal Assembly Time: 0:05:37\nProduction Stages:\n- Name: Prepare Tools (not finished.)\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:38:47\n  Finish Time: 26-06-2023 17:40:28\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Prepare Tools (not finished.)\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:40:30\n  Finish Time: 26-06-2023 17:42:06\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Prepare Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:42:16\n  Finish Time: 26-06-2023 17:43:00\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Saw Through the Single Device\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:43:00\n  Finish Time: 26-06-2023 17:43:51\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Stack Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:43:51\n  Finish Time: 26-06-2023 17:44:36\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n</LessonCodeWrapper>\n\n8. Давайте теперь попробуем создать сертификат для составной сборки, состоящей из нескольких устройств. В меню выбора типа нажмите на `СОСТАВНОЕ УСТРОЙСТВО`, а затем `ОБРАЗЕЦ УСТРОЙСТВА`. Скопируйте его идентификатор устройства (находится в поле Номер композиции), так как вам это понадобится позже. Затем продолжайте стандартные шаги по сборке устройства.\n\n9. После сборки вернитесь к `СОСТАВНОМУ УСТРОЙСТВУ` и нажмите `ОКОНЧАТЕЛЬНАЯ СБОРКА`, чтобы завершить составную сборку. Система попросит вас предоставить идентификатор устройств, собранных сотрудником, для которого необходимо отсканировать их штрих-код. Чтобы симулировать этот процесс, вернитесь к `hid-emulator.py` и выберите функцию `2` для сканирования штрих-кода и вставьте сохраненный идентификатор устройства туда.\n\n10. Затем система попросит пройти необходимые этапы составной сборки и сгенерировать для нее сертификат:\n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\" noLines noCopyIcon>\nUnit Unique Code: d08101feae7c4efbb5529885c9ad544b\nUnit Model Name: Composite Device\nTotal Assembly Time: 0:00:03\nProduction Stages:\n- Name: Prepare Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 18:18:25\n  Finish Time: 26-06-2023 18:18:26\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Tape the Sample Device to the base plate\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 18:18:26\n  Finish Time: 26-06-2023 18:18:27\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Stack Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 18:18:27\n  Finish Time: 26-06-2023 18:18:28\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\nUnit Components:\n- Unit Unique Code: b165b382c3674127a6aaf5817c5a7040\n  Unit Model Name: Sample Device\n  Total Assembly Time: 0:00:03\n  Production Stages:\n  - Name: Prepare Tools\n    Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n    Start Time: 26-06-2023 18:17:45\n    Finish Time: 26-06-2023 18:17:46\n    Assembly data in IPFS: This is a place for any production data, let it be video\n      record, some sensor data or any other data collection representing the production\n      process.\n  - Name: Assemble Sample Device\n    Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n    Start Time: 26-06-2023 18:17:46\n    Finish Time: 26-06-2023 18:17:47\n    Assembly data in IPFS: This is a place for any production data, let it be video\n      record, some sensor data or any other data collection representing the production\n      process.\n  - Name: Stack Tools\n    Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n    Start Time: 26-06-2023 18:17:47\n    Finish Time: 26-06-2023 18:17:48\n    Assembly data in IPFS: This is a place for any production data, let it be video\n      record, some sensor data or any other data collection representing the production\n      process.\nTotal Assembly Time (Including Components): 0:00:06\n</LessonCodeWrapper>\n\n11. Чтобы удалить демонстрацию, введите команду:\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker compose down --rmi all && docker builder prune -f\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"500\">\nНа следующем уроке мы перейдем к фактическому развертыванию всех необходимых компонентов системы Feecc.\n</RoboAcademyText>","fileInfo":{"path":"ru/learn/feecc-course/feecc-workbench-demo.md","name":"feecc-workbench-demo"},"defaultName":"Getting Used to Feecc","lastUpdate":null}},"context":{}}