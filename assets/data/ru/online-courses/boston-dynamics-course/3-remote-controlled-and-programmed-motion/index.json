{"hash":"99879be177eb70bfb40ba40c80d07a5709d5c00f","data":{"course":{"id":"efa3a0a6e9672f04740f3002f9cb35a8","courseID":2,"title":"Урок #3, дистанционное управление и запрограммированное движение","description":"На втором уроке вы узнаете, как использовать службы Spot Command и гулять со Spot.","content":"\n<section class=\"container__reg\">\n\n## О чем вы узнаете\n\nНа втором уроке вы узнаете, как использовать службы Spot Command и гулять со Spot.\n\n</section>\n\n\n<section class=\"container__reg\">\n\n## Задача\n\nУ вас есть список точек с их локальными координатами в директории <code>/home/student/lessons</code>.\n\nСписок движений:\n\n<List>\n<li>Кружиться вокруг себя</li>\n<li>Кивать</li>\n<li>Изменить положение ног робота</li>\n<li>Перейти к следующей точке</li>\n<li>Лечь в позу для замены батареи (эта команда должна выполняться последней, потому что она отключает питание двигателей).</li>\n</List>\n\n<br>\n\nВы можете найти локальные координаты Spot с помощью кода: (прежде чем вам понадобится создать  <code>state_client</code>, вы можете найти информацию об этом в разделе [Understanding Spot Programming](https://dev.bostondynamics.com/docs/python/understanding_spot_programming)):\n\n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\nfrom bosdyn.client.frame_helpers import get_vision_tform_body\nget_vision_tform_body(state_client.get_robot_state().kinematic_state.transforms_snapshot\n</lessonCodeWrapper>\n\n</section>\n\n<section class=\"container__reg\">\n\n## Инструкция\n\n<List type=\"numbers\">\n\n<li>\n\nВы можете управлять Spot с помощью <code>Robot Command Service</code>. Во-первых, вам нужно создать команду, чтобы предоставить ее службе команд. Для Spot SDK есть специальный класс <code>RobotCommandBuilder</code>.\n\nПолный список методов и их описание вы можете найти [здесь](https://github.com/boston-dynamics/spot-sdk/blob/7ce5c5f31f4e1e45e9ff4be29fb097e258b75919/python/bosdyn-client/src/bosdyn/client/robot_command.py#L593). В этом уроке вам понадобится:\n\n\\- Команда стоять\n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\ndef stand_command(params=None, body_height=0.0, footprint_R_body=geometry.EulerZXY())\n</lessonCodeWrapper>\n\n\\- Перейти к точке \n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\ndef synchro_se2_trajectory_point_command(goal_x, goal_y, goal_heading, frame_name, params=None, body_height=0.0, locomotion_hint=spot_command_pb2.HINT_AUTO, build_on_command=None)\n</lessonCodeWrapper>\n\nПроверка использования [здесь](https://github.com/boston-dynamics/spot-sdk/blob/master/python/examples/frame_trajectory_command/frame_trajectory_command.py).\n\nВнимание! В примере рассматривается движение робота относительно текущего положения. В вашем случае необходимо указать движения относительно точки включения робота. Это означает, что вы можете установить значения <code>goal_x</code> и <code>goal_y</code> из задачи.\n\n\\- Команда скорости\n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\ndef synchro_velocity_command(v_x, v_y, v_rot, params=None, body_height=0.0, locomotion_hint=spot_command_pb2.HINT_AUTO, frame_name=BODY_FRAME_NAME\n</lessonCodeWrapper>\n\n\\- Команда положения ног\n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\ndef stance_command(se2_frame_name, pos_fl_rt_frame, pos_fr_rt_frame, pos_hl_rt_frame, pos_hr_rt_frame, accuracy=0.05, params=None, body_height=0.0, footprint_R_body=geometry.EulerZXY(), build_on_command=None)\n</lessonCodeWrapper>\n\nПример использования [здесь](https://github.com/boston-dynamics/spot-sdk/blob/91ed30607264e795699995d6d7834ba0c8a94d36/python/examples/stance/stance_in_place.py).\n\n\n\\- Поза для замены батареи\n\n<code>def battery_change_pose_command(dir_hint=1)</code>\n\nПример построения и запуска команды скорости:\n\n<lessonCodeWrapper language=\"python\" codeClass=\"big-code\">\nfrom bosdyn.client.robot_command import RobotCommandClient, RobotCommandBuilder\nimport time\n\ncommand_client=robot.ensure_client(RobotCommandClient.default_service_name)\ncmd=RobotCommandBuilder.velocity_command(0.5, 0, 0.5)\ncommand_client.robot_command(cmd, end_time_secs=time.time() + 2)\n</lessonCodeWrapper>\n\n</li>\n\n<li>\nПодключитесь к Spot с терминала или с помощью функции удаленного выполнения вашей среды разработки.\n</li>\n\n<li>\n\nРазработайте и продемонстрируйте свое решение задачи.\n\nМы создаем [конечную точку E-Stop](https://dev.bostondynamics.com/python/examples/estop/readme) для вас, поэтому вам не нужно ее создавать. Для аутентификации Spot используйте имя пользователя и пароль из файла - <code>/home/student/credentials</code>. Адрес Spot: <code>192.168.50.3</code>.\n\n</li>\n\n</List>\n</section>\n\n<section class=\"container__reg\">\n\n### Готовы приступить к практике?\n\nКак только почувствуете, что готовы, вы можете купить часовой практический сеанс, указав свои учетные данные для доступа (SSH-ключ) и время, когда вы хотите подключиться к Spot для решения задачи.\n\n##### <LessonButtonLink src=\"https://dapp.spot-sdk.education/#/checkout\" text=\"Арендовать Spot\" />\n\n</section>","fileInfo":{"path":"ru/online-courses/boston-dynamics-course/3-remote-controlled-and-programmed-motion.md","name":"3-remote-controlled-and-programmed-motion"},"lessonNumber":3}},"context":{}}