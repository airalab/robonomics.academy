{"hash":"94f13789db7ff3910ce38bd85f3d1c9bd0ae6890","data":{"course":{"id":"b428d58e402247f3bf5dd5128ee1e117","title":"쿠카 조작기 연결","description":"조작기 연결","content":"\n작업 예제 비디오는 여기에서 찾을 수 있습니다:\n\nhttps://youtu.be/z55HepXbHr8\n\n<br/>\n\n***\n\n<br/>\n\n## 요구 사항\n\n<List>\n\n<li class=\"flex\">\n\nROS 멜로딕, Gazebo (설치 지침 [여기](http://wiki.ros.org/melodic/설치/Ubuntu))\n</li>\n\n<li>일부 추가 패키지\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li> IPFS 0.4.22 \n\n(여기에서 다운로드(https://www.npackd.org/p/ipfs/0.4.22)하고 설치)\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>pip3\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt-get install python3-pip\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li>substrate-interface\n\n<LessonCodeWrapper language=\"bash\">\npip3 install substrate-interface\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics 노드 (바이너리 파일) (최신 릴리스 다운로드 [여기](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n<li>IPFS 브라우저 확장 프로그램 (필수 아님)</li>\n\n</List>\n\n<br/>\n\n***\n\n<br/>\n\n## 설치\n쿠카 조작기 및 제어 패키지 설치\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">cd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make</LessonCodeWrapper>\n\n***\n\n<br/>\n\n## 게이즈보 모델 실행\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n</LessonCodeWrapper>\n\n새 창에서\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun manipulator_gazebo move_arm_server\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/1.png\" alt=\"model\"/>\n\n***\n\n<br/>\n\n## 로보노믹스 실행\n로보노믹스 파일이 있는 폴더로 이동하여 로컬 로보노믹스 네트워크 생성:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/robonomics.png\" alt=\"robonomics\"/>\n\n[로보노믹스 파라체인 포털](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/)로 이동하여 로컬 노드로 전환\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/local.png\" alt=\"local\"/>\n\n그런 다음 계정으로 이동하여 `KUKA` 계정을 생성하십시오. 계정의 니모닉 키를 저장하십시오. 나중에 필요합니다. \n\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/create_acc.png\" alt=\"acc\"/>\n\n기본 계정 중 하나에서 새 계정으로 일부 단위를 보내십시오.\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/send_money.png\" alt=\"accs\"/>\n\n***\n<br/>\n\n## IPFS 실행\n실행 ipfs daemon:\n\n<LessonCodeWrapper language=\"bash\">\nipfs daemon\n</LessonCodeWrapper>\n\n***\n\n</br>\n\n## 제어 패키지 실행\nkuka_control 패키지의 구성 디렉토리에서 이 라인이 있는 구성 파일을 만들어야 합니다. 여기서 `<your_mnemonic>`은 저장된 니모닉 시드입니다:\n\n<LessonCodeWrapper language=\"bash\">\n{\n    \"kuka_mnemonic\": \"[your_mnemonic]\",\n    \"node\": \"ws://127.0.0.1:9944\"\n}\n</LessonCodeWrapper>\n\n\n이제 제어 스크립트를 실행할 수 있습니다:\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun kuka_controller move_arm_client.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/run.png\" alt=\"control\"/>\n\n## 트랜잭션 전송\n[로보노믹스 파라체인 포털](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/)에서 `Developer/Extrinsics`로 이동하여 `extrinsic`를 `launch`로 변경하십시오. `robot`에서 `KUKA` 계정을 선택하고 `param`을 `Yes`로 변경하십시오. 그런 다음 `Submit Transaction`을 누르십시오\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/launch.png\" alt=\"transaction\"/>\n\nkuka_control 패키지의 창에서 다음을 볼 수 있습니다:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/res.png\" alt=\"done\"/>\n\n그런 다음 로보노믹스 포털에서 `Developer/Chain State`로 이동하여 `datalog`을 선택하고 쿼리에서 `datalogItem((AccountId,u64)): RingBufferItem`을 선택하고 `KUKA` 데이터로그를 추가하십시오 '+':\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/datalog.png\" alt=\"datalog\"/>\n\n이제 IPFS에서 로봇의 텔레메트리를 이 링크를 통해 찾을 수 있습니다. 당신의 해시로 `https://gateway.ipfs.io/ipfs/<hash>`\n\n## 문제 해결\n\n`catkin_make`가 MoveArm.h를 찾을 수 없다는 메시지와 함께 작동하지 않는 경우, kuka_manipulator_gazebo 패키지의 CMakeLists.txt에서 마지막 네 줄을 제거하려고 시도하십시오:\n\n<LessonCodeWrapper language=\"yaml\">\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(move_arm_server src/move_arm_server.cpp)\ntarget_link_libraries(move_arm_server ${catkin_LIBRARIES})\nadd_dependencies(move_arm_server beginner_tutorials_gencpp)\n</LessonCodeWrapper>\n\n이러한 줄을 제거한 상태로 `catkin_make`를 수행한 다음 다시 추가하고 `catkin_make`를 다시 수행하십시오.","fileInfo":{"path":"ko/learn/kuka/overview.md","name":"overview"},"defaultName":"Connect Kuka manipulator","lastUpdate":null}},"context":{}}