{"hash":"1eafca61b16c3525f2f7c5d47de816b7adf0794c","data":{"course":{"id":"e05b3ce37cfa456c17d2e461c25d5843","title":"백스터 로봇 제어","description":"백스터 로봇 제어","content":"작동 방식의 예:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## 요구 사항:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (설치 매뉴얼 [여기][db2])  \n\n</li>\n\n<li>추가 패키지:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-eff또는t-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS 최대 0.6.0 (여기서 다운로드 [db3] 및 설치)\n\n</li>\n\n<li> 파이썬 패키지:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\n로보노믹스 노드 최신 [릴리스][db4] 다운로드 (최근 테스트된 릴리스 v1.1)\n\n</li>\n\n<li>IPFS 브라우저 확장 프로그램 (필수 아님)</li>\n\n</List>\n\n<br/>\n\n## 0. Python3용 CV 브리지 확장 설치\n\n<List>\n\n<li> catkin 워크스페이스 생성\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> catkin에 cmake 변수 설정 지시. 현재 버전의 `python`을 사용하십시오. 제 경우에는 `python3.6`입니다:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> cv_bridge 소스 복제:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> 저장소에서 cv_bridge 버전 찾기:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> git 저장소에서 올바른 버전 확인. 우리의 경우에는 1.12.8입니다:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> 빌드:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> 새 패키지로 환경 확장:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> 테스트:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. 시뮬레이션 및 컨트롤러 패키지 다운로드\n패키지 다운로드:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nsource 명령어를 추가하는 것을 잊지 마십시오:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. 시뮬레이션 시작\n가제보 월드를 시작하고 백스터를 넣어봅시다:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\n터미널에서 하나 더 열어봅시다:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\n백스터 앞에 몇 가지 모델을 놓을 수 있습니다. 더 흥미로울 것입니다.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. DAPP에서 계정 관리\n\n테스트 중이므로 로컬 로보노믹스 네트워크 robonomics 이진 파일로 생성합시다. robonomics 파일이 있는 폴더로 이동하여 다음을 실행하십시오:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\n[로보노믹스 파라체인 포털][db5]로 이동하여 로컬 노드로 전환\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\n계정으로 이동하여 __백스터__ 및 __고용주__ 계정을 생성하십시오 (__로봇__은 필요하지 않습니다)\n\n__중요!__ 각 계정의 **니모닉** 및 **주소**를 복사하십시오 (**주소**를 복사하려면 계정 아이콘을 클릭하십시오). **니모닉**은 계정의 개인 키입니다.\n이 계정에 일부 돈(단위)을 이체하십시오:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\n백스터의 **니모닉** 및 **주소**를 `robot_ws/src/Baxter_simulation_controller/config/`의 `config.yaml`에 추가하십시오\n\n## 4. 시뮬레이션 시작\n\n새 창에서 다음을 실행하십시오:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\n별도의 터미널을 열고 *컨트롤러 패키지*를 시작하십시오:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\n이제 백스터가 움직이고 데이터를 수집하기 시작하는 트랜잭션을 보낼 수 있습니다. 이를 위해 동일한 [로보노믹스 파라체인 포털][db5]을 사용할 수 있습니다. **개발자->Extrinsics**로 이동하여 백스터의 고용주 계정을 선택하고 `launch` extrinsic, 백스터의 계정을 대상 계정으로 선택하고 매개 변수로 `yes`를 선택하십시오. Extrinsic을 제출하십시오.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\n로봇은 움직이기 시작해야 합니다. 다른 계정에서의 명령 또는 `no` 매개 변수가 있는 명령을 수락하지 않을 것입니다.\n다음이 표시되어야 합니다:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\n작업이 끝나면 로보노믹스 포털로 이동하여 `개발자 > 체인 상태`로 이동하십시오. **상태 쿼리**에서 `datalog.datalogItem(AccountId,u64)`를 선택하십시오. 모든 데이터로그를 표시하려면 `include 옵션`을 끄고 \"+\" 버튼을 사용하여 백스터의 데이터로그 메시지를 볼 수 있습니다.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\n이제 텔레메트리 및 사진의 IPFS 해시가 블록체인에 저장되었습니다. 데이터를 보려면 해시를 복사하여 URL에 삽입하십시오: gateway.ipfs.io/ipfs/<br 여기에 해시를 입력하십시오 >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\n__게이트웨이에서 보기__를 클릭하면 됩니다!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## 백스터 시뮬레이션 v2.0\n\n작동 방식 예시:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## 요구 사항:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (설치 매뉴얼 [여기][db2])  \n\n</li>\n\n<li>추가 패키지:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS 최대 0.6.0 (여기서 다운로드 [db3] 및 설치)\n\n</li>\n\n<li> 파이썬 패키지:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\n로보노믹스 노드 (이진 파일) (최신 [릴리스][db4] 다운로드)\n\n</li>\n\n<li class=\"flex\">\n\n**로보노믹스 포털**에서 __백스터__ 및 __고용주__ 계정 생성 (튜토리얼 [\"로보노믹스 포털에서 계정 생성하기\"][db8] 여기에서 찾을 수 있음).\n</li>\n\n<li>IPFS 브라우저 확장 프로그램 (필수 아님)</li>\n\n</List>\n\n<br/>\n\n## 0. python3용 CV Bridge 확장 설치\n\n<List>\n\n<li> catkin 워크스페이스 생성\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> catkin에 cmake 변수 설정 지시. 현재 버전의 `python`을 사용하십시오. 제 경우에는 `python3.6`입니다:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> cv_bridge 소스 복제:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> 저장소에서 cv_bridge 버전 찾기:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> git 저장소에서 올바른 버전 확인. 우리의 경우에는 1.12.8입니다:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> 빌드:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> 새 패키지로 환경 확장:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> 테스트:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. 시뮬레이션 및 컨트롤러 패키지 다운로드\n주요 백스터 패키지와 주요 제어 프로그램을 위한 2개의 워크스페이스를 생성해야 합니다.\n첫 번 워크스페이스. 주요 제어 프로그램입니다. python3에서 실행됩니다.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\n두 번째 워크스페이스. 모든 백스터 패키지가 포함될 것입니다. 시뮬레이션이 매우 오래되어 python2에서만 실행될 수 있습니다.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\n이 패키지들은 ROS indigo용으로 만들어졌습니다. ROS melodic에서 실행하려면 일부 파일을 수정해야 합니다.\n**패치** 파일을 사용할 것입니다.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\n그리고 우리 모든 패키지를 빌드합시다:  \n먼저 백스터 패키지를 빌드하십시오\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\n그런 다음 첫 번째 워크스페이스로 돌아가서 빌드하십시오:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nsource 명령어를 추가하는 것을 잊지 마십시오:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. 시뮬레이션 시작\n### 시뮬레이션을 시작해봅시다:\n먼저 `robot_ws`로 이동하여 baxter.sh를 복사하고 편집하십시오\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\n명령어로 로컬 IP 주소를 찾으십시오:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\n`baxter.sh`에서 다음 값을 편집하십시오:\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- your_ip - 로컬 IP 주소를 입력하십시오. `ip a`를 참조하십시오\n- ros_version - 예를 들어 \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nsim을 지정하여 baxter 쉘 스크립트를 실행하십시오:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\n백스터 앞에 몇 가지 모델을 놓을 수 있습니다. 더 흥미로울 것입니다.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. DAPP에서 계정 관리\n\n테스트 중이므로 로컬 로보노믹스 네트워크 robonomics 이진 파일로 생성합시다. robonomics 파일이 있는 폴더로 이동하여 다음을 실행하십시오:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\n[로보노믹스 파라체인 포털][db5]로 이동하여 로컬 노드로 전환\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\n계정으로 이동하여 __백스터__ 및 __고용주__ 계정을 생성하십시오.\n\n\"로보노믹스 포털에서 계정 생성하기\" 매뉴얼은 [여기][db8]에서 찾을 수 있습니다\n\n__중요!__ 각 계정의 **니모닉** 및 **주소**를 복사하십시오 (**주소**를 복사하려면 계정 아이콘을 클릭하십시오). **니모닉**은 계정의 개인 키입니다.\n\n이 계정에 일부 돈(단위)을 이체하십시오:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\n`config.yaml` 파일의 `robonomics_ws/src/Baxter_simulation_controller/config/`에 Baxter의 **기억 코드**와 **주소**를 추가하십시오.\n\n## 4. 시뮬레이션 시작\n\n새 창에서 다음을 실행하십시오:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\n별도의 터미널을 열고 *컨트롤러 패키지*를 시작하십시오:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\n이제 Baxter가 움직이고 데이터를 수집하기 시작하는 트랜잭션을 보낼 수 있습니다. 이를 위해 동일한 포털 [Robonomics Parachain portal][db5]을 사용할 수 있습니다. **개발자->Extrinsics**로 이동하고 Baxter의 고용주 계정을 선택하고, `launch` extrinsic, Baxter의 계정을 대상 계정으로 선택하고 매개 변수로 `yes`를 입력하십시오. Extrinsics를 제출하십시오.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\n로봇은 움직이기 시작해야 합니다. 다른 계정에서의 명령 또는 `no` 매개 변수가 있는 명령을 수락하지 않을 것입니다.\n다음이 표시되어야 합니다:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\n작업이 끝나면 Robonomics 포턈로 이동하여 `개발자 > Chain state`를 선택하십시오. **state query**에서 `datalog.datalogItem(AccountId,u64)`를 선택하십시오. 모든 datalog를 표시하려면 `include option`을 끄고 \"+\" 버튼을 사용하여 Baxter의 datalog 메시지를 볼 수 있습니다.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\n이제 텔레메트리와 사진의 IPFS 해시가 블록체인에 저장되었습니다. 데이터를 보려면 해시를 복사하여 URL이 있는 검색 창에 삽입하십시오:  \n#### gateway.ipfs.io/ipfs/< 여기에 해시 입력>\n\n모두입니다!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/설치>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"ko/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}