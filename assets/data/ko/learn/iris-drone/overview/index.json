{"hash":"0a452ea1a3cc334a5e8ca4f3b7c819e6bb138602","data":{"course":{"id":"fb80ebc0520069d560c159f242d8f4ef","title":"무인 항공기 연결","description":"무인 항공기 연결","content":"\n**트랜잭션 후 드론이 이동을 시작하고 좌표와 함께 파일을 IPFS에 저장합니다. 제어 스크립트는 [GAAS 데모 스크립트](https://github.com/generalized-intelligence/GAAS)를 기반으로 합니다**  \n\nhttps://youtu.be/4CwtGAX1OwM\n\n<br/>\n\n## 요구 사항\n\n<List>\n\n<li> 제어를 위한 종속성:\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt install -y \\\n\tpython3-pip \\\n\tninja-build \\\n\texiftool \\\n\tpython-argparse \\\n\tpython-empy \\\n\tpython-toml \\\n\tpython-numpy \\\n\tpython-yaml \\\n\tpython-dev \\\n\tpython-pip \\\n\tninja-build \\\n\tprotobuf-compiler \\\n\tlibeigen3-dev \\\n\tgenromfs\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\">\npip3 install \\\n\tpandas \\\n\tjinja2 \\\n\tpyserial \\\n\tcerberus \\\n\tpyulog \\\n\tnumpy \\\n\ttoml \\\n\tpyquaternion\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo [설치 튜토리얼](http://wiki.ros.org/melodic/설치)\n</li>\n\n<li>추가 패키지:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\nsudo apt-get install python-jinja2\nsudo apt-get install python-catkin-pkg\nsudo apt-get install python3-catkin-pkg-modules\n</LessonCodeWrapper>\n\n</li>\n\n<li>IPFS 버전 0.4.22\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nwget https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-amd64.tar.gz\ntar -xvzf go-ipfs_v0.4.22_linux-amd64.tar.gz\ncd go-ipfs\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics 노드 (바이너리 파일) (최신 릴리스 다운로드 [여기](https://github.com/airalab/robonomics/releases))\n</li>\n\n</List>\n\n<br/>\n\n## 환경 설정\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nsudo ./install_geographiclib_datasets.sh\ncd ~/catkin_ws/src\ngit clone https://github.com/PX4/Firmware.git\ncd Firmware\ngit checkout v1.9.0\nbash ./Tools/setup/ubuntu.sh\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/catkin_ws/src\ngit clone https://github.com/generalized-intelligence/GAAS.git\ncp -r ~/catkin_ws/src/GAAS/simulator/models/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/models/\ncp -r ~/catkin_ws/src/GAAS/simulator/worlds/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/worlds/\ncp -r ~/catkin_ws/src/GAAS/simulator/posix-config/* ~/catkin_ws/src/Firmware/posix-configs/SITL/init/ekf2/\n</LessonCodeWrapper>\n\n`.bashrc` 파일 수정하여 다음 라인을 맨 아래에 추가하십시오:  \n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash   \nsource ~/catkin_ws/src/Firmware/Tools/setup_gazebo.bash ~/catkin_ws/src/Firmware/ ~/catkin_ws/src/Firmware/build posix_sitl_default \nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware/Tools/sitl_gazebo\nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models:~/catkin_ws/src/GAAS/simulator/models\n</LessonCodeWrapper>  \n\n  \n## 제어 패키지 설치\n새 터미널에서:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd catkin_ws/src\ngit clone https://github.com/tubleronchik/robonomics_drone_sim.git\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\n## Robonomics 네트워크\n\n로컬 robonomics 네트워크를 만들려면 robonomic 바이너리 파일이 있는 폴더로 이동하여 다음을 실행하십시오:  \n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --rpc-cors all\n</LessonCodeWrapper>\n\n`config.py`에 robonomics 경로 추가\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/IPFS.jpg\" alt=\"IPFS\"/>\n\n[Robonomics Parachain 포털](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/)로 이동하여 로컬 노드로 전환하십시오.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/localNode.jpg\" alt=\"localNode\"/>\n\n**계정**으로 이동하여 **DRONE** 및 **EMPLOYER** 계정을 생성하십시오. 계정 이름과 키 및 **robonomics** 경로를 `~/catkin_ws/src/drone_sim/src/config.py`에 저장하십시오. 계정에 일정 금액을 이체하십시오.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/addingAcc.jpg\" alt=\"accounts\"/>\n\n## 시뮬레이션 실행\nIPFS 데몬 실행\n\n<LessonCodeWrapper language=\"bash\">\ncd go-ipfs\nipfs daemon\n</LessonCodeWrapper>\n\n다른 터미널에서 시뮬레이션 시작:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch px4 mavros_posix_sitl.launch\ncd ~/catkin_ws/src/robonomics_drone_sim/src\npython3 takeoff.py\n</LessonCodeWrapper>\n\n\"결제 대기 중\"까지 기다리기 \n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/launch.jpg\" alt=\"launch\"/>\n\n트랜잭션을 보내려면 다른 창에서 다음을 실행하십시오:\n`echo \"ON\" | ./robonomics io write launch -r <drone_addres> -s <employer_key>` - 여기서 **<drone_address>**와 **<employer_key>**는 `config.py`의 문자열로 대체되어야 합니다.\n\n데이터가 IPFS로 전송된 후 [Robonomics Parachain 포털](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/)의 **Chain State**로 이동하십시오. 쿼리에서 **datalog**을 선택하고 `+` 버튼을 사용하여 DRONE 데이터로그를 추가하십시오.\n\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/datalog.jpg\" alt=\"datalog\"/>\n\n위의 해시를 삽입하여 드론의 텔레메트리를 찾을 수 있습니다: `https://gateway.ipfs.io/ipfs/<hash>`\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/output.jpg\" alt=\"output\"/>\n\n다음 발사 시 `db` 디렉토리를 제거하는 것이 중요합니다  \n` rm -rf ~/.local/share/robonomics/chains/dev/db`","fileInfo":{"path":"ko/learn/iris-drone/overview.md","name":"overview"},"defaultName":"Connect unmanned aerial vehicle","lastUpdate":"Thu May 04 2023 12:53:05 GMT+0400 (Samara Standard Time)"}},"context":{}}