{"hash":"b7127cfb676a767c419fa0b68f47fd3dddba7323","data":{"course":{"id":"266505586a161853bbcf207bd737774a","title":"控制 Baxter 机器人","description":"控制 Baxter 机器人","content":"其工作原理示例：\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## 要求:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (安装手册[这里][db2])  \n\n</li>\n\n<li>额外的软件包:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-eff或t-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS 高达 0.6.0 (从[这里][db3]下载并安装)\n\n</li>\n\n<li> Python 软件包:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics 节点下载最新的[发布][db4]在这里(上次测试的发布版本为 v1.1)\n\n</li>\n\n<li>IPFS 浏览器扩展(不是必需的)</li>\n\n</List>\n\n<br/>\n\n## 0.安装python3的CV Bridge扩展\n\n<List>\n\n<li> 创建 catkin 工作空间\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> 指导 catkin 设置 cmake 变量。使用您当前的 `python` 版本。对我来说，它是 `python3.6`\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> 克隆 cv_bridge 源码:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> 在您的存储库中找到 cv_bridge 的版本:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> 在 git 存储库中检出正确的版本。在我们的情况下，它是 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> 构建:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> 用新软件包扩展环境:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> 测试:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. 下载模拟和控制器软件包\n下载软件包:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\n不要忘记添加源命令:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. 启动模拟\n让我们启动 gazebo 世界并把我们的 baxter 放进去:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\n在终端中打开一个新窗口:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\n您可以在我们的 baxter 前面放一些模型。这将更有趣。\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. 在 DAPP 中管理账户\n\n由于我们正在测试，让我们使用 robonomics 二进制文件创建一个本地 robonomics 网络。转到带有 robonomics 文件的文件夹并运行:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\n转到[Robonomics Parachain 门户][db5]并切换到本地节点\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\n转到账户并创建 __Baxter__ 和 __雇主__ 账户(__机器人__ 不是必需的)\n\n__重要!__ 复制每个账户的 **助记词** 和 **地址** (要复制地址，请点击账户图标)。**助记词** 是账户的私钥。\n向这些账户转账一些货币(单位):\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\n将 Baxter 的 **助记词** 和 **地址** 添加到 `robot_ws/src/Baxter_simulation_controller/config/` 中的 `config.yaml`\n\n## 4. 启动模拟\n\n在新窗口中运行:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\n打开单独的终端并启动 *控制器软件包*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\n现在您可以发送一个交易来触发 Baxter 开始移动和收集数据。为此，您可以使用相同的[Robonomics Parachain 门户][db5]。转到 **Developer->Extrinsics** 并选择 Baxter 的雇主账户，`launch` extrinsic，Baxter 的账户作为目标账户，`yes` 作为参数。提交 extrinsic。\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\n机器人应该开始移动。它不会接受来自其他账户的命令，也不会接受带有 `no` 参数的命令。\n您应该看到以下内容:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\n工作结束后，转到 Robonomics 门户的 `Developer > Chain state`。在 **state query** 中选择 `datalog.datalogItem(AccountId,u64)`。如果要显示所有 datalog，请关闭 `include option` 并使用 \"+\" 按钮查看 Baxter 的 datalog 消息。\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\n现在遥测和照片的 IPFS 哈希已保存在区块链中。要查看数据只需复制哈希并将其插入到 URL 为：gateway.ipfs.io/ipfs/<br 放入您的哈希 > 的搜索栏中\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\n点击 __在网关上查看__，就这样!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Baxter 模拟 v2.0\n\n它是如何工作的示例:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## 要求:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (安装手册[这里][db2])  \n\n</li>\n\n<li>额外的软件包:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS 高达 0.6.0 (从[这里][db3]下载并安装)\n\n</li>\n\n<li> Python 软件包:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics 节点(二进制文件)(在这里下载最新的[发布][db4])\n\n</li>\n\n<li class=\"flex\">\n\n在 **Robonomics 门户** 上创建 __Baxter__ 和 __雇主__ 账户(您可以在这里找到教程[\"在 Robonomics 门户上创建账户\"][db8])。\n</li>\n\n<li>IPFS 浏览器扩展(不是必需的)</li>\n\n</List>\n\n<br/>\n\n## 0. 安装用于 python3 的 CV Bridge 扩展\n\n<List>\n\n<li> 创建 catkin 工作空间\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> 指导 catkin 设置 cmake 变量。使用您当前的 `python` 版本。对我来说，它是 `python3.6`\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> 克隆 cv_bridge 源码:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> 在您的存储库中找到 cv_bridge 的版本:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> 在 git 存储库中检出正确的版本。在我们的情况下，它是 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> 构建:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> 用新软件包扩展环境:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> 测试:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. 下载模拟和控制器软件包\n我们需要创建 2 个工作空间 - 一个用于主要的 Baxter 软件包，另一个用于主要的控制程序。\n第一个工作空间。这是主要的控制程序。它将在 python3 下运行。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\n第二个工作空间。那里有所有 Baxter 的软件包。模拟非常古老，所以它只能在 python2 下运行。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\n这些软件包是为 ROS indigo 创建的。我们必须更改一些文件才能在 ROS melodic 上运行它们。\n我们将使用 **patch** 文件。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\n让我们构建所有我们的软件包：  \n首先构建 Baxter 的软件包\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\n然后返回到第一个工作空间并构建它:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\n不要忘记添加源命令:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. 启动模拟\n### 让我们开始我们的模拟:\n首先转到 `robot_ws` 并复制并编辑 baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\n使用命令找到您的本地 IP 地址:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\n编辑 `baxter.sh` 中的以下值:\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- your_ip - 输入您的本地 IP 地址。查看 `ip a`\n- ros_version - 例如 \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\n运行带有 sim 指定 baxter shell 脚本:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\n您可以在我们的 baxter 前面放一些模型。这将更有趣。\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. 在 DAPP 中管理账户\n\n由于我们正在测试，让我们使用 robonomics 二进制文件创建一个本地 robonomics 网络。转到带有 robonomics 文件的文件夹并运行:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\n转到[Robonomics Parachain 门户][db5]并切换到本地节点\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\n转到账户并创建 __Baxter__ 和 __雇主__ 账户。\n\n您可以在这里找到手册\"在 Robonomics 门户上创建账户\"[这里][db8]\n\n__重要!__ 复制每个账户的 **助记词** 和 **地址** (要复制地址，请点击账户图标)。**助记词** 是账户的私钥。\n\n向这些账户转账一些货币(单位):\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\n将Baxter的**助记词**和**地址**添加到`robonomics_ws/src/Baxter_simulation_controller/config/`中的`config.yaml`中\n\n## 4. 启动模拟\n\n在新窗口中运行:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\n打开单独的终端并启动 *控制器软件包*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\n现在您可以发送一个交易来触发Baxter开始移动和收集数据。要这样做，您可以使用相同的门户[Robonomics Parachain门户][db5]。转到**开发人员->外部函数**，选择Baxter的雇主账户，`launch`外部函数，Baxter的账户作为目标账户，`yes`作为参数。提交外部函数。\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\n机器人应该开始移动。它不会接受来自其他账户的命令，也不会接受带有 `no` 参数的命令。\n您应该看到以下内容:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\n工作结束后，转到Robonomics门户的`开发人员>链状态`。在**状态查询**中选择`datalog.datalogItem(AccountId,u64)`。如果要显示所有datalog，请关闭`包括选项`，然后使用“+”按钮查看Baxter的datalog消息。\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\n现在遥测和照片的IPFS哈希已保存在区块链中。要查看数据，只需复制哈希并将其插入搜索栏中的URL：  \n#### gateway.ipfs.io/ipfs/<在此处放置您的哈希>\n\n就这些了！\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/安装>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"zh/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}