{"hash":"875b98d13319980e3d246b684c60c311a25b65d1","data":{"course":{"id":"b89c690ee2947565c8fe42fde70ff815","title":"工程师工作台部署","description":"本课程主要介绍Feecc系统及其所有组件。","content":"\n<RoboAcademyText fWeight=\"500\">\n在本课程中，您将学习如何自行部署 Feecc Engineer Workbench 的必要组件。\n</RoboAcademyText>\n\n其中包括:\n\n- 工作台守护程序\n- 工作台前端\n- IPFS网关\n- HID读卡器守护程序\n\n所有组件均使用 [Docker](https://docs.docker.com/engine/install/ubuntu/) 和 [Docker compose](https://docs.docker.com/compose/) 启动，请确保您有 他们安装了。\n\n## 软件准备\n\n1. Feecc组件使用[MongoDB](https://www.mongodb.com/)数据库来存储和访问数据。在使用Feecc之前，您需要以任何方便的方式部署MongoDB。以下是一些部署选项: [使用您自己的服务器](https://www.mongodb.com/try/download/community)，[Atlas云数据库](https://www.mongodb.com/atlas)（免费），[DigitalOcean云数据库](https://www.digitalocean.com/products/managed-databases-mongodb)（付费）。 \n    \n    无论如何，您需要获取连接到MongoDB的URI，您需要将其输入为系统所有组件的`MONGODB_URI`变量的值。\n    \n2. 如果您想利用可靠和透明的存储数据来自您的生产系统，您需要在Robonomics上创建一个帐户。为此，请使用以下链接提供的说明: https://wiki.robonomics.network/docs/create-account-in-dapp/\n    \n    您需要保存帐户的种子短语，因为稍后将在`ROBONOMICS_ACCOUNT_SEED`变量中使用。\n\n## 工作台准备\n\n在开始之前，将所有必要的设备连接到计算机或服务器:\n\n- 使用USB连接的标签打印机\n- 使用USB连接的RFID / 条形码阅读器\n- 通过PoE路由器/网络交换机连接的IP摄像头\n- 使用USB和HDMI/VGA连接的显示器与键盘和鼠标或触摸屏（可选）\n\n## 启动HID读卡器守护程序\n\n1. 克隆存储库：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/Multi-Agent-io/feecc-hid-reader-daemon.git\ncd feecc-hid-reader-daemon\n</LessonCodeWrapper>\n\n2. 启动守护程序:\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker-compose up -d --build\n</LessonCodeWrapper>\n\n## 启动工作台守护程序\n\n1. 克隆存储库：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/Multi-Agent-io/feecc-workbench-daemon.git\ncd feecc-workbench-daemon\n</LessonCodeWrapper>\n\n2. 使用文件`docker-compose.yml`配置守护程序以满足您的需求。该文件包含各种环境变量:\n\n    - MongoDB配置;\n    - Robonomics配置;\n    - IPFS配置;\n    - 打印机参数;\n    - 摄像头参数;\n    - RFID / 条形码读卡器参数。\n    \n    完整的变量列表可在守护程序[存储库](https://github.com/Multi-Agent-io/feecc-workbench-daemon)中找到。以下参数是必需的:\n    \n    - `MONGODB_URI`: MongoDB的连接URI；\n    - `MONGODB_DB_NAME`: MongoDB的数据库名称；\n    - `WORKBENCH_NUMBER`: 员工的工作台编号。\n\n3. 启动守护程序:\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker-compose up -d --build\n</LessonCodeWrapper>\n\n4. 检查其功能性。转到浏览器并打开`http://127.0.0.1:5000/docs`页面，该页面应包含系统的REST API接口文档。如果页面不可用，则服务器未正确启动。检查容器内的日志以查找错误，修复它们并重复构建和运行步骤。\n\n## 启动IPFS网关\n\n1. 克隆存储库：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/Multi-Agent-io/feecc-ipfs-gateway.git\n</LessonCodeWrapper>\n\n\n2. 使用文件`docker-compose.yml`配置微服务以满足您的需求。 该文件包含与MongoDB、Robonomics和Pinata连接的环境变量。 完整的变量列表可在网关存储库中找到（https://github.com/Multi-Agent-io/feecc-ipfs-gateway）。\n\n3. 启动微服务：\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker-compose up -d --build\n</LessonCodeWrapper>\n\n## 启动工作台前端\n\n1. 克隆存储库：\n\n<LessonCodeWrapper language=\"bash\">\ngit clone https://github.com/Multi-Agent-io/feecc-workbench-frontend.git\n</LessonCodeWrapper>\n\n2. 转到`configs`目录，并使用文件`config.json`为您的需求配置前端服务。 以下参数特别重要：\n    - `socket` — 在此处插入工作台守护程序地址；\n    - `interface_language` — 界面语言，可用选项为`en`和`ru`；\n    - `dev_show_reducers` — 启用/禁用开发者模式；\n    - `pulling_period` — 从后端接收数据的时间间隔（以毫秒为单位）；\n\n3. 启动前端容器：\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker-compose up -d --build\n</LessonCodeWrapper>\n\n4. 检查其功能。 转到浏览器并打开`http://localhost:3000`页面，您应该看到一个授权页面。\n\n<RoboAcademyText fWeight=\"500\">\n在下一课中，我们将介绍Feecc Analytics服务。\n</RoboAcademyText>","fileInfo":{"path":"zh/learn/feecc-course/feecc-workbench-deployment.md","name":"feecc-workbench-deployment"},"defaultName":"Getting Used to Feecc","lastUpdate":null}},"context":{}}