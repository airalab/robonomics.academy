{"hash":"957c30fcef9ac2d232ac92277ff384b34731a809","data":{"course":{"id":"45d8b30b4a55500ae57af70ac29153e9","title":"紧急停止，初始化，身体位置控制","description":"在这节课中，您将学习如何授权自己作为用户，获得电机功率控制并向Spot发送基本命令。","content":"\n<RoboAcademyText fWeight=\"500\">\n在这节课中，您将学习如何授权自己作为用户，获得电机功率控制并向Spot发送基本命令。\n</RoboAcademyText>\n\n## 理论\n\n作为一款严肃的机器人，波士顿动力Spot具有一种保护机制 - [E-Stop服务](https://dev.bostondynamics.com/docs/concepts/estop_service)（紧急停止），在Spot操作期间应始终处于活动状态，以避免潜在的物理损坏。打开E-Stop会立即冻结所有关节（如果机器人已经打开，则不会关闭引擎）。\n\n首先，我们应该控制机器人。有两种方法可以做到这一点 - *获取*或*接管*。*获取*意味着以温和的方式请求控制，如果现在有人控制机器人，您的请求将被拒绝。另一种方式，*接管*意味着强制控制，无论当前操作员是否存在。\n\n因此，要进行一些移动，您应该遵循以下方案：\n\n<LessonImages src=\"boston-dynamics-spot/e_stop_scheme.png\" alt=\"机器人执行状态\" imageClasses=\"mb\"/>\n\nRobot Execution States\n\n在这节课中，您将学习如何通过更改*偏航*，*横滚*和*俯仰*来控制机器人的旋转。下图显示了身体框架坐标系：\n\n<LessonImages src=\"boston-dynamics-spot/spot_coords.png\" alt=\"Spot坐标\" imageClasses=\"mb\"/>\n\nSpot coordinates\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\n���码中的角度以弧度表示。\n</RoboAcademyText>\n\n作为课程的结果，您将用Spot的面部在空中画出您姓名的第一个字母。让我们开始设置吧！\n\n## 设置Gitpod\n\n在本课程中，我们将使用Gitpod，这是一种基于云的IDE，允许您在计算机上不安装任何特殊软件的情况下进行练习。\n\n1. 注册[Gitpod](https://gitpod.io/)。\n2. 转到我们的[Spot教育环境](https://gitpod.io/#github.com/merklebot/spot-edu-environment)并在浏览器中打开。您将看到具有典型IDE功能的窗口。 \n3. 单击菜单图标，然后转到终端并创建一个新终端。\n\n<LessonImages src=\"boston-dynamics-spot/gitpod_terminal.png\" alt=\"terminal\" imageClasses=\"mb\"/>\n    \n    \n4. 复制粘贴此命令：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npython3 prepare_yggdrasil.py\nsudo ./start_yggdrasil.sh\n\n</LessonCodeWrapper>\n\n并按`Enter`键。\n\n1. 打开新终端（现在您可以通过按`+`按钮来做到）并使用命令测试连接\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nping6 200:42f6:d055:e74e:ce4a:35aa:953a:70f7\n\n</LessonCodeWrapper>\n\n您应该看到类似于这样的内容：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngitpod /workspace/spot-edu-environment (main) $ ping6 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09\nPING 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09(202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09) 56 data bytes\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=1 ttl=64 time=846 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=2 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=3 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=4 ttl=64 time=197 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=5 ttl=64 time=219 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=6 ttl=64 time=242 ms\n\n</LessonCodeWrapper>\n\n1. 在预定时间之前，我们将向您发送私钥以建立SSH连接。\n2. 将您的私钥复制到文件`id_ed25519`。您可以在*stop-edu-enviroment*的侧边栏资源管理器中找到该文件。\n3. **在** `id_ed25519` ***文件末尾添加一行空行，这对于SSH正常工作是必要的。***按`Ctrl+S`保存更改。\n\n如果一切正常，您可以通过编辑`lesson1.py`开始完成课程\n\n要执行代码，请使用命令：\n\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n\n</LessonCodeWrapper>\n\n\n<RoboAcademyText fWeight=\"700\" fStyle=\"normal\">\n请确保此时没有其他人在运行他们的程序。\n</RoboAcademyText>\n\n\n## 安排练习时间\n\n���用Spot排程网站选择练习时间段：\n\n[meetings.hubspot.com/strelka](https://meetings.hubspot.com/strelka)\n\n## 练习\n\n现在我们将为Spot制作一个简单的脚本，用于使用其头部运动在屏幕上绘图。 \n\n<LessonCodeWrapper language=\"python\" codeClass=\"big-code\">\n# Import Spot Control modules\nimport bosdyn.client\nfrom bosdyn.client.robot_command import RobotCommandClient, blocking_stand\nfrom bosdyn.client.robot_command import RobotCommandBuilder\nfrom bosdyn.geometry import EulerZXY\nimport time\n# ENTER YOUR AUTH DATA HERE\nROBOT_IP=\"192.168.50.3\"\nSPOT_USERNAME=\"student\"\nSPOT_PASSWORD=\"\"\n# Helpers to control camera drawing (you don't need to modify it)\nimport requests\nVIDEOSERVER_URL=\"http://luke.merklebot:8000/\"\nVIDEOSERVER_TOKEN=\"1234\"\ndef notify_start_line():\n  requests.post(VIDEOSERVER_URL + \"start_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_stop_line():\n  requests.post(VIDEOSERVER_URL + \"stop_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_clear_canvas():\n    requests.post(VIDEOSERVER_URL + \"clear_canvas\", json={\"token\": VIDEOSERVER_TOKEN})\n# Start with registering out SDK\nsdk = bosdyn.client.create_standard_sdk('LessonOneClient')\n# Create instance of robot and auth with credentials\nrobot = sdk.create_robot(ROBOT_IP)\nrobot.authenticate(SPOT_USERNAME, SPOT_PASSWORD)\n# Create lease client and take exclusive control over Spot.  \nlease_client = robot.ensure_client('lease')\nlease = lease_client.take()\nlease_keep_alive = bosdyn.client.lease.LeaseKeepAlive(lease_client)\n# Try to power on the robot\nrobot.power_on(timeout_sec=20)\nif robot.is_powered_on():\n    print(\"Powered On\")\n\t\t# If everything went smooth, Spot face lights should turn green\nelse:\n\t\t# In case of some problems, e.g. somebody stole control over robot\n    print(\"Failed\")\n    exit(0)\n# Synchronize Spor inner time with ours - to avoid outdated commands\nrobot.time_sync.wait_for_sync()\n# To execute robot movement, create command client through which orders are sent\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\n# Start movement with simple stand up\nblocking_stand(command_client, timeout_sec=10)\n# Rotate robot body:\n#  1. Build command for body rotation. It’s not an easy task to control robot motion with commands on low level. \n#     Bosdyn Client allow as to use a shortcut - RobotCommandBuilder. It contains a number of predefined commands, \n#     you need just to choose one of your liking and insert parameters\nfootprint_R_body = EulerZXY(yaw=0.1, roll=0.1, pitch=0.1)\ncmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n#  2. Execute builded command\ncommand_client.robot_command(cmd)\ntime.sleep(2)\n# Return robot state back\ncommand_client.robot_command(RobotCommandBuilder.synchro_stand_command(footprint_R_body=EulerZXY(yaw=0, roll=0, pitch=0)))\ntime.sleep(2)\n# Change robot height\ncmd = RobotCommandBuilder.synchro_stand_command(body_height=0.1)\ncommand_client.robot_command(cmd)\n# Now we are ready to draw letter. \ndef draw_letter(command_client):\n\t\t# Choose points to draw (see the coords explanation bellow)\n    points_xy_draw = (\n        (125, 125),\n        (375, 875),\n        (500, 500),\n        (250, 500),\n        (500, 500),\n        (625, 125),\n    )\n    for x, y in points_xy_draw:\n        convert = lambda x: (x / 1000 - 0.5) * -1\n        x, y = map(convert, (x, y))\n        footprint_R_body = EulerZXY(\n            yaw=x, \n            roll=0.0, \n            pitch=y,\n        )\n        cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n        command_client.robot_command(cmd)\n        time.sleep(1)\nnotify_clear_canvas()\nnotify_start_line()\ndraw_letter(command_client)\nnotify_stop_line()\n# Turn off the robot gracefully\nrobot.power_off(cut_immediately=False)\n\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\n如果我们需要将Spot的头部移动到相机中的某个点，我们应该进行许多具有许多非线性参数的大量计算，这绝非易事。但是我们可以说，在局部范围内，偏航和俯仰角可以近似用作具有某些系数的笛卡尔坐标在图片上。\n</RoboAcademyText>\n\n\n<LessonImages src=\"boston-dynamics-spot/cartesian.jpeg\" alt=\"spot\" imageClasses=\"mb\"/>\n\n现在您可以尝试运行脚本并查看结果。不要忘记使用Ctrl+S保存您的代码：\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n</LessonCodeWrapper>\n\n\n### Spot的视频可以在这里找到：\n[https://codepen.io/smehnov/pen/BaVNrPM](https://codepen.io/smehnov/pen/BaVNrPM)\n\n\n## 挑战\n创建一个Python脚本，用一系列动作控制机器人的身体位置：\n\n1. 站起来\n2. 用它的面部追踪您的姓名首字母（一个字母，至少3个点）\n3. 坐下\n\n## 结果\n\n现在，您知道如何：\n\n- 使用Spot SDK\n- 构建基本命令\n- 旋转机器人身体\n- 连接到Spot\n\n甚至画了一个字母。恭喜！\n\n\n<RoboAcademyText fWeight=\"500\">\n\n我们收集了一个[rosbag](http://wiki.ros.org/rosbag)，其中包含Spot的关节数据，因此您可以将它们可视化（例如使用[foxglove](https://www.notion.so/Lesson-1-Emergency-Stop-Initialization-Body-Position-Control-4ccf6316330d4680ab1bb571b2b788d5)）。证书将很快发送到您的电子邮件。\n\n</RoboAcademyText> \n\n\n## [安排您的第一堂课](https://meetings.hubspot.com/strelka)","fileInfo":{"path":"zh/learn/boston-dynamics-spot/overview.md","name":"overview"},"defaultName":"Software Developing for Boston Dynamics Spot","lastUpdate":null}},"context":{}}