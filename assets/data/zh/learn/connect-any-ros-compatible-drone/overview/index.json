{"hash":"5d4f08f99729279cbad41c23c8d66dce511a8ae5","data":{"course":{"id":"26d63c8c0cba1da73fcf4349759e4a95","title":"连接ROS兼容的无人机","description":"将任何兼容Robonomics空投链控制的ROS兼容机器人连接起来。","content":"\n\n## 第1部分。通过交易启动\n\n**在本文中，我们将展示如何借助Robonomics工具控制任何ROS兼容设备。我们将在网络上找到一个随机的无人机模拟包，并调整它以与Robonomics一起运行。**\n**要求:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz（安装手册[在这里](http://wiki.ros.org/melodic/安装)）\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics节点（二进制文件）（下载最新版本[在这里](https://github.com/airalab/robonomics/releases)）\n\n</li>\n\n</List>\n\n<br/>\n\n编码此演示部分的整个过程在下面的视频中呈现。\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. 找到一个模拟\n让我们上网搜索。在Google上搜索`ROS无人机模拟器`。第一个链接很可能会显示` tum_simulator`页面，网址为[http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\n它相当过时，所以我们最好为我们的系统找到一个分支。在Google上搜索`tum_simulator Ubuntu 18 Gazebo 9 fork`。第一个结果是一个GitHub [repo](https://github.com/tahsinkose/sjtu-drone)，其中包含一个合适的软件包。下载它\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\n不要忘记将源命令添加到`~/.bashrc`中：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\n现在我们可以运行模拟以查看我们需要做什么来将无人机置于空投链控制之下。\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. 检查ROS主题\n当模拟正在运行时，在新标签页中运行以下命令以查看无人机使用的主题列表：\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\n让我们看看`/cmd_vel`，`/drone/takeoff`和`/drone/land`：\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\n可以看到，应该有`Twist`和`Empty`类型的消息，它们是`std_msgs`和`geometry_msgs`的一部分，我们将在控制器中使用这些。暂时关闭模拟。\n\n## 3. 下载控制器软件包\n从全局来看，与普通的ROS机器人控制器的主要区别是一段代码块，它使用[Robonomics IO](https://wiki.robonomics.network/docs/rinterface/)检查网络中的所有交易。软件包本身在GitHub上可用。下载并构建工作空间：\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. 在DAPP中管理帐户\n由于我们正在测试，让我们使用robonomics二进制文件创建一个本地robonomics网络节点：\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**重要！**在下次启动之前，必须删除带有`db`的目录\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\n成功启动后，按照[此](https://wiki.robonomics.network/docs/create-account-in-dapp/)手册创建帐户。**不要忘记保存每个帐户的种子和地址！您将需要它们进行交易**。将这些地址、种子和路径添加到`robonomics_ws/src/robonomics_sample_controller/src`目录中的`config.config`文件中的robonomics二进制文件。向这些帐户转账（单位）：\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. 启动无人机在空投链控制下\n\n到目前为止，**唯一正在运行的**应该是robonomics本地节点。在单独的终端中启动无人机模拟：\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n运行脚本：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\n现在您可以发送一个交易，触发无人机开始飞行。为此，您应该使用robonomics二进制文件的Robonomics IO `write`子命令：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\n其中`<DRONE_ADDRESS>`和`<EMPLOYER’S_KEY>`应相应地替换为先前保存的字符串。\n您应该看到日志`\"Taking Off\"`，无人机应该开始飞行：\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\n这就是任何ROS兼容机器人如何通过Robonomics空投链控制。\n\n\n##  第2部分。将数据保存到区块链\n\n**在本部分中，我们将继续使用Robonomics工具，使无人机受到空投链的控制。这次我们将添加将数据发送到IPFS并在链上存储哈希的选项。以下是说明和代码片段。要求:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz（安装手册[在这里](http://wiki.ros.org/melodic/安装)）\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22（从[这里](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz)下载并安装）\n</li>\n\n<li class=\"flex\">\n\nRobonomics节点（二进制文件）（下载最新版本[在这里](https://github.com/airalab/robonomics/releases)）\n</li>\n\n<li>Python依赖项：\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\n编码此演示部分的整个过程在下面的视频中呈现。\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. 添加依赖项\n如果我们启动模拟并查看主题列表（请参阅第1部分），我们将看到有一个主题包含前置摄像头数据，并使用`sensor_msgs/Image`消息类型：\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\n让我们尝试每1秒拍摄一张照片，在飞行后将这些照片发布到IPFS。如果您已经完成了第一个教程，就不需要再下载其他内容了。这是`drone_sample_controller_pictures.py`脚本。\n\n## 2. 在DAPP中管理账户\n如在之前的教程中所做的那样，使用robonomics二进制文件创建一个本地的robonomics网络节点：\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**重要！**在下次启动之前，必须删除带有`db`的目录\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\n成功启动后，按照[此](https://wiki.robonomics.network/docs/create-account-in-dapp/)手册创建帐户。**不要忘记保存每个帐户的种子和地址！您将需要它们进行交易**。将这些地址、种子和路径添加到`robonomics_ws/src/robonomics_sample_controller/src`目录中的`config.config`文件中的robonomics二进制文件。向这些帐户转账（单位）：\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. 启动\n到目前为止，**唯一正在运行的**应该是robonomics本地节点。在单独的终端中启动无人机模拟：\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n在另一个窗口启动ipfs守护进程：\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\n运行脚本：\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\n现在您可以发送一个交易来触发无人机开始飞行并拍照。为此，您应该使用robonomics二进制文件的Robonomics IO `write`子命令：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\n其中`<DRONE_ADDRESS>`和`<EMPLOYER’S_KEY>`应相应地替换为先前保存的字符串。\n您应该看到日志`\"Taking Off\"`，无人机应该开始飞行并拍照：\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\n稍后，当任务完成时，在Robonomics门户网站中转到`Developer` -> `Chain state`，并使用选定的`datalog`作为状态查询，通过`“+”`按钮添加一个`DRONE`数据日志。遥测的IPFS哈希已保存在区块链中。要查看数据，只需复制哈希并将其添加到本地[网关](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/)地址`localhost:8080/ipfs/`：\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"zh/learn/connect-any-ros-compatible-drone/overview.md","name":"overview"},"defaultName":"Connect ROS-compatible drone","lastUpdate":"Thu May 04 2023 12:52:55 GMT+0400 (Samara Standard Time)"}},"context":{}}