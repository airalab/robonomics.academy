{"hash":"e6c519792deb242508dbdc929978fb576e31f14b","data":{"course":{"id":"557f4aa96306db99a8412cb5a6347cf1","title":"Controlla il robot Baxter","description":"Controlla il robot Baxter","content":"Esempio di come funziona:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## Requisiti:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (manuale di installazione [qui][db2])  \n\n</li>\n\n<li>pacchetti extra:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effot-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS fino a 0.6.0 (scarica da [qui][db3] e installa)\n\n</li>\n\n<li> pacchetti python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nScarica l'ultimo [rilascio][db4] del nodo Robonomics qui (ultimo rilascio testato v1.1)\n\n</li>\n\n<li>Estensione del browser IPFS (non necessaria)</li>\n\n</List>\n\n<br/>\n\n## 0. installa l'estensione CV Bridge per python3\n\n<List>\n\n<li> Crea lo spazio di lavoro di catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Istruisci catkin a impostare le variabili cmake. Usa la tua versione corrente di `python`. Per me, è `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Clona src di cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Trova la versione di cv_bridge nel tuo repository:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Controlla la versione corretta nel repo git. Nel nostro caso è 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Costruisci:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Estendi l'ambiente con il nuovo pacchetto:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Test:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. Scarica i pacchetti di simulazione e di controllo\nScarica i pacchetti:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nNon dimenticare di aggiungere il comando source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Avvia la simulazione\nIniziamo il mondo di gazebo e mettiamo il nostro baxter al suo interno:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nApri un'altra finestra nel terminale:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nPuoi mettere alcuni modelli di fronte al nostro baxter. Sarà più interessante.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Gestisci gli account in DAPP\n\nPoiché stiamo testando, creiamo una rete robonomics locale con il file binario robonomics. Vai alla cartella con il file robonomics e esegui:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nVai al [portale Robonomics Parachain][db5] e passa al nodo locale\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nVai su Account e crea gli account __Baxter__ e __Employer__ (__Robot__ non è necessario)\n\n__Importante!__ Copia il **Mnemonic** e l'**indirizzo** di ciascun account (per copiare l'indirizzo fare clic sull'icona dell'account). **Mnemonic** è la chiave privata dell'account.\nTrasferisci qualche denaro (unità) a questi account:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nAggiungi il **Mnemonic** e l'**indirizzo** di Baxter a `config.yaml` in `robot_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Avvia la simulazione\n\nIn una nuova finestra esegui:\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nApri un terminale separato e avvia il *pacchetto di controllo*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nOra puoi inviare una transazione che avvia il movimento del Baxter e la raccolta di dati. Per farlo, puoi utilizzare lo stesso [portale Robonomics Parachain][db5]. Vai su **Sviluppatore->Estrinseci** e seleziona l'account datore di lavoro di Baxter, l'estrinseco `launch`, l'account di destinazione di Baxter come account di destinazione e `yes` come parametro. Invia l'estrinseco.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nIl robot dovrebbe iniziare a muoversi. Non accetterà comandi da altri account né comandi con parametro `no`.\nDovresti vedere quanto segue:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nquando il lavoro è finito vai al Portale Robonomics su `Sviluppatore > Stato della catena`. Scegli `datalog.datalogItem(AccountId,u64)` in **query di stato**. Se vuoi mostrare tutti i datalog, disattiva l'opzione `include` aggiungi visualizza il messaggio datalog di Baxter usando il pulsante \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nOra l'hash IPFS del telemetria e delle foto è salvato nella blockchain. Per vedere i dati basta copiare l'hash e inserirlo nella barra degli indirizzi con URL: gateway.ipfs.io/ipfs/<br inserisci qui il tuo hash >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\nClicca su __Visualizza sul Gateway__ e questo è tutto!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Simulazione di Baxter v2.0\n\nEsempio di come funziona:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## Requisiti:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (manuale di installazione [qui][db2])  \n\n</li>\n\n<li>pacchetti extra:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS fino a 0.6.0 (scarica da [qui][db3] e installa)\n\n</li>\n\n<li> pacchetti python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNodo Robonomics (file binario) (scarica l'ultimo [rilascio][db4] qui)\n\n</li>\n\n<li class=\"flex\">\n\nCrea gli account __Baxter__ e __Employer__ sul **Portale Robonomics** (puoi trovare il tutorial \"Crea un Account sul Portale Robonomics\" [qui][db8]).\n</li>\n\n<li>Estensione del browser IPFS (non necessaria)</li>\n\n</List>\n\n<br/>\n\n## 0. installa l'estensione CV Bridge per python3\n\n<List>\n\n<li> Crea lo spazio di lavoro di catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Istruisci catkin a impostare le variabili cmake. Usa la tua versione corrente di `python`. Per me, è `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Clona src di cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Trova la versione di cv_bridge nel tuo repository:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Controlla la versione corretta nel repo git. Nel nostro caso è 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Costruisci:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Estendi l'ambiente con il nuovo pacchetto:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Test:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. Scarica i pacchetti di simulazione e di controllo\nDovremo creare 2 spazi di lavoro - uno per i pacchetti principali di Baxter e l'altro per il programma di controllo principale.\nPrimo spazio di lavoro. È il programma di controllo principale. Funzionerà con python3.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nSecondo spazio di lavoro. Ci saranno tutti i pacchetti di Baxter. La simulazione è molto vecchia, quindi potrebbe funzionare solo con python2.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nQuesti pacchetti sono stati creati per ROS indigo. Dobbiamo modificare alcuni file per farli funzionare su ROS melodic.\nUseremo file **patch**.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nE costruiamo tutti i nostri pacchetti:  \nPrima costruisci i pacchetti di Baxter\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nPoi torna al primo spazio di lavoro e costruiscilo anche:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nNon dimenticare di aggiungere il comando source:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Avvia la simulazione\n### Iniziamo la nostra simulazione:\nPrima vai a `robot_ws` e copia ed edita baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nTrova il tuo indirizzo IP locale con il comando:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\nModifica i seguenti valori in `baxter.sh` :\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- your_ip - inserisci il tuo indirizzo IP locale. Vedi `ip a`\n- ros_version - ad esempio \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nEsegui lo script shell di baxter con sim specificato:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nPuoi mettere alcuni modelli di fronte al nostro baxter. Sarà più interessante.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Gestisci gli account in DAPP\n\nPoiché stiamo testando, creiamo una rete robonomics locale con il file binario robonomics. Vai alla cartella con il file robonomics e esegui:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nVai al [portale Robonomics Parachain][db5] e passa al nodo locale\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nVai su Account e crea gli account __Baxter__ e __Employer__.\n\nPuoi trovare il manuale \"Crea un Account sul Portale Robonomics\" [qui][db8]\n\n__Importante!__ Copia il **Mnemonic** e l'**indirizzo** di ciascun account (per copiare l'indirizzo fare clic sull'icona dell'account). **Mnemonic** è la chiave privata dell'account.\n\nTrasferisci qualche denaro (unità) a questi account:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nAggiungi il **mnemonico** e l'**indirizzo** di Baxter a `config.yaml` in `robonomics_ws/src/Baxter_simulation_controller/config/`\n\n## 4. Avvia la simulazione\n\nIn una nuova finestra esegui:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nApri un terminale separato e avvia il *pacchetto di controllo*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nOra puoi inviare una transazione che avvia il movimento di Baxter e la raccolta di dati. Per farlo, puoi utilizzare lo stesso portale [portale Robonomics Parachain][db5]. Vai su **Sviluppatore->Estrinsechi** e seleziona l'account datore di lavoro di Baxter, l'estrinseco `launch`, l'account di Baxter come account di destinazione e `yes` come parametro. Invia l'estrinseco.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nIl robot dovrebbe iniziare a muoversi. Non accetterà comandi da altri account né comandi con parametro `no`.\nDovresti vedere quanto segue:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nQuando il lavoro è finito vai al Portale Robonomics su `Sviluppatore > Stato della catena`. Scegli `datalog.datalogItem(AccountId,u64)` in **query di stato**. Se vuoi mostrare tutti i datalog, disattiva l'opzione `include` aggiungi visualizza il messaggio datalog di Baxter usando il pulsante \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nOra l'hash IPFS della telemetria e delle foto è salvato nella blockchain. Per visualizzare i dati, basta copiare l'hash e inserirlo nella barra di ricerca con URL:  \n#### gateway.ipfs.io/ipfs/< inserisci qui il tuo hash>\n\nE questo è tutto!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/Installazione>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"it/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}