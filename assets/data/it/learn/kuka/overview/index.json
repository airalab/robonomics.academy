{"hash":"0a452ea1a3cc334a5e8ca4f3b7c819e6bb138602","data":{"course":{"id":"9bc13b7f4bf85be8ecd35036d0543e70","title":"Collegare il manipolatore Kuka","description":"Collegare il Manipolatore","content":"\nIl video con un esempio di lavoro può essere trovato qui:\n\nhttps://youtu.be/z55HepXbHr8\n\n<br/>\n\n***\n\n<br/>\n\n## Requisiti\n\n<List>\n\n<li class=\"flex\">\n\nROS melodico, Gazebo (istruzioni di installazione [qui](http://wiki.ros.org/melodic/Installazione/Ubuntu))\n</li>\n\n<li>Alcuni pacchetti extra\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li> IPFS 0.4.22 \n\n(scarica da [qui](https://www.npackd.org/p/ipfs/0.4.22) e installa)\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>pip3\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt-get install python3-pip\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li>substrate-interface\n\n<LessonCodeWrapper language=\"bash\">\npip3 install substrate-interface\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nNodo Robonomics (file binario) (scarica l'ultima versione [qui](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n<li>Estensione del browser IPFS (non necessaria)</li>\n\n</List>\n\n<br/>\n\n***\n\n<br/>\n\n## Installazione\nInstallare il manipolatore Kuka e i pacchetti di controllo\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">cd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make</LessonCodeWrapper>\n\n***\n\n<br/>\n\n## Eseguire il modello di gazebo\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n</LessonCodeWrapper>\n\nIn una nuova finestra\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun manipulator_gazebo move_arm_server\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/1.png\" alt=\"model\"/>\n\n***\n\n<br/>\n\n## Esecuzione di robonomics\nVai alla cartella con il file robonomics e crea una rete robonomics locale:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/robonomics.png\" alt=\"robonomics\"/>\n\nVai al [portale Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) e passa al nodo locale\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/local.png\" alt=\"local\"/>\n\nQuindi vai su Account e crea un account `KUKA`. Salva la chiave mnemonica dell'account, ti servirà in seguito. \n\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/create_acc.png\" alt=\"acc\"/>\n\nInvia alcune unità al nuovo account da uno dei conti predefiniti.\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/send_money.png\" alt=\"accs\"/>\n\n***\n<br/>\n\n## Esecuzione di ipfs\nEseguire ipfs daemon:\n\n<LessonCodeWrapper language=\"bash\">\nipfs daemon\n</LessonCodeWrapper>\n\n***\n\n</br>\n\n## Esecuzione del pacchetto di controllo\nNella directory di configurazione nel pacchetto di controllo kuka_control è necessario creare un file di configurazione con queste righe, dove `<your_mnemonic>` è il seed mnemonico salvato:\n\n<LessonCodeWrapper language=\"bash\">\n{\n    \"kuka_mnemonic\": \"[your_mnemonic]\",\n    \"node\": \"ws://127.0.0.1:9944\"\n}\n</LessonCodeWrapper>\n\n\nOra puoi eseguire lo script di controllo:\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun kuka_controller move_arm_client.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/run.png\" alt=\"control\"/>\n\n## Invio della transazione\nNel [portale Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) vai su `Sviluppatore/Extrinsics`, cambia `estrinseco` in `lancio`. Scegli il tuo account `KUKA` in `robot` e cambia `param` in `Sì`. Poi premi `Invia transazione`\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/launch.png\" alt=\"transaction\"/>\n\nNella finestra con il pacchetto di controllo kuka_control vedrai:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/res.png\" alt=\"done\"/>\n\nQuindi vai su `Sviluppatore/Chain State` sul portale Robonomics, seleziona `datalog` e `datalogItem((AccountId,u64)): RingBufferItem` nella query e aggiungi il datalog `KUKA` con il pulsante '+':\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/datalog.png\" alt=\"datalog\"/>\n\nOra puoi trovare la telemetria del robot in IPFS tramite questo link con il tuo hash `https://gateway.ipfs.io/ipfs/<hash>`.\n\n## Risoluzione dei problemi\n\nSe `catkin_make` non funziona con il messaggio che non riesce a trovare MoveArm.h, prova a rimuovere le ultime quattro righe in CMakeLists.txt nel pacchetto kuka_manipulator_gazebo:\n\n<LessonCodeWrapper language=\"yaml\">\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(move_arm_server src/move_arm_server.cpp)\ntarget_link_libraries(move_arm_server ${catkin_LIBRARIES})\nadd_dependencies(move_arm_server beginner_tutorials_gencpp)\n</LessonCodeWrapper>\n\nFai `catkin_make` senza queste righe, poi ripristinale e fai di nuovo `catkin_make`.","fileInfo":{"path":"it/learn/kuka/overview.md","name":"overview"},"defaultName":"Connect Kuka manipulator","lastUpdate":null}},"context":{}}