{"hash":"ebf92df2790a8f2dc659c241c969d5c9f2c95e48","data":{"course":{"id":"31f3dc4d5631b17acb855f8c796569cf","title":"Collega il rover Curiosity di Marte","description":"Collega il rover Curiosity di Marte sotto il controllo del parachain Robonomics.","content":"\n**Vediamo come il controllo del parachain Robonomics permette di far muovere il rover Curiosity di Marte. Requisiti:**\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (manuale di installazione [qui](http://wiki.ros.org/melodic/Installazione))\n\n</li>\n\n\n<li>pacchetti extra:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n  sudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS fino a [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n\n</li>\n\n<li class=\"flex\">\n\n[Estensione complementare IPFS](https://github.com/ipfs/ipfs-companion)\n\n</li>\n\n<li class=\"flex\">\n\nNodo Robonomics (file binario) (scarica l'ultima versione [qui](https://github.com/airalab/robonomics/releases). Questo tutorial è stato testato con successo sulla v1.1)\n\n</li>\n\n</List>\n\n<br/>\n\nEcco il video che mostra il lancio riuscito:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n\n<br/>\n\n### 1. Configura una simulazione\n\nScarica il pacchetto del rover Curiosity:\n<LessonCodeWrapper language=\"bash\">\n  mkdir -p robonomics_ws/src\n  cd robonomics_ws/src\n  git clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\n  cd ..\n  catkin build\n</LessonCodeWrapper>\n\nDobbiamo regolare le condizioni iniziali per far spawnare il nostro rover senza intoppi:\n\n<List>\n\n<li>Vai su\n\n`src/master/curiosity_mars_rover_description/worlds` e modificare la riga 14 del file` mars_curiosity.world` to \n`<pose>0 0 8 0 0 0</pose>`\n\n</li>\n\n<li>Vai su\n\n`src/master/curiosity_mars_rover_description/launch` e cambia la riga 4 del file `mars_curiosity_world.launch` in \n`<arg name=\"paused\" default=\"false\"/>`\n\nNon dimenticare di aggiungere il comando sorgente a `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n</li>\n\n<li> Riavvia la console e avvia la simulazione:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\n  roslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/rover.jpg\" alt=\"Mars rover\"/>\n\n</li>\n\n</List>\n\nNota: se l'immagine è scura, ad esempio ombreggiata, cambia `Camera` in `Orthorgraphic` nella barra degli strumenti di Gazebo.\nLa simulazione può essere chiusa per un po' di tempo.\n\n------------\n\n<br/>\n\n### 2. Scarica il pacchetto del controller Robonomics\nPer scaricare un pacchetto del controller per il Rover digita nel terminale:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n</LessonCodeWrapper>\n\n\n------------\n\n<br/>\n\n### 3. Gestisci gli account in DAPP\nPoiché stiamo testando, creiamo una rete robonomics locale con il file binario robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n  ./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/robonomics.jpg\" alt=\"Eseguirening node\"/>\n\n\nVai al [portale della Parachain di Robonomics](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) e passa al nodo locale \n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/local_node.jpg\" alt=\"Local node\"/>\n\n\nVai su Accounts e crea gli account **CURIOSITY** e **EMPLOYER**.\n\n**Importante**! Copia l'indirizzo di ciascun account (per copiare l'indirizzo clicca sull'icona dell'account) e il **seed mnemonico** dell'account di Curiosity (ottenuto durante la creazione dell'account)\nTrasferisci un po' di denaro (unità) a questi account. Puoi leggere di più sugli account in Robonomics [qui](https://wiki.robonomics.network/docs/en/create-account-in-dapp/)\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/account_creation.jpg\" alt=\"Account creation\"/>\n\n\nAggiungi questi indirizzi, seed e indirizzo del nodo (impostato di default su `ws://127.0.0.1:9944` per il nodo sviluppatore) in `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Senza virgolette.\n\n------------\n\n<br/>\n\n### 4. Avvia Robonomics\n\nPrima di procedere, assicurati di aver installato [IPFS Companion Extension](https://github.com/ipfs/ipfs-companion).\n\nIn un terminale separato avvia IPFS:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nifps init #devi farlo solo una volta per ogni installazione di IPFS\nipfs daemon\n</LessonCodeWrapper>\n\nIn un altro terminale separato avvia la simulazione di Curiosity se non è attiva:\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\nAspetta finché non rimane ferma\n\nIn un altro terminale avvia il controller:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nrosrun robonomics_sample_controller sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/controller.jpg\" alt=\"Controller\"/>\n\nOra puoi inviare una transazione che avvia il Rover a muoversi e a raccogliere dati. Per farlo, puoi utilizzare lo stesso [portale del parachain Robonomics](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/).\nVai su `Developer->Extrinsics` e seleziona l'account datore di lavoro di Curiosity, l'estrinseco `launch`, l'account di Curiosity come account di destinazione e `yes` come parametro.\nInvia l'estrinseco.\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/extrinsic.jpg\" alt=\"Extrinsic\"/>\n\nIl robot dovrebbe iniziare a muoversi. Non accetterà comandi da altri account né comandi con parametro `no`. Il rover si muoverà e raccoglierà dati per circa un minuto.\nSuccessivamente, quando il lavoro è completato:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/job_done.jpg\" alt=\"Job done\"/>\n\n\nSul portale di Robonomics vai su `Developer -> Chain state` e ottieni un datalog `CURIOSITY` utilizzando il pulsante “+” con `datalog -> RingBufferItem` selezionato come query: \n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/datalog.jpg\" alt=\"Datalog\"/>\n\n\nOra l'hash IPFS del telemetria è salvato nella blockchain. Per vedere i dati, copia semplicemente l'hash e trovalo su un gateway:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/data_in_ipfs.jpg\" alt=\"Data in IPFS\"/>\n\n\nQuesta telemetria è conservata in uno storage decentralizzato e il suo hash è memorizzato in una blockchain!\n","fileInfo":{"path":"it/learn/connect-mars-curiosity-rover/overview.md","name":"overview"},"defaultName":"Connect Mars Curiosity Rover","lastUpdate":"Thu May 18 2023 10:41:00 GMT+0400 (Samara Standard Time)"}},"context":{}}