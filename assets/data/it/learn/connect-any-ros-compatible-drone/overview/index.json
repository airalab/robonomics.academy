{"hash":"d581ab531c5af1fcf498eba534e7cd9db8b6d676","data":{"course":{"id":"14a058874120006c199bc1f5011e5a9f","title":"Collega il drone compatibile con ROS","description":"Collega qualsiasi robot compatibile con ros sotto il controllo della parachain di robonomics.","content":"\n\n## Parte 1. Lancio tramite transazione\n\n**In questo articolo mostreremo che con l'aiuto degli strumenti Robonomics è possibile controllare qualsiasi dispositivo compatibile con ROS. Troveremo un pacchetto di simulazione di drone casuale sul web e lo adatteremo per funzionare con Robonomics.**\n**Requisiti:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (manuale di installazione [qui](http://wiki.ros.org/melodic/Installazione))\n\n</li>\n\n<li class=\"flex\">\n\nNodo Robonomics (file binario) (scarica l'ultima versione [qui](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n</List>\n\n<br/>\n\nL'intero processo di codifica di questa parte della demo è presentato in un video qui sotto.\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. Trova una simulazione\nNaviga sul web. Cerca su Google `ROS drone simulator`. Il primo link probabilmente ti mostrerà la pagina `tum_simulator` su [http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\nÈ piuttosto datato, quindi è meglio trovare un fork per il nostro sistema. Cerca su Google `tum_simulator Ubuntu 18 Gazebo 9 fork`. Il primo risultato è un GitHub [repo](https://github.com/tahsinkose/sjtu-drone) con un pacchetto appropriato. Scaricalo\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\nNon dimenticare di aggiungere il comando di origine a `~/.bashrc`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\nOra possiamo eseguire la simulazione per vedere cosa dobbiamo fare per prendere il drone sotto il controllo della parachain.\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. Ispeziona i topic di ROS\nQuando la simulazione è in esecuzione, in una nuova scheda esegui il seguente comando per vedere l'elenco dei topic utilizzati dal drone:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\nDiamo un'occhiata a `/cmd_vel`, `/drone/takeoff` e `/drone/land`:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\nCome si può vedere, dovrebbero esserci messaggi di tipo `Twist` e `Empty`, fanno parte di `std_msgs` e `geometry_msgs`, li useremo nel controller. Chiudi la simulazione per un po' di tempo.\n\n## 3. Scarica il pacchetto del controller\nGlobalmente, la principale differenza dal controller di robot ROS casuale è un blocco di codice, che controlla tutte le transazioni nella rete utilizzando [Robonomics IO](https://wiki.robonomics.network/docs/rinterface/). Il pacchetto stesso è disponibile su GitHub. Scaricalo e costruisci lo spazio di lavoro:\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. Gestisci gli account in DAPP\nPoiché stiamo testando, creiamo un nodo di rete robonomics locale con il file binario robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Importante!** Prima dei prossimi lanci è necessario rimuovere una directory `db` con\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nDopo un lancio riuscito crea account seguendo il manuale [qui](https://wiki.robonomics.network/docs/create-account-in-dapp/). **Non dimenticare di salvare il seed e l'indirizzo di ciascun account! Ne avrai bisogno per le transazioni**. Aggiungi questi indirizzi, seed e percorso al file `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Trasferisci qualche denaro (unità) a questi account:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. Lancio del drone sotto il controllo della parachain\n\nFino ad ora l'**unica cosa in esecuzione** dovrebbe essere il nodo locale di robonomics. In un terminale separato avvia la simulazione del drone:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nEsegui lo script:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\nOra puoi inviare una transazione che fa partire il drone per iniziare a volare. Per farlo, dovresti utilizzare il sottocomando `write` di Robonomics IO del file binario robonomics:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nDove `<DRONE_ADDRESS>` e `<EMPLOYER’S_KEY>` vengono sostituiti con le stringhe salvate precedentemente.\nDovresti vedere il log `\"Taking Off\"` e il drone dovrebbe iniziare a volare:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\nEcco come qualsiasi robot compatibile con ROS può essere controllato dal controllo della parachain di Robonomics.\n\n\n##  Parte 2. Salvataggio dei dati sulla blockchain\n\n**In questa parte continueremo a utilizzare gli strumenti Robonomics per far sì che un drone sia controllato da una parachain. Questa volta aggiungeremo l'invio dei dati a IPFS e le opzioni di memorizzazione dell'hash nella catena. Di seguito le istruzioni e i frammenti di codice. Requisiti:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (manuale di installazione [qui](http://wiki.ros.org/melodic/Installazione))\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22 (scarica da [qui](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz) e installa)\n</li>\n\n<li class=\"flex\">\n\nNodo Robonomics (file binario) (scarica l'ultima versione [qui](https://github.com/airalab/robonomics/releases))\n</li>\n\n<li>Dipendenze Python:\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\nL'intero processo di codifica di questa parte della demo è presentato in un video qui sotto.\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. Aggiungi dipendenze\nSe avviamo una simulazione e guardiamo l'elenco dei topic (vedi parte 1), vedremo che c'è un topic che contiene i dati della fotocamera frontale e utilizza il tipo di messaggio `sensor_msgs/Image`:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\nProviamo a fare una foto ogni 1 secondo e dopo il volo pubblichiamo queste foto su IPFS. Se hai completato il primo tutorial, non è necessario scaricare altro. È lo script `drone_sample_controller_pictures.py`.\n\n## 2. Gestire account in DAPP\nCome fatto in un tutorial precedente, crea un nodo di rete robonomics locale con il file binario robonomics:\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Importante!** Prima dei prossimi lanci è necessario rimuovere una directory `db` con\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nDopo un lancio riuscito crea account seguendo il manuale [qui](https://wiki.robonomics.network/docs/create-account-in-dapp/). **Non dimenticare di salvare il seed e l'indirizzo di ciascun account! Ne avrai bisogno per le transazioni**. Aggiungi questi indirizzi, seed e percorso al file `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Trasferisci qualche denaro (unità) a questi account:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. Lancio\nFino ad ora l'**unica cosa in esecuzione** dovrebbe essere il nodo locale di robonomics. In un terminale separato avvia la simulazione del drone:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nIn un altro lancio del demone ipfs:\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nEsegui lo script:\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\nOra puoi inviare una transazione che avvia il drone a volare e fare foto. Per farlo, dovresti utilizzare il sottocomando `write` di Robonomics IO del file binario robonomics:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nDove `<DRONE_ADDRESS>` e `<EMPLOYER’S_KEY>` vengono sostituiti con le stringhe salvate precedentemente.\nDovresti vedere il log `\"Decollo\"` e il drone dovrebbe iniziare a volare e fare foto:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\nSuccessivamente, quando il lavoro è completato, sul portale Robonomics vai su `Sviluppatore` -> `Stato della catena` e aggiungi un datalog `DRONE` utilizzando il pulsante `“+”` con il datalog selezionato come query di stato. L'hash IPFS del telemetria è stato salvato nella blockchain. Per vedere i dati, basta copiare l'hash e aggiungerlo all'indirizzo [gateway](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/) locale `localhost:8080/ipfs/`:\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"it/learn/connect-any-ros-compatible-drone/overview.md","name":"overview"},"defaultName":"Connect ROS-compatible drone","lastUpdate":"Thu May 04 2023 12:52:55 GMT+0400 (Samara Standard Time)"}},"context":{}}