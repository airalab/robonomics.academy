{"hash":"8ef03bb5d0758af9cf9521a2138c5ca6b002a78d","data":{"course":{"id":"4fdf4612ebc561f98382941a1e628865","title":"Stop di emergenza, Inizializzazione, Controllo della posizione del corpo","description":"Durante questa lezione imparerai come autorizzarti come utente, ottenere il controllo della potenza del motore e inviare comandi di base a Spot.","content":"\n<RoboAcademyText fWeight=\"500\">\nDurante questa lezione imparerai come autorizzarti come utente, ottenere il controllo della potenza del motore e inviare comandi di base a Spot.\n</RoboAcademyText>\n\n## Teoria\n\nCome tutti i robot seri, Boston Dynamics Spot ha un meccanismo di protezione - [servizio E-Stop](https://dev.bostondynamics.com/docs/concepts/estop_service) (Stop di emergenza) che dovrebbe essere sempre attivo durante il funzionamento di Spot per evitare potenziali danni fisici. Attivare l'E-Stop congela istantaneamente tutte le articolazioni (questo avviene senza spegnere i motori se il robot era acceso).\n\nPrima di tutto, dovremmo prendere il controllo del robot. Ci sono due modi per farlo - *acquisire* o *prendere*. *Acquisire* significa chiedere il controllo in modo gentile, se qualcuno controlla il robot ora, la tua richiesta verrà rifiutata. In un altro modo, *prendere* significa prendere il controllo con forza, non importa se l'operatore attuale esiste.\n\nQuindi, per fare qualche movimento, dovresti seguire lo schema:\n\n<LessonImages src=\"boston-dynamics-spot/e_stop_scheme.png\" alt=\"Stati di esecuzione del robot\" imageClasses=\"mb\"/>\n\nRobot Execution States\n\nIn questa lezione imparerai come controllare la rotazione del robot cambiando il suo *yaw*, *roll* e *pitch*. Nell'immagine qui sotto è mostrato il sistema di coordinate del telaio del corpo:\n\n<LessonImages src=\"boston-dynamics-spot/spot_coords.png\" alt=\"Coordinate di Spot\" imageClasses=\"mb\"/>\n\nSpot coordinates\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nGli angoli in un codice sono rappresentati in radianti.\n</RoboAcademyText>\n\nCome risultato della lezione, disegnerai una lettera del tuo nome nell'aria con il volto di Spot. Iniziamo la configurazione!\n\n## Configura Gitpod\n\nPer questa lezione, utilizzeremo Gitpod, un IDE basato su cloud che ti consente di esercitarti senza installare alcun software speciale sul tuo computer.\n\n1. Iscriviti a [Gitpod](https://gitpod.io/).\n2. Vai al nostro [ambiente educativo di Spot](https://gitpod.io/#github.com/merklebot/spot-edu-environment) e aprilo nel nostro browser. Vedrai la finestra con le funzioni tipiche dell'IDE. \n3. Fai clic sull'icona del menu, quindi vai su Terminale e crea un nuovo terminale.\n\n<LessonImages src=\"boston-dynamics-spot/gitpod_terminal.png\" alt=\"terminal\" imageClasses=\"mb\"/>\n    \n    \n4. Copia-incolla questo comando:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npython3 prepare_yggdrasil.py\nsudo ./start_yggdrasil.sh\n\n</LessonCodeWrapper>\n\ne premi `Invio`.\n\n1. Apri un nuovo terminale (ora puoi farlo premendo il pulsante `+`) e testa la connessione con il comando\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nping6 200:42f6:d055:e74e:ce4a:35aa:953a:70f7\n\n</LessonCodeWrapper>\n\nDovresti vedere qualcosa del genere:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngitpod /workspace/spot-edu-environment (main) $ ping6 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09\nPING 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09(202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09) 56 data bytes\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=1 ttl=64 time=846 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=2 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=3 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=4 ttl=64 time=197 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=5 ttl=64 time=219 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=6 ttl=64 time=242 ms\n\n</LessonCodeWrapper>\n\n1. Prima dell'orario programmato ti invieremo la chiave privata per stabilire la connessione SSH.\n2. Copia la tua chiave privata nel file `id_ed25519`. Puoi trovare il file nell'esploratore della barra laterale di *stop-edu-enviroment*.\n3. **Aggiungi una riga vuota alla fine del** file `id_ed25519` ***, questo è necessario affinché SSH funzioni correttamente.*** Premi `Ctrl+S` per salvare le modifiche.\n\nSe tutto è a posto, puoi iniziare a completare la lezione modificando `lesson1.py`\n\nPer eseguire il codice, usa il comando:\n\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n\n</LessonCodeWrapper>\n\n\n<RoboAcademyText fWeight=\"700\" fStyle=\"normal\">\nRicorda di assicurarti che nessun altro stia eseguendo il proprio programma al momento.\n</RoboAcademyText>\n\n\n## Programma la sessione di pratica\n\nUtilizza il sito di pianificazione di Spot per scegliere l'orario per la tua sessione di pratica:\n\n[meetings.hubspot.com/strelka](https://meetings.hubspot.com/strelka)\n\n## Pratica\n\nOra creeremo uno script semplice per Spot per disegnare sullo schermo usando i movimenti della testa. \n\n<LessonCodeWrapper language=\"python\" codeClass=\"big-code\">\n# Import Spot Control modules\nimport bosdyn.client\nfrom bosdyn.client.robot_command import RobotCommandClient, blocking_stand\nfrom bosdyn.client.robot_command import RobotCommandBuilder\nfrom bosdyn.geometry import EulerZXY\nimport time\n# ENTER YOUR AUTH DATA HERE\nROBOT_IP=\"192.168.50.3\"\nSPOT_USERNAME=\"student\"\nSPOT_PASSWORD=\"\"\n# Helpers to control camera drawing (you don't need to modify it)\nimport requests\nVIDEOSERVER_URL=\"http://luke.merklebot:8000/\"\nVIDEOSERVER_TOKEN=\"1234\"\ndef notify_start_line():\n  requests.post(VIDEOSERVER_URL + \"start_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_stop_line():\n  requests.post(VIDEOSERVER_URL + \"stop_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_clear_canvas():\n    requests.post(VIDEOSERVER_URL + \"clear_canvas\", json={\"token\": VIDEOSERVER_TOKEN})\n# Start with registering out SDK\nsdk = bosdyn.client.create_standard_sdk('LessonOneClient')\n# Create instance of robot and auth with credentials\nrobot = sdk.create_robot(ROBOT_IP)\nrobot.authenticate(SPOT_USERNAME, SPOT_PASSWORD)\n# Create lease client and take exclusive control over Spot.  \nlease_client = robot.ensure_client('lease')\nlease = lease_client.take()\nlease_keep_alive = bosdyn.client.lease.LeaseKeepAlive(lease_client)\n# Try to power on the robot\nrobot.power_on(timeout_sec=20)\nif robot.is_powered_on():\n    print(\"Powered On\")\n\t\t# If everything went smooth, Spot face lights should turn green\nelse:\n\t\t# In case of some problems, e.g. somebody stole control over robot\n    print(\"Failed\")\n    exit(0)\n# Synchronize Spor inner time with ours - to avoid outdated commands\nrobot.time_sync.wait_for_sync()\n# To execute robot movement, create command client through which orders are sent\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\n# Start movement with simple stand up\nblocking_stand(command_client, timeout_sec=10)\n# Rotate robot body:\n#  1. Build command for body rotation. It’s not an easy task to control robot motion with commands on low level. \n#     Bosdyn Client allow as to use a shortcut - RobotCommandBuilder. It contains a number of predefined commands, \n#     you need just to choose one of your liking and insert parameters\nfootprint_R_body = EulerZXY(yaw=0.1, roll=0.1, pitch=0.1)\ncmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n#  2. Execute builded command\ncommand_client.robot_command(cmd)\ntime.sleep(2)\n# Return robot state back\ncommand_client.robot_command(RobotCommandBuilder.synchro_stand_command(footprint_R_body=EulerZXY(yaw=0, roll=0, pitch=0)))\ntime.sleep(2)\n# Change robot height\ncmd = RobotCommandBuilder.synchro_stand_command(body_height=0.1)\ncommand_client.robot_command(cmd)\n# Now we are ready to draw letter. \ndef draw_letter(command_client):\n\t\t# Choose points to draw (see the coords explanation bellow)\n    points_xy_draw = (\n        (125, 125),\n        (375, 875),\n        (500, 500),\n        (250, 500),\n        (500, 500),\n        (625, 125),\n    )\n    for x, y in points_xy_draw:\n        convert = lambda x: (x / 1000 - 0.5) * -1\n        x, y = map(convert, (x, y))\n        footprint_R_body = EulerZXY(\n            yaw=x, \n            roll=0.0, \n            pitch=y,\n        )\n        cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n        command_client.robot_command(cmd)\n        time.sleep(1)\nnotify_clear_canvas()\nnotify_start_line()\ndraw_letter(command_client)\nnotify_stop_line()\n# Turn off the robot gracefully\nrobot.power_off(cut_immediately=False)\n\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nSe dobbiamo spostare la testa di Spot in un punto della telecamera, dovremmo fare alcuni calcoli complessi con molti parametri non lineari, che non è affatto un compito semplice. Ma potremmo dire che localmente, gli angoli di yaw e pitch potrebbero essere approssimativamente usati come coordinate cartesiane con un certo coefficiente su un'immagine.\n</RoboAcademyText>\n\n\n<LessonImages src=\"boston-dynamics-spot/cartesian.jpeg\" alt=\"spot\" imageClasses=\"mb\"/>\n\nOra puoi provare a eseguire lo script e vedere il risultato. Non dimenticare di salvare il tuo codice con Ctrl+S:\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n</LessonCodeWrapper>\n\n\n### Il video di Spot può essere trovato qui:\n[https://codepen.io/smehnov/pen/BaVNrPM](https://codepen.io/smehnov/pen/BaVNrPM)\n\n\n## Sfida\nCrea uno script Python che controlla la posizione del corpo del robot con una sequenza di movimenti:\n\n1. Alzati\n2. Traccia le tue iniziali con il suo volto (una lettera, almeno 3 punti)\n3. Siediti\n\n## Risultati\n\nOra sai come:\n\n- lavorare con Spot SDK\n- costruire un comando di base\n- ruotare il corpo del robot\n- connettersi a Spot\n\nE hai persino disegnato una lettera. Congratulazioni!\n\n\n<RoboAcademyText fWeight=\"500\">\n\nAbbiamo raccolto un [rosbag](http://wiki.ros.org/rosbag) con i dati delle articolazioni di Spot, in modo da poterli visualizzare (ad esempio con [foxglove](https://www.notion.so/Lesson-1-Emergency-Stop-Initialization-Body-Position-Control-4ccf6316330d4680ab1bb571b2b788d5)). Il certificato verrà inviato alla tua email a breve.\n\n</RoboAcademyText> \n\n\n## [Pianifica la tua prima lezione](https://meetings.hubspot.com/strelka)","fileInfo":{"path":"it/learn/boston-dynamics-spot/overview.md","name":"overview"},"defaultName":"Software Developing for Boston Dynamics Spot","lastUpdate":null}},"context":{}}