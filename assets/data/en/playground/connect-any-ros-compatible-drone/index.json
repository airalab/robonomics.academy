{"hash":"01c219dc9a3b05f7af1f835651efa07019486d06","data":{"playground":{"id":"bb9fc42ecaf579f25d958f2bf60b18ec","docId":2,"title":"Connect ROS-compatible drone","description":"Connect any ros compatible robot under robonomics parachain control.","content":"\n\n## Part 1. Launch by Transaction\n\n**In this article we will show that with the help of Robonomics tools you can control any ROS-compatible device. We will find a random drone simulation package on the web and adjust it to run with Robonomics.**\n**Requirements:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (installation manual [here](http://wiki.ros.org/melodic/Installation))\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics node (binary file) (download latest release [here](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n</List>\n\n<br/>\n\nThe entire process of coding this part of demo is presented in a video below.\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. Find a simulation\nLet's surf the web. Google for `ROS drone simulator`. The first link will mostly likely show you the `tum_simulator` page on [http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\nIt's pretty outdated, so we better find a fork for our system. Google for `tum_simulator Ubuntu 18 Gazebo 9 fork`. The first result is a GitHub [repo](https://github.com/tahsinkose/sjtu-drone) with an appropriate package. Download it\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\nDon’t forget to add source command to `~/.bashrc`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\nNow we can run the simulation to see what do we need to do to take the drone under parachain control.\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. Inspect ROS topics\nWhen the simulation is runnung, in a new tab run the following command to see the list of topics used by the drone:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\nLet's take a look at `/cmd_vel`, `/drone/takeoff` and `/drone/land`:\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\nAs may be seen, there should be messages of `Twist` and `Empty` types, they are parts of `std_msgs` and `geometry_msgs`, we'll use this in the controller. Shut the simulation for a while.\n\n## 3. Download controller package\nGlobally, the main difference from the casual ROS robot controller is a block of code, which checks all the transactions in the network using [Robonomics IO](https://wiki.robonomics.network/docs/rinterface/). The package itself is available on GitHub. Download it and build the workspace:\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. Manage accounts in DAPP\nSince we are testing, let's create a local robonomics network node with robonomics binary file:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Important!** Before next launches it is necessary to remove a directory `db` with\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nAfter a successful launch create accounts following [this](https://wiki.robonomics.network/docs/create-account-in-dapp/) manual. **Do not forget to save each account's seed and address! You will need them for transactions**. Add these addresses, seeds and path to robonomics binary file to file `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Transfer some money (units) to these accounts:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. Launching the drone under parachain control\n\nUp to now the **only thing running** should be the robonomics local node. In a separate terminal launch drone simulation:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nRun the script:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\nNow you can send a transaction triggering the drone to start flying. To do so, you should use the Robonomics IO `write` subcommand of robonomics binary file:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nWhere `<DRONE_ADDRESS>`  and `<EMPLOYER’S_KEY>` are replaced with  previously saved strings accordingly.\nYou should see the log `\"Taking Off\"` and the drone should start flying:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\nThat's how any ROS-compatible robot can be controlled by Robonomics parachain control.\n\n\n##  Part 2. Saving Data To Blockchain\n\n**In this part we will continue using Robonomics tools to make a drone be controlled by a parachain. This time we will add sending data to IPFS and hash storing in chain options. Below is the instruction and code snippets. Requirements:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (installation manual [here](http://wiki.ros.org/melodic/Installation))\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22 (download from [here](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz) and install)\n</li>\n\n<li class=\"flex\">\n\nRobonomics node (binary file) (download latest release [here](https://github.com/airalab/robonomics/releases))\n</li>\n\n<li>Python dependencies:\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\nThe entire process of coding this part of demo is presented in a video below.\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. Add dependencies\nIf we launch a simulation and look at the topic list (see part 1), we will see, that there is one topic containing front camera data and using `sensor_msgs/Image` message type:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\nLet's try to take a picture every 1 second and after the flight publish these photos to IPFS. If you have completed the first tutorial, you don't need to download anything else. It's the `drone_sample_controller_pictures.py` script.\n\n## 2. Manage accounts in DAPP\nAs done in a previous tutorial, create a local robonomics network node with robonomics binary file:\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**Important!** Before next launches it is necessary to remove a directory `db` with\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\nAfter a successful launch create accounts following [this](https://wiki.robonomics.network/docs/create-account-in-dapp/) manual. **Do not forget to save each account's seed and address! You will need them for transactions**. Add these addresses, seeds and path to robonomics binary file to file `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Transfer some money (units) to these accounts:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. Launch\nUp to now the **only thing running** should be the robonomics local node. In a separate terminal launch drone simulation:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nIn another one launch ipfs daemon:\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nRun the script:\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\nNow you can send a transaction triggering the drone to start flying and taking pictures. To do so, you should use the Robonomics IO `write` subcommand of robonomics binary file:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\nWhere `<DRONE_ADDRESS>`  and `<EMPLOYER’S_KEY>` are replaced with  previously saved strings accordingly.\nYou should see the log `\"Taking Off\"` and the drone should start flying and taking pictures:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\nLater, when the job is done, on the Robonomics portal go to `Developer` -> `Chain state` and add a `DRONE` datalog using `“+”` button with selected `datalog` as state query. The IPFS hash of the telemetry has been saved in the blockchain. To see the data simply copy the hash and add it to the local [gateway](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/) address `localhost:8080/ipfs/`:\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"en/playground/connect-any-ros-compatible-drone.md","name":"connect-any-ros-compatible-drone"}}},"context":{}}