{"hash":"138fdbc9a1525521b17e4ac2d54241879752434d","data":{"playground":{"id":"eacaced5ce083bb0db49c0534405d65a","docId":4,"title":"Connect unmanned aerial vehicle","description":"Connect unmanned aerial vehicle","content":"\n**Drone starts moving after transcation and store file with the coordinates in IPFS. The control script is based on the [GAAS demo script](https://github.com/generalized-intelligence/GAAS)**  \n\nhttps://youtu.be/4CwtGAX1OwM\n\n<br/>\n\n## Requirements\n\n<List>\n\n<li> dependencies for control:\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt install -y \\\n\tpython3-pip \\\n\tninja-build \\\n\texiftool \\\n\tpython-argparse \\\n\tpython-empy \\\n\tpython-toml \\\n\tpython-numpy \\\n\tpython-yaml \\\n\tpython-dev \\\n\tpython-pip \\\n\tninja-build \\\n\tprotobuf-compiler \\\n\tlibeigen3-dev \\\n\tgenromfs\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\">\npip3 install \\\n\tpandas \\\n\tjinja2 \\\n\tpyserial \\\n\tcerberus \\\n\tpyulog \\\n\tnumpy \\\n\ttoml \\\n\tpyquaternion\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo [installation tutorial](http://wiki.ros.org/melodic/Installation)\n</li>\n\n<li>extra packages:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\nsudo apt-get install python-jinja2\nsudo apt-get install python-catkin-pkg\nsudo apt-get install python3-catkin-pkg-modules\n</LessonCodeWrapper>\n\n</li>\n\n<li>IPFS verson 0.4.22\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nwget https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-amd64.tar.gz\ntar -xvzf go-ipfs_v0.4.22_linux-amd64.tar.gz\ncd go-ipfs\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomics node (binary file) (download latest release [here](https://github.com/airalab/robonomics/releases))\n</li>\n\n</List>\n\n<br/>\n\n## Environment Setup\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nsudo ./install_geographiclib_datasets.sh\ncd ~/catkin_ws/src\ngit clone https://github.com/PX4/Firmware.git\ncd Firmware\ngit checkout v1.9.0\nbash ./Tools/setup/ubuntu.sh\n</LessonCodeWrapper>\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/catkin_ws/src\ngit clone https://github.com/generalized-intelligence/GAAS.git\ncp -r ~/catkin_ws/src/GAAS/simulator/models/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/models/\ncp -r ~/catkin_ws/src/GAAS/simulator/worlds/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/worlds/\ncp -r ~/catkin_ws/src/GAAS/simulator/posix-config/* ~/catkin_ws/src/Firmware/posix-configs/SITL/init/ekf2/\n</LessonCodeWrapper>\n\nModifying your `.bashrc` file, adding the following lines to the bottom:  \n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash   \nsource ~/catkin_ws/src/Firmware/Tools/setup_gazebo.bash ~/catkin_ws/src/Firmware/ ~/catkin_ws/src/Firmware/build posix_sitl_default \nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware \nexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware/Tools/sitl_gazebo\nexport GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models:~/catkin_ws/src/GAAS/simulator/models\n</LessonCodeWrapper>  \n\n  \n## Control Package Installation\nIn a new Terminal:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd catkin_ws/src\ngit clone https://github.com/tubleronchik/robonomics_drone_sim.git\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\n## Robonomics Network\n\nTo create a local robonomics network go to the folder with the robonomic binary file and run:  \n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --rpc-cors all\n</LessonCodeWrapper>\n\nAdd robonomic's path to `config.py`\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/IPFS.jpg\" alt=\"IPFS\"/>\n\nGo to the [Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) and switch to local node.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/localNode.jpg\" alt=\"localNode\"/>\n\nGo to **Accounts** and create **DRONE** and **EMPLOYER** accounts. Save the account names and keys and path to **robonomics** to `~/catkin_ws/src/drone_sim/src/config.py`. Transfer some money into the accounts.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/addingAcc.jpg\" alt=\"accounts\"/>\n\n## Running Simulation\nRun IPFS daemon\n\n<LessonCodeWrapper language=\"bash\">\ncd go-ipfs\nipfs daemon\n</LessonCodeWrapper>\n\nIn another terminal launch the simulation:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch px4 mavros_posix_sitl.launch\ncd ~/catkin_ws/src/robonomics_drone_sim/src\npython3 takeoff.py\n</LessonCodeWrapper>\n\nWaiting till \"Waiting for payment\" \n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/launch.jpg\" alt=\"launch\"/>\n\nTo send a transaction run in another window:\n`echo \"ON\" | ./robonomics io write launch -r <drone_addres> -s <employer_key>` - where **<drone_address>** and **<employer_key>** should be replaced with the strings from `config.py` accordingly.\n\nAfter data was pushed to IPFS, go to the **Chain State** in [Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/). Select **datalog** in query and add DRONE datalog using `+` button.\n\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/datalog.jpg\" alt=\"datalog\"/>\n\nYou can find drone's telemetry running `https://gateway.ipfs.io/ipfs/<hash>` inserting the hash from above.\n\n<LessonImages imageClasses=\"mb\" src=\"iris-drone/output.jpg\" alt=\"output\"/>\n\nIt's important to remove `db` derictory before next launches using  \n` rm -rf ~/.local/share/robonomics/chains/dev/db`","fileInfo":{"path":"en/playground/iris-drone.md","name":"iris-drone"}}},"context":{}}