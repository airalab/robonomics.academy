{"hash":"8d66541f6e2b7bde6cbd76ed09ec87c40b5569d7","data":{"course":{"id":"d1d1a4fd3bf48283f57ba8088ea28d24","title":"Emergency Stop, Initialization, Body Position Control","description":"During this lesson you will learn how to authorize yourself as a user, get motor power control and send basic commands to Spot.","content":"\n<RoboAcademyText fWeight=\"500\">\nDuring this lesson, you will learn how to authorize yourself as a user, get motor power control and send basic commands to Spot.\n</RoboAcademyText>\n\n## Theory\n\nAs and all serious robots, Boston Dynamics Spot has a protection mechanism — [E-Stop service](https://dev.bostondynamics.com/docs/concepts/estop_service) (Emergency Stop) that should always be active during the operation of the spot to avoid potential physical damage. Turning on E-Stop instantly freezes all joints (this happens without turning off the engines if the robot was turned on).\n\nFirst of all, we should lease control over robot. There are two ways to do it - *acquire* or *take*. *Acquire* means asking for control in a gentle way, if anybody controls the robot now, your request will be declined. In another way, *take* means forcefully taking control, it doesn't matter if the current operator exists.\n\nSo, to make some movement, you should follow the scheme:\n\n<LessonImages src=\"boston-dynamics-spot/e_stop_scheme.png\" alt=\"Robot Execution States\" imageClasses=\"mb\"/>\n\nRobot Execution States\n\nIn this lesson you will learn how to control robot rotation by changing its *yaw*, *roll* and *pitch*. In the picture bellow the body frame coordinate system is shown:\n\n<LessonImages src=\"boston-dynamics-spot/spot_coords.png\" alt=\"Spot coordinates\" imageClasses=\"mb\"/>\n\nSpot coordinates\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nThe angles in a code are representet in radians.\n</RoboAcademyText>\n\nAs a result of the lesson, you’ll draw a first letter of your name in the air with Spot’s face. Let start the setup!\n\n## Setup Gitpod\n\nFor this lesson, we'll be using Gitpod, a cloud-based IDE that allows you to practice without installing any special software on your computer.\n\n1. Sign up for [Gitpod](https://gitpod.io/).\n2. Got to our [Spot education environment](https://gitpod.io/#github.com/merklebot/spot-edu-environment) and open it in our browser. You will see the window with typical IDE functions. \n3. Click on Menu icon, then go to Terminal and create a new terminal.\n\n<LessonImages src=\"boston-dynamics-spot/gitpod_terminal.png\" alt=\"terminal\" imageClasses=\"mb\"/>\n    \n    \n4. Copy-paste this command:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npython3 prepare_yggdrasil.py\nsudo ./start_yggdrasil.sh\n\n</LessonCodeWrapper>\n\nand press `Enter`.\n\n1. Open new terminal (now you can do it by pressing `+` button) and test connection with command\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nping6 200:42f6:d055:e74e:ce4a:35aa:953a:70f7\n\n</LessonCodeWrapper>\n\nYou should see something like this:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngitpod /workspace/spot-edu-environment (main) $ ping6 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09\nPING 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09(202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09) 56 data bytes\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=1 ttl=64 time=846 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=2 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=3 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=4 ttl=64 time=197 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=5 ttl=64 time=219 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=6 ttl=64 time=242 ms\n\n</LessonCodeWrapper>\n\n1. Before scheduled time we will send you private key to establish SSH connection.\n2. Copy your private key to file `id_ed25519`. You can find the file in the sidebar explorer of *stop-edu-enviroment*.\n3. **Add a blank line at the end of the** `id_ed25519` ***file, this is necessary for SSH to work properly.*** Press `Ctrl+S` to save changes.\n\nIf everything is ok, you can start completing the lesson by editing `lesson1.py`\n\nTo execute the code, use command:\n\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n\n</LessonCodeWrapper>\n\n\n<RoboAcademyText fWeight=\"700\" fStyle=\"normal\">\nRemember to make sure no one else is running their program at the moment.\n</RoboAcademyText>\n\n\n## Schedule the practice session\n\nUse the Spot scheduling website to pick the timeslot for your practice session:\n\n[meetings.hubspot.com/strelka](https://meetings.hubspot.com/strelka)\n\n## Practice\n\nNow we will make a simple script for Spot for drawing on screen using its head movements. \n\n<LessonCodeWrapper language=\"python\" codeClass=\"big-code\">\n# Import Spot Control modules\nimport bosdyn.client\nfrom bosdyn.client.robot_command import RobotCommandClient, blocking_stand\nfrom bosdyn.client.robot_command import RobotCommandBuilder\nfrom bosdyn.geometry import EulerZXY\nimport time\n# ENTER YOUR AUTH DATA HERE\nROBOT_IP=\"192.168.50.3\"\nSPOT_USERNAME=\"student\"\nSPOT_PASSWORD=\"\"\n# Helpers to control camera drawing (you don't need to modify it)\nimport requests\nVIDEOSERVER_URL=\"http://luke.merklebot:8000/\"\nVIDEOSERVER_TOKEN=\"1234\"\ndef notify_start_line():\n  requests.post(VIDEOSERVER_URL + \"start_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_stop_line():\n  requests.post(VIDEOSERVER_URL + \"stop_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_clear_canvas():\n    requests.post(VIDEOSERVER_URL + \"clear_canvas\", json={\"token\": VIDEOSERVER_TOKEN})\n# Start with registering out SDK\nsdk = bosdyn.client.create_standard_sdk('LessonOneClient')\n# Create instance of robot and auth with credentials\nrobot = sdk.create_robot(ROBOT_IP)\nrobot.authenticate(SPOT_USERNAME, SPOT_PASSWORD)\n# Create lease client and take exclusive control over Spot.  \nlease_client = robot.ensure_client('lease')\nlease = lease_client.take()\nlease_keep_alive = bosdyn.client.lease.LeaseKeepAlive(lease_client)\n# Try to power on the robot\nrobot.power_on(timeout_sec=20)\nif robot.is_powered_on():\n    print(\"Powered On\")\n\t\t# If everything went smooth, Spot face lights should turn green\nelse:\n\t\t# In case of some problems, e.g. somebody stole control over robot\n    print(\"Failed\")\n    exit(0)\n# Synchronize Spor inner time with ours - to avoid outdated commands\nrobot.time_sync.wait_for_sync()\n# To execute robot movement, create command client through which orders are sent\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\n# Start movement with simple stand up\nblocking_stand(command_client, timeout_sec=10)\n# Rotate robot body:\n#  1. Build command for body rotation. It’s not an easy task to control robot motion with commands on low level. \n#     Bosdyn Client allow as to use a shortcut - RobotCommandBuilder. It contains a number of predefined commands, \n#     you need just to choose one of your liking and insert parameters\nfootprint_R_body = EulerZXY(yaw=0.1, roll=0.1, pitch=0.1)\ncmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n#  2. Execute builded command\ncommand_client.robot_command(cmd)\ntime.sleep(2)\n# Return robot state back\ncommand_client.robot_command(RobotCommandBuilder.synchro_stand_command(footprint_R_body=EulerZXY(yaw=0, roll=0, pitch=0)))\ntime.sleep(2)\n# Change robot height\ncmd = RobotCommandBuilder.synchro_stand_command(body_height=0.1)\ncommand_client.robot_command(cmd)\n# Now we are ready to draw letter. \ndef draw_letter(command_client):\n\t\t# Choose points to draw (see the coords explanation bellow)\n    points_xy_draw = (\n        (125, 125),\n        (375, 875),\n        (500, 500),\n        (250, 500),\n        (500, 500),\n        (625, 125),\n    )\n    for x, y in points_xy_draw:\n        convert = lambda x: (x / 1000 - 0.5) * -1\n        x, y = map(convert, (x, y))\n        footprint_R_body = EulerZXY(\n            yaw=x, \n            roll=0.0, \n            pitch=y,\n        )\n        cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n        command_client.robot_command(cmd)\n        time.sleep(1)\nnotify_clear_canvas()\nnotify_start_line()\ndraw_letter(command_client)\nnotify_stop_line()\n# Turn off the robot gracefully\nrobot.power_off(cut_immediately=False)\n\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nIf we need to move head of Spot to some point in camera, we should some large calculations with many non-linear parameters, which is not a simple task at all. But we could say, that locally, yaw and pitch angles could be approximately used as a cartesian coordinates with some coefficient on a picture.\n</RoboAcademyText>\n\n\n<LessonImages src=\"boston-dynamics-spot/cartesian.jpeg\" alt=\"spot\" imageClasses=\"mb\"/>\n\nNow you can try to run the script and see the result. Don’t forget to save your code with Ctrl+S:\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n</LessonCodeWrapper>\n\n\n### Video of Spot could be found here:\n[https://codepen.io/smehnov/pen/BaVNrPM](https://codepen.io/smehnov/pen/BaVNrPM)\n\n\n## Challenge\nCreate a Python script controls robot body position with a sequence of motions:\n\n1. Stand-up\n2. Trace your initials with it's face (one letter, at least 3 points)\n3. Sit-down\n\n## Results\n\nNow, you know how to:\n\n- work with Spot SDK\n- construct a basic command\n- rotate robot body\n- connect to the Spot\n\nAnd even drew a letter. Congratulations!\n\n\n<RoboAcademyText fWeight=\"500\">\n\nWe collected a [rosbag](http://wiki.ros.org/rosbag) with Spot’s joint data, so you could visualize them (for example with [foxglove](https://www.notion.so/Lesson-1-Emergency-Stop-Initialization-Body-Position-Control-4ccf6316330d4680ab1bb571b2b788d5)). The certificate will be sent to your email soon.\n\n</RoboAcademyText> \n\n\n## [Schedule your first lesson](https://meetings.hubspot.com/strelka)","fileInfo":{"path":"en/learn/boston-dynamics-spot/overview.md","name":"overview"},"defaultName":"Software Developing for Boston Dynamics Spot","lastUpdate":null}},"context":{}}