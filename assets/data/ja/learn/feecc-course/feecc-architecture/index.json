{"hash":"5d4f08f99729279cbad41c23c8d66dce511a8ae5","data":{"course":{"id":"9b4b5b3463f4ed620477dfab79000d97","title":"アーキテクチャ","description":"このコースは、Feeccシステムとそのすべてのコンポーネントを知ることについてです。","content":"\n<RoboAcademyText fWeight=\"500\">\nこのレッスンでは、Feeccのアーキテクチャを詳しく見て、ソフトウェアのすべてのコンポーネントを見ていきます。\n</RoboAcademyText>\n\nFeeccプラットフォームは、エンジニア作業台の制御から分析の提供まで、いくつかのサービスで構成されています。各サービスは、企業環境で展開に必要な機能のいくつかに責任を持っています。\n\n## Feeccエンジニア作業台\n\nエンジニア作業台の主なタスクは、組立エンジニアの作業スペースを整理することです。エンジニアが必要とするデバイスは、タスクによって異なります。\n\n- 製造プロセスのビデオ録画を組織するためのIPカメラ;\n- 個人のRFIDカードによるシステム内での識別のためのRFIDリーダー;\n- 製品ラベルのスキャンのためのバーコードリーダー;\n- 製造製品のラベリングのためのラベルプリンター;\n- さまざまなデバイス/ステーションからデータを収集するデジタルセンサー。\n\nエンジニア作業台ソフトウェアは通常、次のコンテナで構成されています。まず、製品の組み立て中に従業員が作するコンピューターにインストールが必要なソフトウェア:\n\n1. [feecc-workbench-daemon](https://github.com/Multi-Agent-io/feecc-workbench-daemon) — Feeccプラットフォームの中心であり、ユーザーにすべてのFeeccの機能と構成へのアクセスを提供するソフトウェア。また、ラベルプリンターを使用してラベルを印刷し、RTSPストリームからビデオを記録するための軽量サービスも含まれています。\n2. [feecc-workbench-frontend](https://github.com/Multi-Agent-io/feecc-workbench-frontend) — Feeccプラットフォームとの従業員のインタラクションのためのWebインターフェース;\n3. [feecc-hid-reader-daemon](https://github.com/Multi-Agent-io/feecc-hid-reader-daemon) — USB周辺機器のイベントを送信するためのPythonデーモン;\n\n次に、従業員のコンピューターとローカルネットワーク内のサーバーの両方にインストールできるソフトウェア:\n\n1. [feecc-ipfs-gateway](https://github.com/Multi-Agent-io/feecc-ipfs-gateway) — IPFSにファイルを公開するためのマイクロサービスであり、より具体的には、ファイルCIDをRobonomics Networkに公開するためのものです。\n\n以下の図は、企業環境でのFeeccエンジニアの職場アーキテクチャを示しています。IPFSゲートウェイ（およびIPFSノードおよびクラスターピアとしてのMongoDB）は、各従業員のコンピューターにホストされることができ、これによりシステムの分散化が向上しますが、計算リソースのコストがかかります。\n\n<LessonImages src=\"feecc-course/feecc_global_hardware.png\" alt=\"an architecture of Feecc\"/>\n\n### 1つのワークスペースのサポートされるハードウェア:\n\n#### RFIDスキャナー\n\n内部バッジで現場のエンジニアを認証するためにUSB RFIDスキャナーが必要です。着信情報は、`feecc-hid-reader-daemon`を使用して処理されます。\n\n#### バーコードスキャナー\n\nUSBバーコードスキャナーは、バーコードによる製品の識別、サービスへのコマンドの送信、および証明書の正しい割り当てのために必要です。着信情報も`feecc-hid-reader-daemon`で処理されます。2次元での読み取りが望ましいが、必須ではありません。\n\n#### 従業員のコンピューター\n\n小さなシングルボードコンピューターは、外部デバイス（バーコードスキャナー、RFIDスキャナー）からの信号を処理し、プリンターに画像を印刷するためのリクエストを送信し、ビデオ録画の開始と停止、IPFSゲートウェイへのデータ送信を行います。次のサービスを実行します:`feecc-workbench-frontend`、ラベルプリンターとカメラサポートを備えた`feecc-workbench-daemon`、`feecc-hid-reader-daemon`。Wi-FiまたはLAN経由のインターネット接続が必要です。\n    \n注意すべきは、モニター付きの単一の支払いコンピューターの代わりに、任意のコンピューターを使用できることです。オペレーティングシステムGNU/LINUXがネイティブまたは仮想マシンを介してインストールされている必要があります。\n    \n最小技術仕様:\n    \n- CPU: Broadcom BCM2711、クアッドコアCortex-A72（ARM v8）64ビットSoC @ 1.8GHzまたは同等;\n- RAM: 4GB LPDDR4-3200または同等。\n\n#### 画面\n\n従業員が現在の生産工程に関する情報を入力および表示するためにモニターを使用します。また、エンジニアに現在の段階に関するヒントを表示します。他の入力デバイスも使用できます。\n\n#### ラベルプリンター\n\nラベルプリンターは、製品の識別および検証のためにラベルを印刷するために使用されます。プリンターとのやり取りは、`feecc-workbench-daemon`の対応サービスを使用して行われます。私たちの場合、XPrinter 236Bプリンターを使用しています。\n\n#### IPカメラ\n\n製品証明書に含めるために製造プロセスをキャプチャするためのIPカメラ。製品の組み立てエリアの上に配置されています。カメラとのやり取りは、`feecc-workbench-daemon`の対応サービスを使用して行われます。\n\n必要な技術仕様：PoE電源供給、RTSPデータ転送プロトコル。私たちの場合、Hikvision HiWatch DS-i200dを使用しています。\n\n### 複数のワークスペースに対応するサポートされるハードウェア：\n\n#### ルーターまたはスイッチ\n\nIPカメラに電力を供給し、それらを`feecc-workbench-daemon`サービスに接続するために、PoE 802.3afサポートおよび出力ポートでのPoE給電が必要なルーターまたはスイッチ。私たちの場合、MikroTik hEX PoE（3〜4ワークプレース用1台）および電源を使用しています。\n\n#### サーバー（オプション）\n\n`feecc-ipfs-gateway`を実行できる大きなサーバーもインストールできます。従業員のワークプレースの1つのコンピューターの場所に配置することができます。 \n\n最小の技術仕様:\n\n- CPU：Intel Xeon E-2200プロセッサーまたは同等品；\n- RAM：8GB；\n- ストレージ：1TB HDD；\n- LANインターフェース：1 Gbit/s。\n\n## Feecc Analytics\n\nFeecc Analyticsの主なタスクは、完成品の追跡プロセスと製品管理部門における事前販売検査の組織化です。\n\nFeecc Analyticsは以下のコンテナに依存しています:\n\n1. [feecc-analytics-backend](https://github.com/Multi-Agent-io/feecc-analytics-backend) — アナリティクスサービスを展開するための主要ソフトウェア;\n2. [feecc-analytics-frontend](https://github.com/Multi-Agent-io/feecc-analytics-frontend) — アナリティクスサービスのフロントエンドソフトウェア;\n\n通常、組織内でデータセキュリティの目的で単一のサーバーにローカルに展開されます。\n\nFeecc Analyticsが動作するために必要なハードウェアは、ウェブアプリケーションが実行されるローカルまたはリモートサーバー（仮想マシン）とバーコードスキャナーです。各認証された従業員は、ユーザー名とパスワードを使用して自分のコンピューターからウェブアプリケーションにアクセスできます。\n\n## Feecc Validator\n\nFeecc Validatorの主なタスクは、デジタル製品証明書の整合性を検証するために異なるデータストアらのデータを比較することです。\n\nFeecc Validatorは以下のコンテナに依存しています:\n\n1. [feecc-validator-backend](https://github.com/Multi-Agent-io/feecc-validator-backend) — 証明書の検証とユーザーが提供されたユニットに関連するデータを取得するために設計されたマイクロサービス;\n2. [feecc-validator-frontend](https://github.com/Multi-Agent-io/feecc-validator-frontend) — 検証マイクロサービスとのインタラクションのためのWebインターフェース。\n\nFeecc Analyticsと同様に、単一のサーバーにローカルに展開され、バーコードスキャナーが必要です。\n\n<RoboAcademyText fWeight=\"500\">\n次のレッスンでは、コンピューター上でローカルに実行される小さなデモを通じてFeeccシステムを詳しく見ていきます。\n</RoboAcademyText>","fileInfo":{"path":"ja/learn/feecc-course/feecc-architecture.md","name":"feecc-architecture"},"defaultName":"Getting Used to Feecc","lastUpdate":null}},"context":{}}