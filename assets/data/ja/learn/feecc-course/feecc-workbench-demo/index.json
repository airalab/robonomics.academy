{"hash":"e32ec6aa0237b51fe496ef5a5df720ef84304a93","data":{"course":{"id":"6e1654d43b6a11aebfabb46d1723e80f","title":"Feeccのデモ","description":"このコースは、Feeccシステムとそのすべてのコンポーネントを知ることについてです。","content":"\n<RoboAcademyText fWeight=\"500\">\nこのレッスンでは、仮想テストベッドを使用してFeeccの基本機能をテストします。これは、製品追跡システムの実際のインスタンスをエミュレートした例です。\n</RoboAcademyText>\n\nデモのために、ラベル印刷やビデオ録画などの典型的な機能はありませんが、そのようなシステムの主要なコンセプトを保持しています。\n\n## 前提条件\n\nデモを実行するには、次のものが必要です:\n\n- UNIXライクなシステム（[Ubuntu 22.04.2](https://releases.ubuntu.com/jammy/)でテスト済み）\n- [Docker](https://docs.docker.com/engine/install/ubuntu/)および[Docker compose](https://docs.docker.com/compose/)\n- Webブラウザ（Google ChromeとMozilla Firefoxでテスト済み）\n\n## インストール\n\n次のコマンドを実行します:\n\n<LessonCodeWrapper language=\"bash\">\ngit clone https://github.com/Multi-Agent-io/feecc-academy\ncd feecc-academy\nsudo docker compose up -d --build\n</LessonCodeWrapper>\n\n動作しているコンテナを確認するには、次のコマンドを実行します:\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker ps -a\n</LessonCodeWrapper>\n\n次の出力が表示されるはずです:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\" noLines noCopyIcon>\nCONTAINER ID   IMAGE                               COMMAND                  CREATED          STATUS                             PORTS     NAMES\n0db8382bb271   feecc-academy-workbench-daemon      \"uvicorn app:app --h…\"   19 seconds ago   Up 7 seconds (healthy)                       feecc_academy_workbench_daemon\n0dbc7bb977d1   feecc-academy-workbench-frontend    \"node nodeServer.js\"     20 seconds ago   Up 19 seconds (health: starting)             feecc_academy_workbench_frontend\na74fa229eb90   robonomics/robonomics:sha-bd71a23   \"robonomics --dev --…\"   20 seconds ago   Up 19 seconds (health: starting)             feecc_academy_robonomics_node\n0c9e8022658a   mongo:jammy                         \"docker-entrypoint.s…\"   20 seconds ago   Up 19 seconds (healthy)                      feecc_academy_mongoDB\n6b0748904d0f   ipfs/go-ipfs:v0.17.0                \"/sbin/tini -- /usr/…\"   20 seconds ago   Up 19 seconds (healthy)                      feecc_academy_ipfsnode\n814e6f489a77   nyurik/alpine-python3-requests      \"tail -f /dev/null\"      20 seconds ago   Up 19 seconds                                feecc_academy_hid_emulator\n</LessonCodeWrapper>\n\n## デモの開始\n\n1. ブラウザでhttp://localhost:3000/に移動し、歓迎画面が表示されるはずです。\n\n2. この段階では、システムは従業員にRFIDカードをスキャナーに置くよう促します。デモでは、認証��`hid-emulator.py`を使用できます。これを行うには、別のDockerコンテナを実行します:\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker exec -ti feecc_academy_hid_emulator sh\npython3 hid-emulator.py\n</LessonCodeWrapper>\n\nRFIDカードを提供し、バーコードをスキャンする2つの機能をエミュレートできます。最初の機能が必要です。`1`を入力します。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\" noLines noCopyIcon>\n> Select emulated action (1/2): \n>  1. Put ID card on the RFIDスキャナー.\n>  2. Scan a sample barcode with a barcode scanner.\n> 1\n> INFO:2023-03-21 21:42:05,370:Event relayed to endpoint http://127.0.0.1:5000/workbench/hid-event\n</LessonCodeWrapper>\n\n3. 構成タイプを選択する画面が表示されます。`SINGLE DEVICE`を選択してください。\n\n<LessonImages src=\"feecc-course/menu.png\" alt=\"Feecc start menu\"/>\n\n4. ユニークなIDが作成されたデバイスでの作業の開始を示す通知が左下隅に表示されます。青い通知は仮想プリンターのアクティビティも表示します。実際のセットアップでは、デバイスのIDが印刷されたバーコードがこの時点で印刷されます。\n\n<LessonImages src=\"feecc-course/single_device.png\" alt=\"Single device composition\"/>\n\n5. `START COMPOSITION`をクリックしてデバイスの組み立てプロセスの記録を開始します。すべての必要な組み立て手順を進めるよう促されます。従業員が手順を完了するたびに、`NEXT`ボタンをクリックし、その後ビデオがIPFSに保存されます。組み立てを一時停止する（`PAUSE`）ことも可能で、後で戻って再開するか、プロセスを完全に停止する（`STOP`）こともできます。\n\n6. すべての組み立て段階が完了すると、`FINISH`ボタンが表示され、その後Feeccはデバイスの証明書の保存を提案します。ただし、これを行う前に、ブラウザで[local Robonomicsノード](https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/explorer)を開いておく必要があります。その後、Feeccに戻り、`SAVE PASSPORT`をクリックしてください。\n    \n    画面の隅に新しい通知が表示されます：証明書がRobonomicsとIPFSにアップロードされたことを通知する通知、および証明書へのリンクを含むシールタグとQRコードの印刷に関する2つの青いメッセージ。\n\n<LessonImages src=\"feecc-course/single_certificate.png\" alt=\"Cetrificate of single composition\"/>\n\n7. Robonomicsローカルノード画面の`Chain info`セクションで、`recent events`列の下に新しいイベント`datalog.NewRecord`が表示されるはずです。展開すると、デバイスの証明書ファイルに対応するIPFS CIDが`bytes`フィールドに表示されます。\n\n<LessonImages src=\"feecc-course/single_datalog.png\" alt=\"Datalog of single composition\"/>\n\n印刷されたQRコードには、このCIDへのリンクが含まれており、ブラウザで証明書ファイルを開くことができます。ローカルIPFSノードがその探索性を持っていない場合は、`localhost:8080/ipfs/CID`でファイルにアクセスできます。証明書の内容は次のようになります：\n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\" noLines noCopyIcon>\nUnit Unique Code: 423d3c1b42f6427e80cc881a16e07451\nUnit Model Name: Single Device\nTotal Assembly Time: 0:05:37\nProduction Stages:\n- Name: Prepare Tools (not finished.)\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:38:47\n  Finish Time: 26-06-2023 17:40:28\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Prepare Tools (not finished.)\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:40:30\n  Finish Time: 26-06-2023 17:42:06\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Prepare Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:42:16\n  Finish Time: 26-06-2023 17:43:00\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Saw Through the Single Device\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:43:00\n  Finish Time: 26-06-2023 17:43:51\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Stack Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 17:43:51\n  Finish Time: 26-06-2023 17:44:36\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n</LessonCodeWrapper>\n\n8. 今度は、複数のデバイスで構成される複合組立のための証明書を作成してみましょう。タイプ選択メニューで`COMPOSITE DEVICE`をクリックし、次に`SAMPLE DEVICE`をクリックしてください。構成番号フィールドにあるユニットIDをコピーしてください。後で必要になります。その後、デバイスの組み立ての標準手順を進めてください。\n\n9. 組み立て後、`COMPOSITE DEVICE`に戻り、複合組立を最終的にするために`FINAL ASSEMBLY`を押してください。システムは、組み立てられたデバイスのユニットIDを提供するよう求めます。従業員はバーコードをスキャンする必要があります。このプロセスをシミュレートするには、`hid-emulator.py`に戻り、バーコードスキャンのために関数`2`を選択し、保存されたユニットIDを挿入してください。\n\n10. 次に、システムは複合組立の必要な段階を進むよう促し、そのための証明書を生成します。\n\n<LessonCodeWrapper language=\"json\" codeClass=\"big-code\" noLines noCopyIcon>\nUnit Unique Code: d08101feae7c4efbb5529885c9ad544b\nUnit Model Name: Composite Device\nTotal Assembly Time: 0:00:03\nProduction Stages:\n- Name: Prepare Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 18:18:25\n  Finish Time: 26-06-2023 18:18:26\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Tape the Sample Device to the base plate\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 18:18:26\n  Finish Time: 26-06-2023 18:18:27\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\n- Name: Stack Tools\n  Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n  Start Time: 26-06-2023 18:18:27\n  Finish Time: 26-06-2023 18:18:28\n  Assembly data in IPFS: This is a place for any production data, let it be video\n    record, some sensor data or any other data collection representing the production\n    process.\nUnit Components:\n- Unit Unique Code: b165b382c3674127a6aaf5817c5a7040\n  Unit Model Name: Sample Device\n  Total Assembly Time: 0:00:03\n  Production Stages:\n  - Name: Prepare Tools\n    Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n    Start Time: 26-06-2023 18:17:45\n    Finish Time: 26-06-2023 18:17:46\n    Assembly data in IPFS: This is a place for any production data, let it be video\n      record, some sensor data or any other data collection representing the production\n      process.\n  - Name: Assemble Sample Device\n    Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n    Start Time: 26-06-2023 18:17:46\n    Finish Time: 26-06-2023 18:17:47\n    Assembly data in IPFS: This is a place for any production data, let it be video\n      record, some sensor data or any other data collection representing the production\n      process.\n  - Name: Stack Tools\n    Employee Code: e9b69b302f72d82ca47964196536aab3f36e367910aff06d2be30888f9ad4234\n    Start Time: 26-06-2023 18:17:47\n    Finish Time: 26-06-2023 18:17:48\n    Assembly data in IPFS: This is a place for any production data, let it be video\n      record, some sensor data or any other data collection representing the production\n      process.\nTotal Assembly Time (Including Components): 0:00:06\n</LessonCodeWrapper>\n\n11. デモを削除するには、次のコマンドを入力してください。\n\n<LessonCodeWrapper language=\"bash\">\nsudo docker compose down --rmi all && docker builder prune -f\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"500\">\n次のレッスンでは、Feeccシステムのすべての必要なコンポーネントを実際に展開していきます。\n</RoboAcademyText>","fileInfo":{"path":"ja/learn/feecc-course/feecc-workbench-demo.md","name":"feecc-workbench-demo"},"defaultName":"Getting Used to Feecc","lastUpdate":null}},"context":{}}