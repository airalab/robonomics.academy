{"hash":"38d00f5ce0b34e89f5f33ff65026c37e182f6828","data":{"course":{"id":"204b7e0a1e555dccf851d29f7be96e2d","title":"Kuka manipulatorに接続する","description":"Manipulatorに接続する","content":"\n作業例のビデオはこちらで見ることができます:\n\nhttps://youtu.be/z55HepXbHr8\n\n<br/>\n\n***\n\n<br/>\n\n## 要件\n\n<List>\n\n<li class=\"flex\">\n\nROS melodic、Gazebo (インストール手順は[こちら](http://wiki.ros.org/melodic/インストール/Ubuntu))\n</li>\n\n<li>いくつかの追加パッケージ\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li> IPFS 0.4.22 \n\n（[こちら](https://www.npackd.org/p/ipfs/0.4.22)からダウンロードしてインストール）\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>pip3\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt-get install python3-pip\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li>substrate-interface\n\n<LessonCodeWrapper language=\"bash\">\npip3 install substrate-interface\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomicsノード（バイナリファイル）（最新リリースは[こちら](https://github.com/airalab/robonomics/releases)からダウンロード）\n\n</li>\n\n<li>IPFSブラウザ拡張機能（必須ではありません）</li>\n\n</List>\n\n<br/>\n\n***\n\n<br/>\n\n## インストール\nKuka manipulatorと制御パッケージをインストールする\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">cd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make</LessonCodeWrapper>\n\n***\n\n<br/>\n\n## Gazeboモデルを実行する\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n</LessonCodeWrapper>\n\n新しいウィンドウで\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun manipulator_gazebo move_arm_server\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/1.png\" alt=\"model\"/>\n\n***\n\n<br/>\n\n## Robonomicsを実行する\nRobonomicsファイルがあるフォルダに移動して、ローカルRobonomicsネットワークを作成する:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/robonomics.png\" alt=\"robonomics\"/>\n\n[Robonomics Parachainポータル](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/)に移動して、ローカルノードに切り替える\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/local.png\" alt=\"local\"/>\n\n次に、アカウントに移動して`KUKA`アカウントを作成します。アカウントのニーモニックキーを保存してくださ。後で必要になります。 \n\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/create_acc.png\" alt=\"acc\"/>\n\nデフォルトのアカウントの1つから新しいアカウントにいくつかのユニットを送信します。\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/send_money.png\" alt=\"accs\"/>\n\n***\n<br/>\n\n## IPFSを実行する\n実行 ipfs daemon:\n\n<LessonCodeWrapper language=\"bash\">\nipfs daemon\n</LessonCodeWrapper>\n\n***\n\n</br>\n\n## 制御パッケージを実行する\nkuka_controlパッケージのconfigディレクトリに、`<your_mnemonic>`が保存されたニーモニックシードでこの行を含むconfigファイルを作成する必要があります:\n\n<LessonCodeWrapper language=\"bash\">\n{\n    \"kuka_mnemonic\": \"[your_mnemonic]\",\n    \"node\": \"ws://127.0.0.1:9944\"\n}\n</LessonCodeWrapper>\n\n\n今、制御スクリプトを実行できます:\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun kuka_controller move_arm_client.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/run.png\" alt=\"control\"/>\n\n## トランザクションを送信する\n[Robonomics Parachainポータル](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/)に移動して`Developer/Extrinsics`に移動し、`extrinsic`を`launch`に変更します。`robot`で`KUKA`アカウントを選択し、`param`を`Yes`に変更します。そして`Submit Transaction`を押します\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/launch.png\" alt=\"transaction\"/>\n\nkuka_controlパッケージのウィンドウで次のように表示されます:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/res.png\" alt=\"done\"/>\n\n次に、Robonomicsポータルで`Developer/Chain State`に移動し、`datalog`と`datalogItem((AccountId,u64)): RingBufferItem`をクエリで選択し、`KUKA`データログを`+`ボタンで追加します:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/datalog.png\" alt=\"datalog\"/>\n\nこれで、ロボットのテレメトリをIPFSでこのリンクを介して見つけることができます。ハッシュには`https://gateway.ipfs.io/ipfs/<hash>`を使用してくだい。\n\n## トラブルシューティング\n\n`catkin_make`がMoveArm.hを見つけられないというメッセージで動作しない場合は、kuka_manipulator_gazeboパッケージのCMakeLists.txtの最後の4行を削除してみてください:\n\n<LessonCodeWrapper language=\"yaml\">\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(move_arm_server src/move_arm_server.cpp)\ntarget_link_libraries(move_arm_server ${catkin_LIBRARIES})\nadd_dependencies(move_arm_server beginner_tutorials_gencpp)\n</LessonCodeWrapper>\n\nこれらの行を削除した状態で`catkin_make`を実行し、それから行を戻して再度`catkin_make`を実行してください。","fileInfo":{"path":"ja/learn/kuka/overview.md","name":"overview"},"defaultName":"Connect Kuka manipulator","lastUpdate":null}},"context":{}}