{"hash":"5d4f08f99729279cbad41c23c8d66dce511a8ae5","data":{"course":{"id":"2d929624bf9c80035e3c69ac121426b1","title":"ROS互換のドローンに接続する","description":"Robonomicsパラチェーン制御下の任意のROS互換ロボットに接続する。","content":"\n\n## パート1. トランザクションによる起動\n\n**この記事では、Robonomicsツールを使用して、任意のROS互換デバイスを制御できることを示します。Web上でランダムなドローンシミュレーションパッケージを見つけ、Robonomicsと連携させて実行する方法を説明します。**\n**要件:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz（インストールマニュアル[こちら](http://wiki.ros.org/melodic/インストール)）\n\n</li>\n\n<li class=\"flex\">\n\nRobonomicsノード（バイナリファイル）（最新リリースのダウンロード[こちら](https://github.com/airalab/robonomics/releases)）\n\n</li>\n\n</List>\n\n<br/>\n\nこのデモのこの部分のコーディング全体のプロセスは、以下のビデオで紹介されています。\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n<br/>\n\n## 1. シミュレーションを見つける\nウェブを検索しましょう。`ROS ドローンシミュレータ`でGoogle検索します。最初のリンクはおそらく[http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)の`tum_simulator`ページを表示します\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/tum_simulator.jpg\" alt=\"tum_simulator\"/>\n\nかなり古いので、システム用にフォークを見つける方が良いです。`tum_simulator Ubuntu 18 Gazebo 9 fork`でGoogle検索します。最初の結果は、適切なパッケージを持つGitHub [リポジトリ](https://github.com/tahsinkose/sjtu-drone)です。ダウンロードしてください\n\n<LessonCodeWrapper language=\"bash\">\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n</LessonCodeWrapper>\n\n`~/.bashrc`にソースコマンドを追加するのを忘れないでください。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n</LessonCodeWrapper>\n\nこれで、ドローンをパラチェーン制御下に取るために何をすべきかを確認するためにシミュレーションを実行できます。\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n## 2. ROSトピックを調査する\nシミュレーションが実行されているとき、新しいタブで次のコマンドを実行して、ドローンが使用するトピックのリストを表示します。\n\n<LessonCodeWrapper language=\"bash\">\nrostopic list\n</LessonCodeWrapper>\n\n`/cmd_vel`、`/drone/takeoff`、`/drone/land`を見てみましょう。\n\n<LessonCodeWrapper language=\"bash\">\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/topics_info.jpg\" alt=\"topics_info\"/>\n\n`Twist`および`Empty`タイプのメッセージがあるはずで、これらは`std_msgs`および`geometry_msgs`の一部です。これをコントローラーで使用します。しばらくシミュレーションを停止します。\n\n## 3. コントローラーパッケージをダウンロードする\n一般的に、通常のROSロボットコントローラーとの主な違いは、ネットワーク内のすべてのトランザクションを[Robonomics IO](https://wiki.robonomics.network/docs/rinterface/)を使用してチェックするコードブロックです。パッケージ自体はGitHubで利用可能です。ダウンロードしてワークスペースをビルドします。\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n</LessonCodeWrapper>\n\n## 4. DAPPでアカウントを管理する\nテスト中なので、ローカルのrobonomicsネットワークノードをrobonomicsバイナリファイルで作成しましょう。\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**重要！**次の起動の前に、`db`ディレクトリを削除する必要があります\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\n成功した起動後、[こちら](https://wiki.robonomics.network/docs/create-account-in-dapp/)の手順に従ってアカウントを作成します。**各アカウントのシードとアドレスを保存するのを忘れないでください！トランザクションにはこれらが必要です**。これらのアドレス、シード、およびrobonomicsバイナリファイルへのパスを`robonomics_ws/src/robonomics_sample_controller/src`の`config.config`ファイルに追加します。これらのアカウントに一定の金額（ユニット）を送金してください。\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 5. ドローンをパラチェーン制御下に起動する\n\n現時点で**実行中の唯一のもの**はrobonomicsローカルノードです。別のターミナルでドローンシミュレーションを起動します。\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\nスクリプトを実行します。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/launched_drone.jpg\" alt=\"launched_drone\"/>\n\n今、ドローンを飛行開始させるトランザクションを送信できます。これを行うには、robonomicsバイナリファイルのRobonomics IO `write`サブコマンドを使用する必要があります。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\n`<DRONE_ADDRESS>`と`<EMPLOYER’S_KEY>`は、以前保存した文字列に置き換えます。\nログ`\"Taking Off\"`が表示され、ドローンが飛行を開始するはずです。\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying.jpg\" alt=\"flying\"/>\n\nこれが、Robonomicsパラチェーン制御によって任意のROS互換ロボットが制御される方法です。\n\n\n##  パート2. データをブロックチェーンに保存する\n\n**この部分では、Robonomicsツールを引き続き使用して、ドローンをパラチェーンによって制御されるようにします。今回は、データをIPFSに送信し、ハッシュをチェーンオプションに保存する機能を追加します。以下は手順とコードスニペットです。要件:**\n\n<List>\n\n<li>Ubuntu 18.04 LTS</li>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz（インストールマニュアル[こちら](http://wiki.ros.org/melodic/インストール)）\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.4.22（[こちら](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz)からダウンロードしてインストール）\n</li>\n\n<li class=\"flex\">\n\nRobonomicsノード（バイナリファイル）（最新リリースのダウンロード[こちら](https://github.com/airalab/robonomics/releases)）\n</li>\n\n<li>Python依存関係:\n<LessonCodeWrapper language=\"bash\">\npip install cv_bridge ipfshttpclient\n</LessonCodeWrapper>\n</li>\n\n</List>\n\nこのデモのこの部分のコーディング全体のプロセスは、以下のビデオで紹介されています。\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n<br/>\n\n## 1. 依存関係を加する\nシミュレーションを起動し、トピックリストを見ると（パート1を参照）、フロントカメラデータを含む1つのトピックがあり、`sensor_msgs/Image`メッセージタイプが使用されていることがわかります。\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/front_camera.jpg\" alt=\"front_camera\"/>\n\n1秒ごとに写真を撮影し、飛行後にこれらの写真をIPFSに公開しよう。最初のチュートリアルを完了している場合、他に何もダウンロードする必要はありません。`drone_sample_controller_pictures.py`スクリプトです。\n\n## 2. DAPPでアカウントを管理する\n以前のチュートリアルで行ったように、ローカルのrobonomicsネットワークノードをrobonomicsバイナリファイルで作成します。\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev\n</LessonCodeWrapper>\n\n**重要！**次の起動の前に、`db`ディレクトリを削除する必要があります\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n</LessonCodeWrapper>\n\n成功した起動後、[こちら](https://wiki.robonomics.network/docs/create-account-in-dapp/)の手順に従ってアカウントを作成します。**各アカウントのシードとアドレスを保存するのを忘れないでください！トランザクションにはこれらが必要です**。これらのアドレス、シード、およびrobonomicsバイナリファイルへのパスを`robonomics_ws/src/robonomics_sample_controller/src`の`config.config`ファイルに追加します。これらのアカウントに一定の金額（ユニット）を送金してください。\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/balances.jpg\" alt=\"balances\"/>\n\n## 3. ローンチ\n現時点で**実行中の唯一のもの**はrobonomicsローカルノードです。別のターミナルでドローンシミュレーションを起動します。\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch sjtu_drone simple.launch\n</LessonCodeWrapper>\n\n別の場所でipfsデーモンを起動します。\n<LessonCodeWrapper language=\"bash\">\nifps init # you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nスクリプトを実行します。\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n</LessonCodeWrapper>\n\nこれで、ドローンを飛行させて写真を撮影するトランザクションを送信できます。これを行うには、robonomicsバイナリファイルのRobonomics IO `write`サブコマンドを使用する必要があります。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"ON\" | ./robonomics io write launch -r [DRONE_ADDRESS] -s [EMPLOYER’S_KEY]\n</LessonCodeWrapper>\n\n`<DRONE_ADDRESS>`と`<EMPLOYER’S_KEY>`は、以前保存した文字列に置き換えます。\nログに`\"Taking Off\"`と表示され、ドローンが飛行を開始し、写真を撮影するはずです。\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/flying_picturing.jpg\" alt=\"flying_picturing\"/>\n\n後で、ジョブが完了したら、Robonomicsポータルで`Developer` -> `Chain state`に移動し、選択した`datalog`を状態クエリとして使用して`DRONE`データログを追加します。テレメトリのIPFSハッシュがブロックチェーンに保存されています。データを表示するには、単純にハッシュをコピーしてローカルの[ゲートウェイ](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/)アドレス`localhost:8080/ipfs/`に追加してください。\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-any-ros-compatible-drone/datalog.jpg\" alt=\"Voila\"/>","fileInfo":{"path":"ja/learn/connect-any-ros-compatible-drone/overview.md","name":"overview"},"defaultName":"Connect ROS-compatible drone","lastUpdate":"Thu May 04 2023 12:52:55 GMT+0400 (Samara Standard Time)"}},"context":{}}