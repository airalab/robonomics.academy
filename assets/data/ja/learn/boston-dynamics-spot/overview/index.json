{"hash":"5d4f08f99729279cbad41c23c8d66dce511a8ae5","data":{"course":{"id":"08edae3fd7f7671e1e103600d62c60d7","title":"緊急停止、初期化、ボディポジション制御","description":"このレッスンでは、ユーザーとして自分自身を認証し、モーターパワーコントロールを取得し、Spotに基本的なコマンドを送信する方法を学びます。","content":"\n<RoboAcademyText fWeight=\"500\">\nこのレッスンでは、ユーザーとして自分自身を認証し、モーターパワーコントロールを取得し、Spotに基本的なコマンドを送信する方法を学びます。\n</RoboAcademyText>\n\n## 理論\n\n真剣なロボットと同様に、Boston Dynamics Spotには、潜在的な物理的損傷を避けるためにSpotの操作中に常にアクティブである必要がある[E-Stopサービス](https://dev.bostondynamics.com/docs/concepts/estop_service)（緊急停止）という保護メカニズムがあります。 E-Stopをオンにすると、すべての関節が即座に凍結します（これは、ロボットがオンになっている場合でもエンジンを切らずに発生します）。\n\nまず、ロボットの制御をリースする必要があります。これを行う方法は2つあります - *取得*または*取得*。 *取得*は、誰かが現在ロボットを制御している場合、制を要求する穏やかな方法を意味します。別の方法では、*取得*は、現在のオペレーターが存在しているかどうかに関係なく、制御を強制的に取得することを意味します。\n\nしたがって、いくつかの動きを行うには、次の手順に従う必要があります。\n\n<LessonImages src=\"boston-dynamics-spot/e_stop_scheme.png\" alt=\"ロボットの実行状態\" imageClasses=\"mb\"/>\n\nRobot Execution States\n\nこのレッスンでは、ロボットの*ヨー*、*ロール*、*ピッチ*を変更してロボットの回転を制御する方法を学びます。下の図には、ボディフレーム座標系が示されています。\n\n<LessonImages src=\"boston-dynamics-spot/spot_coords.png\" alt=\"Spot座標\" imageClasses=\"mb\"/>\n\nSpot coordinates\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nコード内の角度はラジアンで表されます。\n</RoboAcademyText>\n\nレッスンの結果、Spotの顔で空中に自分の名前の最初の文字を描きます。セットアップを開始しましょう！\n\n## Gitpodのセットアップ\n\nこのレッスンでは、特別なソフトウェアをコンピュータにインストールすることなく練習できるクラウドベースのIDEであるGitpodを使用します。\n\n1. [Gitpod](https://gitpod.io/)にサインアップしてください。\n2. [Spot教育環境](https://gitpod.io/#github.com/merklebot/spot-edu-environment)に移動して、ブラウザで開いてください。典型的なIDE機能が表示されるウィンドウが表示されます。 \n3. メニューアコンをクリックして、次にターミナルに移動して新しいターミナルを作成します。\n\n<LessonImages src=\"boston-dynamics-spot/gitpod_terminal.png\" alt=\"terminal\" imageClasses=\"mb\"/>\n    \n    \n4. このコマンドをコピーして貼り付けてください。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npython3 prepare_yggdrasil.py\nsudo ./start_yggdrasil.sh\n\n</LessonCodeWrapper>\n\nそして`Enter`を押してください。\n\n1. 新しいターミナルを開きます（`+`ボタンを押すことで行うことができます）そして次のコマンドで接続をテストします\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nping6 200:42f6:d055:e74e:ce4a:35aa:953a:70f7\n\n</LessonCodeWrapper>\n\n次のようなものが表示されるはずです：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngitpod /workspace/spot-edu-environment (main) $ ping6 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09\nPING 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09(202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09) 56 data bytes\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=1 ttl=64 time=846 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=2 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=3 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=4 ttl=64 time=197 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=5 ttl=64 time=219 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=6 ttl=64 time=242 ms\n\n</LessonCodeWrapper>\n\n1. 予定された時間の前に、SSH接続を確立するためのプライベートキーをお送りします。\n2. プライベートキーを`id_ed25519`ファイルにコピーします。*stop-edu-enviroment*のサイドバーエクスプローラでファイルを見つけることができます。\n3. **`id_ed25519`ファイルの末尾に空行を追加してください。これはSSHが正常に機能するために必要です。**変更を保存するには`Ctrl+S`を押してください。\n\nすべてが正常であれば、`lesson1.py`を編集してレッスンを完了できます\n\nコードを実行するには、次のコマンドを使用してください：\n\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n\n</LessonCodeWrapper>\n\n\n<RoboAcademyText fWeight=\"700\" fStyle=\"normal\">\n他の誰もがその時点でプログラムを実行していないことを確認してください。\n</RoboAcademyText>\n\n\n## 練習セッションをスケジュールする\n\nSpotスケジューリングウェブサイトを使用して、練習セッションのためのタイムスロットを選択してください：\n\n[meetings.hubspot.com/strelka](https://meetings.hubspot.com/strelka)\n\n## 練習\n\n今度は、Spotの頭の動きを使って画面に描画するための簡単なスクリプトを作成します。 \n\n<LessonCodeWrapper language=\"python\" codeClass=\"big-code\">\n# Import Spot Control modules\nimport bosdyn.client\nfrom bosdyn.client.robot_command import RobotCommandClient, blocking_stand\nfrom bosdyn.client.robot_command import RobotCommandBuilder\nfrom bosdyn.geometry import EulerZXY\nimport time\n# ENTER YOUR AUTH DATA HERE\nROBOT_IP=\"192.168.50.3\"\nSPOT_USERNAME=\"student\"\nSPOT_PASSWORD=\"\"\n# Helpers to control camera drawing (you don't need to modify it)\nimport requests\nVIDEOSERVER_URL=\"http://luke.merklebot:8000/\"\nVIDEOSERVER_TOKEN=\"1234\"\ndef notify_start_line():\n  requests.post(VIDEOSERVER_URL + \"start_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_stop_line():\n  requests.post(VIDEOSERVER_URL + \"stop_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_clear_canvas():\n    requests.post(VIDEOSERVER_URL + \"clear_canvas\", json={\"token\": VIDEOSERVER_TOKEN})\n# Start with registering out SDK\nsdk = bosdyn.client.create_standard_sdk('LessonOneClient')\n# Create instance of robot and auth with credentials\nrobot = sdk.create_robot(ROBOT_IP)\nrobot.authenticate(SPOT_USERNAME, SPOT_PASSWORD)\n# Create lease client and take exclusive control over Spot.  \nlease_client = robot.ensure_client('lease')\nlease = lease_client.take()\nlease_keep_alive = bosdyn.client.lease.LeaseKeepAlive(lease_client)\n# Try to power on the robot\nrobot.power_on(timeout_sec=20)\nif robot.is_powered_on():\n    print(\"Powered On\")\n\t\t# If everything went smooth, Spot face lights should turn green\nelse:\n\t\t# In case of some problems, e.g. somebody stole control over robot\n    print(\"Failed\")\n    exit(0)\n# Synchronize Spor inner time with ours - to avoid outdated commands\nrobot.time_sync.wait_for_sync()\n# To execute robot movement, create command client through which orders are sent\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\n# Start movement with simple stand up\nblocking_stand(command_client, timeout_sec=10)\n# Rotate robot body:\n#  1. Build command for body rotation. It’s not an easy task to control robot motion with commands on low level. \n#     Bosdyn Client allow as to use a shortcut - RobotCommandBuilder. It contains a number of predefined commands, \n#     you need just to choose one of your liking and insert parameters\nfootprint_R_body = EulerZXY(yaw=0.1, roll=0.1, pitch=0.1)\ncmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n#  2. Execute builded command\ncommand_client.robot_command(cmd)\ntime.sleep(2)\n# Return robot state back\ncommand_client.robot_command(RobotCommandBuilder.synchro_stand_command(footprint_R_body=EulerZXY(yaw=0, roll=0, pitch=0)))\ntime.sleep(2)\n# Change robot height\ncmd = RobotCommandBuilder.synchro_stand_command(body_height=0.1)\ncommand_client.robot_command(cmd)\n# Now we are ready to draw letter. \ndef draw_letter(command_client):\n\t\t# Choose points to draw (see the coords explanation bellow)\n    points_xy_draw = (\n        (125, 125),\n        (375, 875),\n        (500, 500),\n        (250, 500),\n        (500, 500),\n        (625, 125),\n    )\n    for x, y in points_xy_draw:\n        convert = lambda x: (x / 1000 - 0.5) * -1\n        x, y = map(convert, (x, y))\n        footprint_R_body = EulerZXY(\n            yaw=x, \n            roll=0.0, \n            pitch=y,\n        )\n        cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n        command_client.robot_command(cmd)\n        time.sleep(1)\nnotify_clear_canvas()\nnotify_start_line()\ndraw_letter(command_client)\nnotify_stop_line()\n# Turn off the robot gracefully\nrobot.power_off(cut_immediately=False)\n\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nSpotの頭をカメラのある点に移動する必要がある場合、多くの非線形パラメータを使用した大規模な計算が必要です。これは非常に簡単なタスクではありません。しかし、局所的には、ヨー角とピッチ角は、画像上でカーテシアン座標として使用できると言えます。\n</RoboAcademyText>\n\n\n<LessonImages src=\"boston-dynamics-spot/cartesian.jpeg\" alt=\"spot\" imageClasses=\"mb\"/>\n\nスクリプトを実行して結果を確認できます。コードを保存するのを忘れないでください（Ctrl+Sを使用）：\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n</LessonCodeWrapper>\n\n\n### Spotのビデオはこちらで見つけることができます：\n[https://codepen.io/smehnov/pen/BaVNrPM](https://codepen.io/smehnov/pen/BaVNrPM)\n\n\n## チャレンジ\nPythonスクリプトを作成して、次のモーションのシーケンスでロボットのボディポジションを制御します：\n\n1. 立ち上がる\n2. 顔でイニシャルをトレースする（1文字、少なくとも3点）\n3. 座る\n\n## 結果\n\n今では、次のことができます：\n\n- Spot SDKと連携する\n- 基本的なコマンドを構築する\n- ロボットのボディを回転させる\n- Spotに接続する\n\nそして、文字を描きました。おめでうございます！\n\n\n<RoboAcademyText fWeight=\"500\">\n\nSpotの関節データを収集した[rosbag](http://wiki.ros.org/rosbag)を送信します。これにより、それらを視覚化できます（たとえば、[foxglove](https://www.notion.so/Lesson-1-Emergency-Stop-Initialization-Body-Position-Control-4ccf6316330d4680ab1bb571b2b788d5)を使用して）。証明書は近日中にメールで送信されます。\n\n</RoboAcademyText> \n\n\n## [最初のレッスンをスケジュールする](https://meetings.hubspot.com/strelka)","fileInfo":{"path":"ja/learn/boston-dynamics-spot/overview.md","name":"overview"},"defaultName":"Software Developing for Boston Dynamics Spot","lastUpdate":null}},"context":{}}