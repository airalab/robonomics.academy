{"hash":"f33052c6cd25aad5fc1a1101d4bd76b0f766a37b","data":{"course":{"id":"e7434b121b0e47b6adccfea09f49354c","title":"Baxterロボットを制御する","description":"Baxterロボットを制御する","content":"仕組みの例:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## 要件：\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo（インストールマニュアルは[こちら][db2]）  \n\n</li>\n\n<li>追加パッケージ：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effまたはt-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.6.0まで（[こちら][db3]からダウンロードしてインストール）\n\n</li>\n\n<li> Pythonパッケージ：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomicsノードの最新バージョンを[こちら][db4]からダウンロードしてインストール（最後にテストされたリリースv1.1）\n\n</li>\n\n<li>IPFSブラウザ拡張機能（必須ではない）</li>\n\n</List>\n\n<br/>\n\n## 0. Python3 用の CV Bridge 拡張機能をインストールします。\n\n<List>\n\n<li> Catkinワークスペースを作成\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Catkinにcmake変数を設定するよう指示します。現在の`python`のバージョンを使用してください。私の場合は`python3.6`です。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> cv_bridgeのソースをクローン：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> リポジトリ内のcv_bridgeのバージョンを見つける：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> 正しいバージョンをgitリポジトリでチェックアウトします。私たちの場合、1.12.8です。\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> ビルド：\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> 新しいパッケージで環境を拡張：\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> テスト：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. シミュレーションとコントローラーパッケージをダウンロード\nパッケージをダウンロード：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nソースコマンドを追加するのを忘れないでください：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. シミュレーションを開始\nGazeboワールドを開始し、baxterを配置します：\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nターミナルでさらに1つのウィンドウを開いてください：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nbaxterの前にいくつかのモデルを配置できます。より面白くなります。\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. DAPPでアカウントを管理\n\nテスト中なので、ローカルのrobonomicsネットワークをrobonomicsバイナリファイルで作成します。robonomicsファイルがあるフォルダに移動して、次のコマンドを実行します：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\n[Robonomics Parachainポータル][db5]に移動して、ローカルノードに切り替えます\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nアカウントに移動して、__Baxter__と__Employer__アカウントを作成します（__Robot__は必要ありません）\n\n__重要！__各アカウントの**ニーモニック**と**アドレス**をコピーしてください（アドレスをコピーするには、アカウントのアイコンをクリックしてください）。**ニーモニック**はアカウントの秘密鍵です。\nこれらのアカウントにいくらかのお金（単位）を送金してください：\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nBaxterの**ニーモニック**と**アドレス**を`robot_ws/src/Baxter_simulation_controller/config/`の`config.yaml`に追加してください\n\n## 4. シミュレーションを開始\n\n新しいウィンドウで次のコマンドを実行します：\n\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\n別のターミナルを開いて*コントローラーパッケージ*を起動します：\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nBaxterを動かしてデータを収集するトランザクションを送信できるようになりました。[Robonomics Parachainポータル][db5]を使用してください。**Developer->Extrinsics**に移動し、Baxterの雇用主アカウント、`launch` extrinsic、Baxterのアカウントをターゲットアカウントとして選択し、パラメーターに`yes`を入力してください。Extrinsicを送信します。\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nロボットが動き始めるはずです。他のアカウントからのコマンドや`no`パラメーターを持つコマンドは受け付けません。\n次のように表示されるはずです：\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\n作業が終了したら、Robonomics Portalに移動して`Developer > Chain state`を選択します。**state query**で`datalog.datalogItem(AccountId,u64)`を選択します。すべてのdatalogを表示したい場合は、`include option`をオフにして、`+`ボタンを使用してBaxterのdatalogメッセージを表示します。\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\n今、テレメトリと写真のIPFSハッシュがブロックチェーンに保存されました。データを表示するには、単にハッシュをコピーして、URL：gateway.ipfs.io/ipfs/<brここにハッシュを挿入>の検索バーに挿入してください\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\n__Gatewayで表示__をクリックして、それで終わりです！\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Baxterシミュレーションv2.0\n\n動作方法の例：\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## 要件：\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo（インストールマニュアルは[こちら][db2]）  \n\n</li>\n\n<li>追加パッケージ：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS 0.6.0まで（[こちら][db3]からダウンロードしてインストール）\n\n</li>\n\n<li> Pythonパッケージ：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nRobonomicsノード（バイナリファイル）（最新の[リリース][db4]はこちらからダウンロードしてください）\n\n</li>\n\n<li class=\"flex\">\n\n**Robonomics Portal**で__Baxter__と__Employer__アカウントを作成します（チュートリアルは[こちら][db8]で見つけることができます）。\n</li>\n\n<li>IPFSブラウザ拡張機能（必須ではない）</li>\n\n</List>\n\n<br/>\n\n## 0. Python3用のCV Bridge拡張機能をインストール\n\n<List>\n\n<li> Catkinワークスペースを作成\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Catkinにcmake変数を設定するよう指示します。現在の`python`のバージョンを使用してください。私の場合は`python3.6`です。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> cv_bridgeのソースをクローン：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> リポジトリ内のcv_bridgeのバージョンを見つける：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> 正しいバージョンをgitリポジトリでチェックアウトします。私たちの場合、1.12.8です。\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> ビルド：\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> 新しいパッケージで環境を拡張：\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> テスト：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. シミュレーションとコントローラーパッケージをダウンロード\nメインのBaxterパッケージ用のワークスペースとメインの制御プログラム用のワークスペースを作成する必要があります。\n最初のワークスペース。これはメインの制御プログラムです。Python3で実行されます。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\n2番目のワークスペース。すべてのBaxterパッケージが含まれます。シミュレーションは非常に古いため、Python2でのみ実行できます。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nこれらのパッケージはROS indigo用に作成されました。これをROS melodicで実行するために、いくつかのファイルを変更する必要があります。\n**パッチ**ファイルを使用します。\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nそして、すべてのパッケージを構築しましょう：  \nまず、Baxterのパッケージをビルドします\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\n次に、最初ワークスペースに戻り、それもビルドします：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nソースコマンドを追加するのを忘れないでください：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. シミュレーションを開始\n### シミュレーションを開始しましょう：\nまず、`robot_ws`に移動して、baxter.shをコピーして編集します\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\n次のコマンドでローカルIPアドレスを見つけてください：\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\n`baxter.sh`で次の値を編集します：\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- your_ip - ローカルIPアドレスを入力してください。`ip a`を参照してください\n- ros_version - 例えば\"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nsimを指定してbaxterシェルスクリプトを実行します：\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nbaxterの前にいくつかのモデルを配置できます。より面白くなります。\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. DAPPでアカウントを管理\n\nテスト中なので、ローカルのrobonomicsネットワークをrobonomicsバイナリファイルで作成します。robonomicsファイルがあるフォルダに移動して、次のコマンドを実行します：\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\n[Robonomics Parachainポータル][db5]に移動して、ローカルノードに切り替えます\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nアカウントに移動して、__Baxter__と__Employer__アカウントを作成してください。\n\nRobonomics Portalで\"Robonomics Portalでアカウントを作成する\"マニュアルを[こちら][db8]で見つけることができます\n\n__重要！__各アカウントの**ニーモニック**と**アドレス**をコピーしてください（アドレスをコピーするには、アカウントのアイコンをクリックしてください）。**ニーモニック**はアカウントの秘密鍵です。\n\nこれらのアカウントにいくらかのお金（単位）を送金してください：\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\n`config.yaml`内の`robonomics_ws/src/Baxter_simulation_controller/config/`にBaxterの**ニーモニック**と**アドレス**を追加してください。\n\n## 4. シミュレーションを開始\n\n新しいウィンドウで次のコマンドを実行します：\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\n別のターミナルを開いて*コントローラーパッケージ*を起動します：\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nこれで、Baxterを動かしてデータを収集するトランザクションを送信できるようになりました。これを行うには、同じポータル[Robonomics Parachain portal][db5]を使用できます。**Developer->Extrinsics**に移動し、Baxterの雇用主アカウント、`launch` extrinsic、Baxterのアカウントをターゲットアカウントとして選択し、パラメーターとして`yes`を使用します。Extrinsicを送信してください。\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nロボットが動き始めるはずです。他のアカウントからのコマンドや`no`パラメーターを持つコマンドは受け付けません。\n次のように表示されるはずです：\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\n作業が終了したら、Robonomics Portalに移動して`Developer > Chain state`を選択してください。**state query**で`datalog.datalogItem(AccountId,u64)`を選択します。すべてのdatalogを表示したい場合は、`include option`をオフにして、`+`ボタンを使用してBaxterのdatalogメッセージを表示します。\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\n今、テレメトリと写真のIPFSハッシュがブロックチェーンに保存されました。データを見るには、単にハッシュをコピーして、URLと共に検索バーに挿入してください：  \n#### gateway.ipfs.io/ipfs/<ここにハッシュを入力>\n\n以上です！\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/インストール>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"ja/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}