{"hash":"39646b78023bddea786f995e516360c6cbdb9af0","data":{"course":{"id":"12e2fd2af0e76e1875354de65f183441","title":"マーズキュリオシティローバーに接続する","description":"ロボノミクスパラチェーン制御下のマーズキュリオシティローバーに接続する。","content":"\n**ロボノミクスパラチェーン制御がマーズキュリオシティローバーの移動を可能にする方法を見てみましょう。要件:**\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz（インストールマニュアル[こちら](http://wiki.ros.org/melodic/インストール)）\n\n</li>\n\n\n<li>追加パッケージ:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n  sudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS まで [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n\n</li>\n\n<li class=\"flex\">\n\n[IPFS コンパニオン拡張](https://github.com/ipfs/ipfs-companion)\n\n</li>\n\n<li class=\"flex\">\n\nRobonomicsノード（バイナリファイル）（最新リリースは[こちら](https://github.com/airalab/robonomics/releases)でダウンロードできます。このチュートリアルはv1.1で正常にテストされました）\n\n</li>\n\n</List>\n\n<br/>\n\n成功した起動を示すビデオはこちらです:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n\n<br/>\n\n### 1. シミュレーションのセットアップ\n\nキュリオシティローバーパッケージをダウンロード:\n<LessonCodeWrapper language=\"bash\">\n  mkdir -p robonomics_ws/src\n  cd robonomics_ws/src\n  git clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\n  cd ..\n  catkin build\n</LessonCodeWrapper>\n\nローバーがスムーズに生成されるように開始条件を調整する必要があります:\n\n<List>\n\n<li>次に移動します\n\n`src/master/curiosity_mars_rover_description/worlds` ファイルの14行目を変更します` mars_curiosity.world` to \n`<pose>0 0 8 0 0 0</pose>`\n\n</li>\n\n<li>次に移動します\n\n`src/master/curiosity_mars_rover_description/launch` 、そしてファイル `mars_curiosity_world.launch` の4行目を変更します \n`<arg name=\"paused\" default=\"false\"/>`\n\nソースコマンドを追加することを忘れないでください `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n</li>\n\n<li> コンソールを再起動してシミュレーションを起動します:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\n  roslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/rover.jpg\" alt=\"Mars rover\"/>\n\n</li>\n\n</List>\n\n注意: 画像が暗い場合、例えば影がかかっている場合は、Gazeboツールバーで `Camera` を `Orthorgraphic` に変更してください。\nシミュレーションはしばらく閉じても構いません。\n\n------------\n\n<br/>\n\n### 2. Robonomicsコントローラーパッケージをダウンロード\nターミナルにローバータイプのコントローラーパッケージをダウンロードするには:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n</LessonCodeWrapper>\n\n\n------------\n\n<br/>\n\n### 3. DAPPでアカウントを管理する\nテスト中なので、ローカルのrobonomicsネットワークをrobonomicsバイナリファイルで作成します:\n\n<LessonCodeWrapper language=\"bash\">\n  ./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/robonomics.jpg\" alt=\"実行ning node\"/>\n\n\n[ロボノミクス パラチェーン ポータル](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) に移動し、ローカル ノードに切り替えます。\n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/local_node.jpg\" alt=\"Local node\"/>\n\n\nアカウントに移動して、**CURIOSITY** と **EMPLOYER** アカウントを作成します。\n\n**重要**! 各アカウントのアドレスをコピーしてください（アカウントのアイコンをクリックしてアドレスをコピーします）そしてキュリオシティのアカウントの **ニーモニックシード**（アカウントを作成する際に取得）\nこれらのアカウントにお金（ユニット）を送金してください。Robonomicsのアカウントについて詳しくは[こちら](https://wiki.robonomics.network/docs/en/create-account-in-dapp/)をご覧ください\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/account_creation.jpg\" alt=\"Account creation\"/>\n\n\nこれらのアドレス、シード、およびノードアドレス（デフォルトは開発者ノードの `ws://127.0.0.1:9944`）を `robonomics_ws/src/robonomics_sample_controller/src` の `config.config` に追加します。引用符は不要です。\n\n------------\n\n<br/>\n\n### 4. Robonomicsを開始する\n\nさらに進む前に、[IPFS Companion Extension](https://github.com/ipfs/ipfs-companion)をインストールしていることを確認してください。\n\n別のターミナルでIPFSを起動します:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nifps init #IPFSインストールごとに1回だけ行う必要があります\nipfs daemon\n</LessonCodeWrapper>\n\n別のターミナルでキュリオシティシミュレーションを起動します（ライブでない場合）:\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n静止するまで待ちます\n\n別のターミナルでコントローラーを起動します:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nrosrun robonomics_sample_controller sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/controller.jpg\" alt=\"Controller\"/>\n\nこれで、Roverを動かしてデータを収集するトランザクションを送信できます。これを行うには、同じ[Robonomics Parachainポータル](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/)を使用できます。\n`Developer->Extrinsics` に移動し、キュリオシティの雇用主アカウントを選択し、`launch` extrinsic、キュリオシティのアカウントをターゲットアカウントとして、パラメーターに `yes` を指定します。\n外部からのコマンドや `no` パラメーターを持つコマンドは受け付けません。ローバーは周囲を移動し、約1分間データを収集します。\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/extrinsic.jpg\" alt=\"Extrinsic\"/>\n\n後で、ジョブが完了したら:\nRobonomicsポータルに移動し、`Developer -> Chain state` に移動し、選択した `datalog -> RingBufferItem` で `CURIOSITY` データログを取得します:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/job_done.jpg\" alt=\"Job done\"/>\n\n\n今、テレメトリのIPFSハッシュがブロックチェーンに保存されています。データを表示するには、単純にハッシュをコピーしてゲートウェイで検索してください: \n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/datalog.jpg\" alt=\"Datalog\"/>\n\n\nこのテレメトリは分散型ストレージに保存され、そのハッシュはブロックチェーンに保存されています！\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/data_in_ipfs.jpg\" alt=\"Data in IPFS\"/>\n\n\nこのテレメトリは分散型ストレージに保管され、そのハッシュはブロックチェーンに保存されています！\n","fileInfo":{"path":"ja/learn/connect-mars-curiosity-rover/overview.md","name":"overview"},"defaultName":"Connect Mars Curiosity Rover","lastUpdate":"Thu May 18 2023 10:41:00 GMT+0400 (Samara Standard Time)"}},"context":{}}