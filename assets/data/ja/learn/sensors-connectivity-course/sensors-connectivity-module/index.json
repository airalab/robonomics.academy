{"hash":"0a452ea1a3cc334a5e8ca4f3b7c819e6bb138602","data":{"course":{"id":"6d36bb90877cfb201d6a90a06567f07a","title":"Lesson #4, センサー接続モジュール","description":"センサー接続モジュール","content":"\n次の記事では、センサー接続モジュールについて詳しく学びます。その後、分散型センサーネットワークのホスティングに参加したり、独自のセンサーマップを作成したりすることができます。\n\n## センサー接続について\n\n分散型センサーネットワークは`sensors-connectivity` Pythonモジュールを使用しています（[ソースコード](https://github.com/airalab/sensors-connectivity)）。このモジュールを使用すると、ユーザーは自分自身のサーバーを立ち上げてセンサーからデータを受信し、さらに処理することができます。現時点では、開発者はいくつかのサーバーを立ち上げており、どのセンサーもそれらにデータを送信できます。複数のサーバーを実行することで、1つのサーバーに問題が発生した場合でもデータの損失を回避できます。センサーは動作していないサーバーから動作しているサーバーに切り替えます。基本的に、センサー接続モジュールは1つの入力（センサーデータ）と多くの出力をつブラックボックスと考えることができます。\n\n<LessonImages  figure figureCaption=\"Module architecture\" src=\"sensors-connectivity-course/lesson-4-1.png\" alt=\"Module architecture\"/>\n\nセンサー接続モジュールは、HTTPプロトコルを介してセンサーからのデータを含むさまざまなデータを受信するステーション（station_1、station_2 ... station_n）のセットです。また、USB経由でコンピューターに接続されたセンサーやその他のデータソースもあります。ステーションから受信したデータはモジュールによって処理され、フィーダー（feeder_1、feeder_2 ... feeder_n）に渡されます。フィーダーは処理されたデータをユーザーに送信します。この場合、データは分散型IPFSチャンネルに送信されます。 \n\n[分散型センサーネットワーク](https://sensors.robonomics.network/#/)のマップは、コンピューター上で実行される分散型アプリケーション（dapp）です。IPFSチャンネルからデータを読み取り、マップ上に表示します。センサーからデータを収集するサーバーとユーザーが見るマップとの間には直接的な接続はありません。データはIPFS pubsubを介してそれらの間で転送されるため、サーバーへの負荷が軽減されます。 \n\nさらに、定期的に、過去の一定期間のデータがIPFSに保され、そのデータのハッシュがブロックチェーンに記録されます。IPFSはコンテンツアドレス指向のネットワークであるため、データの変更が見逃されることはありません。必要なファイルのアドレスには、その内容のハッシュが含まれており、データの変更に応じて変更されます。ブロックチェーンは、ユーザーにハッシュを渡すために使用され、ユーザーはそれを使用してIPFSから必要なデータを取得できます（これはマップの履歴をリクエストしたときに行われます）。\n\n## Linux 用のモジュールのセットアップ\n\n**前提条件とインストール**\n\n<List type=\"numbers\">\n\n<li>\n\n`sensors-connectivity`モジュールを構築するには、IPFSデーモンがインストールされている必要があり、バージョンが`0.8.x`を超えないようにする必要があります。Linuxで作業していると仮定し、次のコマンドを実行します（バージョン`0.8.0`用に）\n\n<LessonCodeWrapper codeClass=\"big-code\" language=\"bash\">wget https://dist.ipfs.io/go-ipfs/v0.8.0/go-ipfs_v0.8.0_linux-amd64.tar.gz\ntar -xzf go-ipfs_v0.8.0_linux-amd64.tar.gz\ncd go-ipfs\nsudo bash install.sh\nipfs init</LessonCodeWrapper>\n\n</li>\n\n\n<li>\n\n開発ツール `python3-dev` と Python のパッケージインストーラ `pip` を使用してパッケージをインストールします：\n\n<LessonCodeWrapper codeClass=\"long-code\" language=\"bash\">sudo apt install python3-dev python3-pip</LessonCodeWrapper>\n\n</li>\n\n\n<li>\n\nモジュールを PyPI パッケージとしてインストールします：\n\n<LessonCodeWrapper codeClass=\"long-code\" language=\"bash\">pip3 install sensors-connectivity</LessonCodeWrapper>\n\n次の警告が表示された場合： \n\n<LessonCodeWrapper codeClass=\"big-code\" language=\"bash\">WARNING: The script sensors_connectivity is installed in '/home/test2/.local/bin' which is not on PATH.\nConsider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.</LessonCodeWrapper>\n\n次のコマンドを実行します：\n\n<LessonCodeWrapper  language=\"bash\">cd ~\nexport PATH=\"/usr/local/bin:$PATH\"\nsource .profile</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 構成\n\n<List type=\"numbers\">\n\n<li>\n\n構成ファイルとデータベースファイルのディレクトリを作成します。このデータベースには、センサーデータの IPFS ハッシュ、タイムスタンプ、およびサービスの状態が保存されます：\n\n<LessonCodeWrapper language=\"bash\">cd ~\nmkdir sensors_connectivity\ncd sensors_connectivity\ntouch database.db</LessonCodeWrapper>\n\n<RoboAcademyNote type=\"okay\" title=\"INFO\">\nデータベースファイルの名前は任意ですが、拡張子は必須です <code>.db</code>\n</RoboAcademyNote>\n\n</li>\n\n\n<li>\n\n同じディレクトリに構成ファイルを作成します：\n\n<LessonCodeWrapper language=\"bash\">touch my_config.json</LessonCodeWrapper>\n\n</li>\n\n\n<li>\n\n次の内容をファイルにコピーして、db_path フィールドにデータベースファイルのフルパスを挿入します。この構成で、HTTP 経由でセンサーデータを取得し、Robonomics マップに送信するのに十分です：\n\n<LessonCodeWrapper codeClass=\"big-code\" language=\"json\">{\n   \"general\": {\n      \"publish_interval\": 30,\n      \"db_path\": \"<YOUR/PATH/TO/DATABASE>\"\n   },\n   \"comstation\": {\n      \"enable\": false,\n      \"port\": \"/dev/<YOUR/PATH/TO/BOARD>\",\n      \"work_period\": 300,\n      \"geo\": \"00.000000,00.000000\",\n      \"public_key\": \"\"\n   },\n   \"httpstation\": {\n      \"enable\": true,\n      \"port\": 8001\n   },\n   \"mqttstation\": {\n      \"enable\": false,\n      \"host\": \"localhost\",\n      \"port\": 1883,\n      \"topic\": \"/freertos_mqtt_robonomics_example/#\",\n      \"username\": \"\",\n      \"password\": \"\"\n   },\n   \"robonomics\": {\n      \"enable\": true,\n      \"ipfs_provider\": \"/ip4/127.0.0.1/tcp/5001/http\",\n      \"ipfs_topic\": \"airalab.lighthouse.5.robonomics.eth\"\n   },\n   \"datalog\": {\n      \"enable\": false,\n      \"suri\": \"\",\n      \"dump_interval\": 60,\n      \"temporal_username\": \"\",\n      \"temporal_password\": \"\",\n      \"pinata_api\": \"\",\n      \"pinata_secret\": \"\"\n   },\n   \"dev\": {\n      \"sentry\": \"\"\n   },\n   \"frontier\": {\n      \"enable\": false,\n      \"suri\": \"\"\n   },\n   \"trackagro\": {\n      \"enable\": false,\n      \"token\": \"\"\n   }\n}</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 起動\n\n\n<List type=\"numbers\">\n\n<li>\n\nIPFS デーモンを起動します：\n\n<LessonCodeWrapper codeCLass=\"big-code\" language=\"bash\">ipfs daemon --enable-pubsub-experiment</LessonCodeWrapper>\n\n</li>\n\n\n<li>\n\n構成が設定されたら、別のターミナルで構成ファイルへのパスでサービスを実行します：\n\n<LessonCodeWrapper language=\"bash\">sensors_connectivity \"path/to/your/config/file”</LessonCodeWrapper>\n\n</li>\n\n\n<li>\n\nターミナルにログが表示されます (ログは `~/.logs` にも追加されます)。 例：\n\n<LessonCodeWrapper codeClass=\"big-code\" language=\"bash\">$ sensors_connectivity test.json\n2022-09-02 14:08:48,408 - INFO - Getting data from the stations...\n2022-09-02 14:08:48,409 - INFO - airalab-http-v0.8.0: [[]]\n2022-09-02 14:08:48,409 - INFO - Sending result to the feeders...\n2022-09-02 14:08:48,411 - INFO - Checking data base...\n2022-09-02 14:09:18,410 - INFO - Sending result to the feeders...\n2022-09-02 14:09:18,410 - INFO - Getting data from the stations...\n2022-09-02 14:09:18,411 - INFO - airalab-http-v0.8.0: [[]]\n2022-09-02 14:09:48,411 - INFO - Sending result to the feeders...\n2022-09-02 14:09:48,412 - INFO - Getting data from the stations...\n2022-09-02 14:09:48,413 - INFO - airalab-http-v0.8.0: [[]]\n2022-09-02 14:10:18,413 - INFO - Sending result to the feeders...\n2022-09-02 14:10:18,413 - INFO - Getting data from the stations...</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## インストール後\n\n`sensors-connectivity` モジュールを当社の分散型センサーネットワークに接続し、マップ上でデータを表示するには、IPFS ID を [vm@multi-agent.io](mailto:vm@multi-agent.io) または [ping@airalab.org](mailto:ping@airalab.org) に送信する必要があります。ID をアクセス制御リストに追加します。\n\nIPFS デーモンを実行した後、次のコマンドで IPFS `ID` を取得します：\n\n<LessonCodeWrapper codeClass=\"big-code\" language=\"bash\">$ ipfs id\n{\n\t\"ID\": \"QmUZxw8jsRpSx5rWkTpJokPGKvWihTrt5rbRCFXzJ4eCAP\",\n\t\"PublicKey\": \"CAASpgIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/uMV3rLM/C+LOh2DGPo3chr+VM+vyYMKi...\n    ...</LessonCodeWrapper>","fileInfo":{"path":"ja/learn/sensors-connectivity-course/sensors-connectivity-module.md","name":"sensors-connectivity-module"},"defaultName":"Sensors Connectivity & Decentralized Sensors Network","lastUpdate":null}},"context":{}}