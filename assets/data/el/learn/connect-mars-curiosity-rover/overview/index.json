{"hash":"f180987ff9e7f783a5d7057468bad547c343e5ed","data":{"course":{"id":"7f88f8ebc211a63d023b0ba14ad27810","title":"Σύνδεση με το ρόβερ Curiosity του Άρη","description":"Σύνδεση με το ρόβερ Curiosity του Άρη υπό τον έλεγχο του Robonomics parachain.","content":"\n**Ας δούμε πώς ο έλεγχος του Robonomics Parachain επιτρέπει στο ρόβερ Curiosity του Άρη να κινηθεί. Απαιτήσεις:**\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo + RViz (εγχειρίδιο εγκατάστασης [εδώ](http://wiki.ros.org/melodic/Εγκατάσταση))\n\n</li>\n\n\n<li>επιπλέον πακέτα:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n  sudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS έως [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n\n</li>\n\n<li class=\"flex\">\n\n[Επέκταση Companion IPFS](https://github.com/ipfs/ipfs-companion)\n\n</li>\n\n<li class=\"flex\">\n\nΚόμβος Robonomics (δυαδικό αρχείο) (κατεβάστε την τελευταία έκδοση [εδώ](https://github.com/airalab/robonomics/releases). Αυτό το εγχειρίδιο δοκιμάστηκε με επιτυχία στην έκδοση v1.1)\n\n</li>\n\n</List>\n\n<br/>\n\nΕδώ είναι το βίντεο που δείχνει επιτυχή εκκίνηση:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n\n<br/>\n\n### 1. Δημιουργία προσομοίωσης\n\nΛήψη πακέτου ρόβερ Curiosity:\n<LessonCodeWrapper language=\"bash\">\n  mkdir -p robonomics_ws/src\n  cd robonomics_ws/src\n  git clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\n  cd ..\n  catkin build\n</LessonCodeWrapper>\n\nΠρέπει να προσαρμόσουμε τις αρχικές συνθήκες για να εμφανιστεί ο ρόβερ μας ομαλά:\n\n<List>\n\n<li>Μεταβείτε στο\n\n`src/master/curiosity_mars_rover_description/worlds`και αλλάξτε τη γραμμή 14 του αρχείου` mars_curiosity.world` to \n`<pose>0 0 8 0 0 0</pose>`\n\n</li>\n\n<li>Μεταβείτε στο\n\n`src/master/curiosity_mars_rover_description/launch` και αλλάξτε τη γραμμή 4 του αρχείου `mars_curiosity_world.launch` σε \n`<arg name=\"paused\" default=\"false\"/>`\n\nΜην ξεχάσετε να προσθέσετε την εντολή πηγής `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n</li>\n\n<li> Επανεκκίνηση κονσόλας και εκκίνση της προσομοίωσης:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\n  roslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/rover.jpg\" alt=\"Mars rover\"/>\n\n</li>\n\n</List>\n\nΣημείωση: αν η εικόνα είναι σκοτεινή, π.χ. σκιασμένη, αλλάξτε το `Camera` σε `Orthorgraphic` στη γραμμή εργαλείων του Gazebo.\nΗ προσομοίωση μπορεί να κλείσει για λίγο.\n\n------------\n\n<br/>\n\n### 2. Λήψη πακέτου ελεγκτή Robonomics\nΓια να κατεβάσετε ένα πακέτο ελέγχου για τον Rover πληκτρολογήστε στο τερματικό:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n</LessonCodeWrapper>\n\n\n------------\n\n<br/>\n\n### 3. Διαχείριση λογαριασμών στο DAPP\nΔεδομένου ότι δοκιμάζουμε, ας δημιουργήσουμε ένα τοπικό δίκτυο robonomics με το δυαδικό αρχείο robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n  ./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/robonomics.jpg\" alt=\"Εκτέλεσηning node\"/>\n\n\nΜεταβείτε στο [Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) και αλλάξτε σε τοπικό κόμβο \n\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/local_node.jpg\" alt=\"Local node\"/>\n\n\nΜεταβείτε στους Λογαριασμούς και δημιουργήστε τους λογαριασμούς **CURIOSITY** και **EMPLOYER**.\n\n**Σημαντικό**! Αντιγράψτε τη διεύθυνση κάθε λογαριασμού (για να αντιγράψετε τη διεύθυνση κάντε κλικ στο εικονίδιο του λογαριασμού) και το **μνημονικό κλειδί** του λογαριασμού Curiosity (που αποκτήθηκε κατά τη δημιουργία του λογαριασμού)\nΜεταφέρετε κάποια χρήματα (μονάδες) σε αυτούς τους λογαριασμούς. Μπορείτε να διαβάσετε περισσότερα σχετικά με τους λογαριασμούς στο Robonomics [εδώ](https://wiki.robonomics.network/docs/en/create-account-in-dapp/)\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/account_creation.jpg\" alt=\"Account creation\"/>\n\n\nΠροσθέστε αυτές τις διευθύνσεις, το μνημονικό κλειδί και τη διεύθυνση του κόμβου (προεπιλογή σε `ws://127.0.0.1:9944` για τον κόμβο του προγραμματιστή) στο `config.config` στο `robonomics_ws/src/robonomics_sample_controller/src`. Χωρίς εισαγωγικά.\n\n------------\n\n<br/>\n\n### 4. Έναρξη Robonomics\n\nΠριν προχωρήσετε περαιτέρω, βεβαιωθείτε ότι έχετε εγκαταστήσει την [Επέκταση IPFS Companion](https://github.com/ipfs/ipfs-companion).\n\nΣε ένα ξεχωριστό τερματικό εκκινήστε το IPFS:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nifps init #χρειάζεται να το κάνετε μόνο μια φορά ανά εγκατάσταση του IPFS\nipfs daemon\n</LessonCodeWrapper>\n\nΣε ένα άλλο ξεχωριστό τερματικό εκκινήστε την προσομοίωση Curiosity αν δεν είναι ζωντανή:\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n</LessonCodeWrapper>\n\nΠεριμένετε μέχρι να μείνει ακίνητη\n\nΣε ένα άλλο τερματικό εκκινήστε τον ελεγκτή:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"long-code\">\nrosrun robonomics_sample_controller sample_controller.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/controller.jpg\" alt=\"Controller\"/>\n\nΤώρα μπορείτε να στείλετε μια συναλλαγή που ενεργοποιεί τον Rover να αρχίσει να κινείται και να συλλέγει δεδομένα. Για να το κάνετε αυτό, μπορείτε να χρησιμοποιήσετε την ίδια [πύλη Robonomics Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/).\nΜεταβείτε σε `Developer->Extrinsics` και επιλέξτε τον λογαριασμό εργοδότη του Curiosity, το εξωτερικό `launch`, τον λογαριασμό του Curiosity ως στόχο και το `ναι` ως παράμετρο.\nΥποβάλετε το εξωτερικό.\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/extrinsic.jpg\" alt=\"Extrinsic\"/>\n\nΟ ρομπότ πρέπει να αρχίσει να κινείται. Δεν θα δέχεται εντολές από άλλους λογαριασμούς ούτε εντολές με παράμετρο `όχι`. Ο ρόβερ θα κινηθεί γύρω και θα συλλέξει δεδομένα για περίπου ένα λεπτό.\nΑργότερα, όταν η εργασία ολοκληρωθεί:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/job_done.jpg\" alt=\"Job done\"/>\n\n\nΣτην πύλη Robonomics πηγαίνετε σε `Developer -> Chain state` και αποκτήστε ένα δεδομένακαταγραφής `CURIOSITY` χρησιμοποιώντας το κουμπί “+” με επιλεγμένο `datalog -> RingBufferItem` ως ερώτημα: \n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/datalog.jpg\" alt=\"Datalog\"/>\n\n\nΤώρα το hash του τηλεμετρίας IPFS είναι αποθηκευμένο στο blockchain. Για να δείτε τα δεδομένα απλά αντιγράψτε το hash και βρείτε το σε ένα πύλη:\n\n<LessonImages imageClasses=\"mb\" src=\"connect-mars-curiosity-rover/data_in_ipfs.jpg\" alt=\"Data in IPFS\"/>\n\n\nΑυτή η τηλεμετρία διατηρείται σε αποκεντρωμένη αποθήκευση και το hash της αποθηκεύεται σε ένα blockchain!\n","fileInfo":{"path":"el/learn/connect-mars-curiosity-rover/overview.md","name":"overview"},"defaultName":"Connect Mars Curiosity Rover","lastUpdate":"Thu May 18 2023 10:41:00 GMT+0400 (Samara Standard Time)"}},"context":{}}