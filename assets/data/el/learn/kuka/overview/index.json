{"hash":"66c202d3783d3c594c78856019b23f3916cdea2f","data":{"course":{"id":"2ac233bb66d7d6fd113bf2a550bf144c","title":"Σύνδεση με τον χειριστή Kuka","description":"Σύνδεση με τον Χειριστή","content":"\nΤο βίντεο με ένα παράδειγμα εργασίας μπορεί να βρεθεί εδώ:\n\nhttps://youtu.be/z55HepXbHr8\n\n<br/>\n\n***\n\n<br/>\n\n## Απαιτήσεις\n\n<List>\n\n<li class=\"flex\">\n\nROS μελωδικό, Gazebo (οδηγίες εγκατάστασης [εδώ](http://wiki.ros.org/melodic/Εγκατάσταση/Ubuntu))\n</li>\n\n<li>Μερικά επιπλέον πακέτα\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n</LessonCodeWrapper>\n\n</li>\n\n<li> IPFS 0.4.22 \n\n(κατεβάστε από [εδώ](https://www.npackd.org/p/ipfs/0.4.22) και εγκαταστήστε)\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n</LessonCodeWrapper>\n\n</li>\n\n<li>pip3\n\n<LessonCodeWrapper language=\"bash\">\nsudo apt-get install python3-pip\n</LessonCodeWrapper>\n\n</li>\n\n<li>ipfshttpclient\n\n<LessonCodeWrapper language=\"bash\">\npip3 install ipfshttpclient\n</LessonCodeWrapper>\n\n</li>\n\n<li>substrate-interface\n\n<LessonCodeWrapper language=\"bash\">\npip3 install substrate-interface\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nΚόμβος Robonomics (δυαδικό αρχείο) (κατεβάστε την τελευταία έκδοση [εδώ](https://github.com/airalab/robonomics/releases))\n\n</li>\n\n<li>Επέκταση περιήγησης IPFS (δεν είναι απαραίτητη)</li>\n\n</List>\n\n<br/>\n\n***\n\n<br/>\n\n## Εγκατάσταση\nΕγκατάσταση του χειριστή Kuka και των πακέτων ελέγχου\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">cd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make</LessonCodeWrapper>\n\n***\n\n<br/>\n\n## Εκτέλεση μοντέλου gazebo\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsource ~/catkin_ws/devel/setup.bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n</LessonCodeWrapper>\n\nΣε ένα νέο παράθυρο\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun manipulator_gazebo move_arm_server\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/1.png\" alt=\"model\"/>\n\n***\n\n<br/>\n\n## Εκτέλεση robonomics\nΠηγαίνετε στον φάκελο με το αρχείο robonomics και δημιουργήστε ένα τοπικό δίκτυο robonomics:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/robonomics.png\" alt=\"robonomics\"/>\n\nΠηγαίνετε στο [Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) και αλλάξτε σε τοπικό κόμβο\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/local.png\" alt=\"local\"/>\n\nΣτη συνέχεια πηγαίνετε στους Λογαριασμούς και δημιουργήστε έναν λογαριασμό `KUKA`. Αποθηκεύστε το μνημονικό κλειδί του λογαριασμού, θα το χρειαστείτε αργότερα. \n\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/create_acc.png\" alt=\"acc\"/>\n\nΣτείλτε μερικές μονάδες στον νέο λογαριασμό από έναν από τους προεπιλεγμένους λογαριασμούς.\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/send_money.png\" alt=\"accs\"/>\n\n***\n<br/>\n\n## Εκτέλεση ipfs\nΕκτέλεση ipfs daemon:\n\n<LessonCodeWrapper language=\"bash\">\nipfs daemon\n</LessonCodeWrapper>\n\n***\n\n</br>\n\n## Εκτέλεση πακέτου ελέγχου\nΣτον κατάλογο ρύθμισης στο πακέτο ελέγχου kuka_control πρέπει να δημιουργήσετε αρχείο ρύθμισης με αυτές τις γραμμές, όπου `<το_mnemonic_σας>` είναι το αποθηκευμένο μνημονικό seed:\n\n<LessonCodeWrapper language=\"bash\">\n{\n    \"kuka_mnemonic\": \"[your_mnemonic]\",\n    \"node\": \"ws://127.0.0.1:9944\"\n}\n</LessonCodeWrapper>\n\n\nΤώρα μπορείτε να εκτελέσετε το σενάριο ελέγχου:\n\n<LessonCodeWrapper language=\"bash\">\nsource ~/catkin_ws/devel/setup.bash\nrosrun kuka_controller move_arm_client.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/run.png\" alt=\"control\"/>\n\n## Αποστολή συναλλαγής\nΣτο [Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) πηγαίνετε σε `Προγραμματιστής/Εξωτερικές`, αλλάξτε το `εξωτερικό` σε `εκκίνηση`. Επιλέξτε τον λογαριασμό `KUKA` στο `ρομπότ` και αλλάξτε το `παράμετρο` σε `Ναι`. Πατήστε `Υποβολή Συναλλαγής`\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/launch.png\" alt=\"transaction\"/>\n\nΣτο παράθυρο με το πακέτο ελέγχου kuka_control θα δείτε:\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/res.png\" alt=\"done\"/>\n\nΣτη συνέχεια πηγαίνετε στο `Προγραμματιστής/Κατάσταση Αλυσίδας` στο portal του Robonomics, επιλέξτε `datalog` και `datalogItem((AccountId,u64)): RingBufferItem` στο ερώτημα και προσθέστε το datalog `KUKA` με το κουμπί '+':\n\n<LessonImages imageClasses=\"mb\" src=\"kuka/datalog.png\" alt=\"datalog\"/>\n\nΤώρα μπορείτε να βρείτε τηλεμετρία ρομπότ στο IPFS μέσω αυτού του συνδέσμου με το hash σας `https://gateway.ipfs.io/ipfs/<hash>`.\n\n## Αντιμετώπιση προβλημάτων\n\nΑν το `catkin_make` δεν λειτουργεί με το μήνυμα ότι δεν μπορεί να βρει το MoveArm.h, δοκιμάστε να αφαιρέσετε τις τελευταίες τέσσερις γραμμές από το CMakeLists.txt στο πακέτο kuka_manipulator_gazebo:\n\n<LessonCodeWrapper language=\"yaml\">\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(move_arm_server src/move_arm_server.cpp)\ntarget_link_libraries(move_arm_server ${catkin_LIBRARIES})\nadd_dependencies(move_arm_server beginner_tutorials_gencpp)\n</LessonCodeWrapper>\n\nΚάντε `catkin_make` χωρίς αυτές τις γραμμές, στη συνέχεια επαναφέρετε τις και κάντε ξανά `catkin_make`.","fileInfo":{"path":"el/learn/kuka/overview.md","name":"overview"},"defaultName":"Connect Kuka manipulator","lastUpdate":null}},"context":{}}