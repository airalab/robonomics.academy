{"hash":"8ef03bb5d0758af9cf9521a2138c5ca6b002a78d","data":{"course":{"id":"9af799e3b0ab60d39054b8207b32c68f","title":"Έλεγχος ρομπότ Baxter","description":"Έλεγχος ρομπότ Baxter","content":"Παράδειγμα πώς λειτουργεί:\n\nhttps://www.youtube.com/watch?v=JivTDhDJLHo\n\n<br/>\n\n## Απαιτήσεις:\n\n<List>\n\n<li class=\"flex\">\n\nROS Melodic + Gazebo (εγχειρίδιο εγκατάστασης [εδώ][db2])  \n\n</li>\n\n<li>επιπλέον πακέτα:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effήt-controllers ros-melodic-joint-state-controller python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS μέχρι 0.6.0 (κατεβάστε από [εδώ][db3] και εγκαταστήστε)\n\n</li>\n\n<li> πακέτα python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nΛήψη τελευταίας έκδοσης του κόμβου Robonomics [εδώ][db4] (τελευταία δοκιμασμένη έκδοση v1.1)\n\n</li>\n\n<li>Επέκταση περιήγησης IPFS (δεν είναι απαραίτητη)</li>\n\n</List>\n\n<br/>\n\n## 0. εγκαταστήστε την επέκταση CV Bridge για python3\n\n<List>\n\n<li> Δημιουργία χώρου εργασίας catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Οδηγίες catkin για την ρύθμιση μεταβλητών cmake. Χρησιμοποιήστε την τρέχουσα έκδοση του `python`. Για εμένα, είναι `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Κλωνοποίηση πηγαίου κώδικα cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Εύρεση έκδοσης του cv_bridge στο αποθετήριό σας:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Ελέγξτε τη σωστή έκδοση στο αποθετήριο git. Στην περίπτωσή μας είναι 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Κατασκευή:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Επέκταση περιβάλλοντος με νέο πακέτο:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Δοκιμή:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n## 1. Λήψη πακέτων προσομοίωσης και ελεγκτή\nΛήψη πακέτων:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\ngit checkout old_version\npip3 install -r requirements.txt\ncd ../..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nΜην ξεχάσετε να προσθέσετε την εντολή πηγής:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Έναρξη προσομοίωσης\nΑς ξεκινήσουμε τον κόσμο gazebo και να βάλουμε τον baxter μας μέσα:\n\n<LessonCodeWrapper language=\"bash\">\nroslaunch gazebo_ros empty_world.launch\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/empty_world.jpg\" alt=\"empty_world\"/>\n\nΑνοίξτε ένα ακόμη παράθυρο στο τερματικό:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nrosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter\n</LessonCodeWrapper>\n\nΜπορείτε να βάλετε μερικά μοντέλα μπροστά από τον baxter μας. Θα είναι πιο ενδιαφέρον.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Διαχείριση λογαριασμών στο DAPP\n\nΔεδομένου ότι κάνουμε δοκιμές, ας δημιουργήσουμε ένα τοπικό δίκτυο robonomics με το δυαδικό αρχείο robonomics. Πηγαίνετε στον φάκελο με το αρχείο robonomics και εκτελέστε:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./robonomics --dev --tmp --rpc-cors all\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nΠηγαίνετε στο [Πύλη Robonomics Parachain][db5] και μεταβείτ σε τοπικό κόμβο\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nΠηγαίνετε στους λογαριασμούς και δημιουργήστε λογαριασμούς __Baxter__ και __Εργοδότη__ (ο λογαριασμός __Ρομπότ__ δεν είναι απαραίτητος)\n\n__Σημαντικό!__ Αντιγράψτε το **Μνημονικό** και τη **διεύθυνση** κάθε λογαριασμού (για να αντιγράψετε τη διεύθυνση κάντε κλικ στο εικονίδιο του λογαριασμού). Το **Μνημονικό** είναι ο ιδιωτικός κλειδί για τον λογαριασμό.\nΜεταφέρετε κάποια χρήματα (μονάδες) σε αυτούς τους λογαριασμούς:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nΠροσθέστε το **Μνημονικό** και τη **διεύθυνση** του Baxter στο `config.yaml` στο `robot_ws/src/Baxter_simulation_controller/config/`\n\n## 4.Έναρξη προσομοίωσης\n\nΣε νέο παράθυρο εκτελέστε:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nΑνοίξτε ξεχωριστό τερματικό και ξεκινήστε το πακέτο *ελεγκτή*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nΤώρα μπορείτε να στείλετε μια συναλλαγή που ενεργοποιεί τον Baxter να αρχίσει τη μετακίνηση και τη συλλογή δεδομένων. Για να το κάνετε αυτό, μπορείτε να χρησιμοποιήσετε την ίδια [Πύλη Robonomics Parachain][db5]. Πηγαίνετε στο **Προγραμματιστής->Εξωτερικές** και επιλέξτε το λογαριασμό εργοδότη του Baxter, την εξωτερική `εκκίνηση`, το λογαριασμό του Baxter ως στόχο και το `ναι` ως παράμετρο. Υποβάλετε την εξωτερική.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nΟ ρομπότ πρέπει να αρχίσει να κινείται. Δεν θα δέχεται εντολές από άλλους λογαριασμούς ούτ εντολές με παράμετρο `όχι`.\nΘα πρέπει να δείτε τα ακόλουθα:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nόταν η εργασία τελειώσει πηγαίνετε στην Πύλη Robonomics στο `Προγραμματιστής > Κατάσταση αλυσίδας`. Επιλέξτε `datalog.datalogItem(AccountId,u64)` στο **ερώτημα κατάστασης**. Αν θέλετε να εμφανίσετε όλα τα datalog's, τότε απενεργοποιήστε την επιλογή `συμπερίληψη` προσθέστε την προβολή του μηνύματος datalog του Baxter χρησιμοποιώντας το κουμπί \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nΤώρα το hash του IPFS της τηλεμετρίας και των φωτογραφιών αποθηκεύεται στη blockchain. Για να δείτε τα δεδομένα απλά αντιγράψτε το hash και εισάγετε το στη γραμμή αναζήτησης με URL: gateway.ipfs.io/ipfs/<br>βάλτε το hash σας εδώ >\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ipfs.jpg\" alt=\"ipfs\"/>\n\nΚάντε κλικ στο __Προβολή στην Πύλη__ και αυτό είναι όλο!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n## Προσομοίωση Baxter v2.0\n\nΠαράδειγμα πώς λειτουργεί:\n\nhttps://youtu.be/2Dvuv0ZE2Bw\n\n<br/>\n\n\n## Απαιτήσεις:\n\n<List>\n\n<li class=\"flex\">\n\n\nROS Melodic + Gazebo (εγχειρίδιο εγκατάστασης [εδώ][db2])  \n\n</li>\n\n<li>επιπλέον πακέτα:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get install ros-melodic-qt-build ros-melodic-driver-common ros-melodic-gazebo-ros-control ros-melodic-gazebo-ros-pkgs ros-melodic-ros-control ros-melodic-control-toolbox ros-melodic-realtime-tools ros-melodic-ros-controllers ros-melodic-xacro python-wstool ros-melodic-tf-conversions ros-melodic-kdl-parser python-wstool python-catkin-tools qt4-default\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nIPFS μέχρι 0.6.0 (κατεβάστε από [εδώ][db3] και εγκαταστήστε)\n\n</li>\n\n<li> πακέτα python:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nsudo apt-get -y install python3-pip\npip3 install --upgrade pip\n</LessonCodeWrapper>\n\n</li>\n\n<li class=\"flex\">\n\nΚόμβος Robonomics (δυαδικό αρχείο) (κατεβάστε την τελευταία [έκδοση][db4] εδώ)\n\n</li>\n\n<li class=\"flex\">\n\nΔημιουργία λογαριασμών __Baxter__ και __Εργοδότη__ στο **Robonomics Portal** (μπορείτε να βρείτε οδηγίες [\"Δημιουργία Λογαριασμού στο Robonomics Portal\"][db8] εδώ).\n</li>\n\n<li>Επέκταση περιήγησης IPFS (δεν είναι απαραίτητη)</li>\n\n</List>\n\n<br/>\n\n## 0. εγκατάσταση επέκτασης CV Bridge για python3\n\n<List>\n\n<li> Δημιουργία χώρου εργασίας catkin\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nmkdir -p catkin_workspace/src\ncd catkin_workspace\ncatkin init\n</LessonCodeWrapper>\n\n</li>\n\n<li> Οδηγίες catkin για την ρύθμιση μεταβλητών cmake. Χρησιμοποιήστε την τρέχουσα έκδοση του `python`. Για εμένα, είναι `python3.6`:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so\ncatkin config --install\n</LessonCodeWrapper>\n\n</li>\n\n<li> Κλωνοποίηση πηγαίου κώδικα cv_bridge:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngit clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv\n</LessonCodeWrapper>\n\n</li>\n\n<li> Εύρεση έκδοσης του cv_bridge στο αποθετήριό σας:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\napt-cache show ros-melodic-cv-bridge | grep Version\n    Version: 1.12.8-0xenial-20180416-143935-0800\n</LessonCodeWrapper>\n\n</li>\n\n<li> Ελέγξτε τη σωστή έκδοση στο αποθετήριο git. Στην περίπτωσή μας είναι 1.12.8:\n\n<LessonCodeWrapper language=\"bash\">\ncd src/vision_opencv/\ngit checkout 1.12.8\ncd ../../\n</LessonCodeWrapper>\n\n</li>\n\n<li> Κατασκευή:\n\n<LessonCodeWrapper language=\"bash\">\ncatkin build cv_bridge\n</LessonCodeWrapper>\n\n</li>\n\n<li> Επέκταση περιβάλλοντος με νέο πακέτο:\n\n<LessonCodeWrapper language=\"bash\">\nsource install/setup.bash --extend\n</LessonCodeWrapper>\n\n</li>\n\n<li> Δοκιμή:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n$ python3\n\nPython 3.6.9 (default, Jan 26 2021, 15:33:00) \n[GCC 8.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from cv_bridge.boost.cv_bridge_boost import getCvType\n>>>\n</LessonCodeWrapper>\n\n</li>\n\n</List>\n\n<br/>\n\n## 1. Λήψη πακέτων προσομοίωσης και ελεγκτή\nΘα πρέπει να δημιουργήσουμε 2 χώρους εργασίας - έναν για τα κύρια πακέτα του Baxter και έναν για το κύριο πρόγραμμα ελέγχου.\nΠρώτος χώρος εργασίας. Είναι το κύριο πρόγραμμα ελέγχου. Θα τρέξει με python3.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src/\ngit clone https://github.com/nakata5321/Baxter_simulation_controller.git\ncd Baxter_simulation_controller\npip3 install -r requirements.txt\n</LessonCodeWrapper>\n\nΔεύτερος χώρος εργασίας. Εκεί θα είναι όλα τα πακέτα του Baxter. Η προσομοίωση είναι πολύ παλιά, οπότε μπορεί να τρέξει μόνο με python2.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~\nmkdir -p robot_ws/src\ncd robot_ws/src/\nwstool init .\nwstool merge https://raw.githubusercontent.com/RethinkRobotics/baxter_simulator/master/baxter_simulator.rosinstall\nwstool update\n</LessonCodeWrapper>\n\nΑυτά τα πακέτα δημιουργήθηκαν για το ROS indigo. Θα πρέπει να αλλάξουμε μερικά αρχεία για να τα τρέξουμε στο ROS melodic.\nΘα χρησιμοποιήσουμε **αρχεία patch**.\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npatch ./baxter_simulator/baxter_sim_io/include/baxter_sim_io/qnode.hpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/qnode_patch\npatch ./baxter_simulator/baxter_sim_kinematics/src/arm_kinematics.cpp ~/robonomics_ws/src/Baxter_simulation_controller/patch/arm_patch\npatch ./baxter_interface/src/baxter_interface/robot_enable.py ~/robonomics_ws/src/Baxter_simulation_controller/patch/interface_patch\n</LessonCodeWrapper>\n\nΚαι ας χτίσουμε όλα τα πακέτα μας:  \nΠρώτα χτίστε τα πακέτα του Baxter\n\n<LessonCodeWrapper language=\"bash\">\ncd ../\ncatkin build\n</LessonCodeWrapper>\n\nΣτη συνέχεια επιστρέψτε στον πρώτο χώρο εργασίας και χτίστε τον επίσης:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ncd ~/Baxter_simulation_controller/\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3\n</LessonCodeWrapper>\n\nΜην ξεχάσετε να προσθέσετε την εντολή πηγής:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\necho \"source /home/$USER/robot_ws/devel/setup.bash\" >> ~/.bashrc\necho \"source /home/$USER/robonomics_ws/devel/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n</LessonCodeWrapper>\n\n## 2. Έναρξη προσομοίωσης\n### Ας ξεκινήσουμε την προσομοίωσή μας:\nΑρχικά πηγαίνετε στο `robot_ws` και αντιγράψτε και επεξεργαστείτε το baxter.sh\n\n<LessonCodeWrapper language=\"bash\">\ncd ~/robot_ws/\ncp src/baxter/baxter.sh .\n</LessonCodeWrapper>\n\nΒρείτε την τοπική σας διεύθυνση ip με την εντολή:\n\n<LessonCodeWrapper language=\"bash\">\nip a\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/ip_a.png\" alt=\"ip_a\"/>\n\nΕπεξεργαστείτε τις παρακάτω τιμές στο `baxter.sh` :\n\n<LessonCodeWrapper language=\"bash\">\nnano baxter.sh\n</LessonCodeWrapper>\n\n- your_ip - βάλτε την τοπική σας διεύθυνση ip. Δείτε την εντολή `ip a`\n- ros_version - για παράδειγμα \"melodic\"\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_sh.jpg\" alt=\"baxtersh\"/>\n\nΕκτελέστε το σενάριο εκκίνησης baxter με την προσδιορισμένη προσομοίωση:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\n./baxter.sh sim\nroslaunch baxter_gazebo baxter_world.launch\n</LessonCodeWrapper>\n\nΜπορείτε να βάλετε μερικά μοντέλα μπροστά από τον baxter μας. Θα είναι πιο ενδιαφέρον.\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/baxter_simulation.jpg\" alt=\"baxter\"/>\n\n## 3. Διαχείριση λογαριασμών στο DAPP\n\nΔεδομένου ότι κάνουμε δοκιμές, ας δημιουργήσουμε ένα τοπικό δίκτυο robonomics με το δυαδικό αρχείο robonomics. Πηγαίνετε στον φάκελο με το αρχείο robonomics και εκτελέστε:\n\n<LessonCodeWrapper language=\"bash\">\n./robonomics --dev --tmp\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/robonomics.jpg\" alt=\"robonomics\"/>\n\nΠηγαίνετε στο [Πύλη Robonomics Parachain][db5] και μεταβείτ σε τοπικό κόμβο\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/local_node.jpg\" alt=\"local_node\"/>\n\nΠηγαίνετε στους Λογαριασμούς και δημιουργήστε τους λογαριασμούς __Baxter__ και __Εργοδότη__.\n\nΜπορείτε να βρείτε το εγχειρίδιο \"Δημιουργία Λογαριασμού στο Robonomics Portal\" [εδώ][db8]\n\n__Σημαντικό!__ Αντιγράψτε το **Μνημονικό** και τη **διεύθυνση** κάθε λογαριασμού (για να αντιγράψετε τη διεύθυνση κάντε κλικ στο εικονίδιο του λογαριασμού). Το **Μνημονικό** είναι ο ιδιωτικός κλειδί για τον λογαριασμό.\n\nΜεταφέρετε κάποια χρήματα (μονάδες) σε αυτούς τους λογαριασμούς:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account.jpg\" alt=\"create_account\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/create_account2.jpg\" alt=\"create_account2\"/>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/accounts.jpg\" alt=\"accounts\"/>\n\nΠροσθέστε το **Μνημονικό** και τη **διεύθυνση** του Baxter στο `config.yaml` στο `robonomics_ws/src/Baxter_simulation_controller/config/`\n\n## 4.Έναρξη προσομοίωσης\n\nΣε νέο παράθυρο εκτελέστε:\n\n<LessonCodeWrapper language=\"bash\">\nifps init #you only need to do this once\nipfs daemon\n</LessonCodeWrapper>\n\nΑνοίξτε ξεχωριστό τερματικό και ξεκινήστε το πακέτο *ελεγκτή*:\n\n<LessonCodeWrapper language=\"bash\">\nrosrun robot_controller robot_control.py\n</LessonCodeWrapper>\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/waiting.jpg\" alt=\"waiting\"/>\n\nΤώρα μπορείτε να στείλετε μια συναλλαγή που ενεργοποιεί τον Baxter να αρχίσει να κινείται και να συλλέγει δεδομένα. Για να το κάνετε αυτό, μπορείτε να χρησιμοποιήσετε το ίδιο portal [Robonomics Parachain portal][db5]. Πηγαίνετε στο **Προγραμματιστής->Εξωτερικές** και επιλέξτε τον λογαριασμό εργοδότη του Baxter, την εξωτερική `launch`, τον λογαριασμό του Baxter ως στόχο και `ναι` ως παράμετρο. Υποβάλετε την εξωτερική.\n\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/rob_message.jpg\" alt=\"rob_message\"/>\n\nΟ ρομπότ πρέπει να αρχίσει να κινείται. Δεν θα δέχεται εντολές από άλλους λογαριασμούς ούτ εντολές με παράμετρο `όχι`.\nΘα πρέπει να δείτε τα ακόλουθα:\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/working.jpg\" alt=\"working\"/>\n\nΌταν ο χρόνος εργασίας τελειώσει, πηγαίνετε στο Robonomics Portal στο `Προγραμματιστής > Κατάσταση Αλυσίδας`. Επιλέξτε `datalog.datalogItem(AccountId,u64)` στο **ερώτημα κατάστασης**. Αν θέλετε να εμφανίσετε όλα τα datalog's, τότε απενεργοποιήστε την επιλογή `συμπερίληψη` και προσθέστε το μήνυμα datalog του Baxter χρησιμοποιώντας το κουμπί \"+\".\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/datalog.jpg\" alt=\"datalog\"/>\n\nΤώρα ο IPFS hash της τηλεμετρίας και των φωτογραφιών αποθηκεύεται στη blockchain. Για να δείτε τα δεδομένα απλά αντιγράψτε το hash και εισάγετέ το στη γραμμή αναζήτησης με το URL:  \n#### gateway.ipfs.io/ipfs/<βάλτε το hash σας εδώ>\n\nΑυτά είναι όλα!\n\n<LessonImages imageClasses=\"mb\" src=\"baxter/result1.jpg\" alt=\"result1\"/>\n<LessonImages imageClasses=\"mb\" src=\"baxter/result2.jpg\" alt=\"result2\"/>\n\n\n[db2]: <http://wiki.ros.org/melodic/Εγκατάσταση>\n[db3]: <https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz>\n[db4]: <https://github.com/airalab/robonomics/releases>\n[db5]: <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/>\n[db8]: <https://wiki.robonomics.network/docs/create-account-in-dapp/>","fileInfo":{"path":"el/learn/baxter/overview.md","name":"overview"},"defaultName":"Control Baxter robot","lastUpdate":"Thu May 04 2023 12:52:52 GMT+0400 (Samara Standard Time)"}},"context":{}}