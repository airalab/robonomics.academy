{"hash":"76c8f6c333fd43be28237b9e09f4e90eec13e11a","data":{"course":{"id":"891773d3dd58642a6e5e72d5d6133b14","title":"Έκτακτος Σταματήστε, Αρχικοποίηση, Έλεγχος Θέσης Σώματος","description":"Κατά τη διάρκεια αυτού του μαθήματος θα μάθετε πώς να εξουσιοδοτήσετε τον εαυτό σας ως χρήστη, να αποκτήσετε έλεγχο ενέργειας κινητήρα και να στείλετε βασικές εντολές στο Spot.","content":"\n<RoboAcademyText fWeight=\"500\">\nΚατά τη διάρκεια αυτού του μαθήματος θα μάθετε πώς να εξουσιοδοτήσετε τον εαυτό σας ως χρήστη, να αποκτήσετε έλεγχο ενέργειας κινητήρα και να στείλετε βασικές εντολές στο Spot.\n</RoboAcademyText>\n\n## Θεωρία\n\nΌπως και όλοι οι σοβαροί ρομπότ, το Boston Dynamics Spot έχει ένα μηχανισμό προστασίας - [Υπηρεσία E-Stop](https://dev.bostondynamics.com/docs/concepts/estop_service) (Έκτακτη Διακοπή) που πρέπει να είναι πάντα ενεργό κατά τη λειτουργία του Spot για να αποφευχθεί πιθαή φυσική ζημιά. Η ενεργοποίηση του E-Stop παγώνει αμέσως όλες τις αρθρώσεις (αυτό συμβαίνει χωρίς να απενεργοποιηθούν οι κινητήρες εάν το ρομπότ ήταν ενεργοποιημένο).\n\nΚαταρχάς, πρέπει να ενοικιάσουμε τον έλεγχο επί του ρομπότ. Υπάρχουν δύο τρόποι για να το κάνουμε - *απόκτηση* ή *πήρα*. Η *απόκτηση* σημαίνει να ζητήσετε τον έλεγχο με ευγενικό τρόπο, εάν κάποιος ελέγχει το ρομπότ τώρα, το αίτημά σας θα απορριφθεί. Αντίθετα, η *πήρα* σημαίνει να πάρετε βίαια τον έλεγχο, δεν έχει σημασία αν ο τρέχων χειριστής υπάρχει.\n\nΈτσι, για να κάνετε κάποια κίνηση, πρέπει να ακολουθήσετε το σχήμα:\n\n<LessonImages src=\"boston-dynamics-spot/e_stop_scheme.png\" alt=\"Καταστάσεις Εκτέλεσης Ρομπότ\" imageClasses=\"mb\"/>\n\nRobot Execution States\n\nΣε αυτό το μάθημα θα μάθετε πώς να ελέγχετε την περιστροφή του ρομπότ αλλάζοντας το *yaw*, *roll* και *pitch* του. Στην παρακάτω εικόνα φαίνεται το σύστημα συντεταγμένων του σώματος:\n\n<LessonImages src=\"boston-dynamics-spot/spot_coords.png\" alt=\"Συντεταγμένες Spot\" imageClasses=\"mb\"/>\n\nSpot coordinates\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nΟι γωνίες σε έναν κώδικα αναπαρίστανται σε ακτίνες.\n</RoboAcademyText>\n\nΩς αποτέλεσμα του μαθήματος, θα σχεδιάσετε το πρώτο γράμμα του ονόματός σας στον αέρα με το πρόσωπο του Spot. Ας ξεκινήσουμε την εγκατάσταση!\n\n## Εγκατάσταση Gitpod\n\nΓια αυτό το μάθημα, θα χρησιμοποιήσουμε το Gitpod, ένα cloud-based IDE που σας επιτρέπει να εξασκηθείτε χωρίς να εγκαταστήσετε κάποιο ειδικό λογισμικό στον υπολογιστή σας.\n\n1. Εγγραφείτε στο [Gitpod](https://gitpod.io/).\n2. Πηγαίνετε στο [περιβάλλον εκπαίδευσης Spot](https://gitpod.io/#github.com/merklebot/spot-edu-environment) μας και ανοίξτε το στον περιηγητή σας. Θα δείτε το παράθυρο με τις τυπικές λειτουργίες του IDE. \n3. Κάντε κλικ στο εικονίδιο Μενού, στη συνέχεια πηγαίνετε στο Terminal και δημιουργήστε ένα νέο τερματιό.\n\n<LessonImages src=\"boston-dynamics-spot/gitpod_terminal.png\" alt=\"terminal\" imageClasses=\"mb\"/>\n    \n    \n4. Αντιγράψτε και επικολλήστε αυτή την εντολή:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\npython3 prepare_yggdrasil.py\nsudo ./start_yggdrasil.sh\n\n</LessonCodeWrapper>\n\nκαι πατήστε `Enter`.\n\n1. Ανοίξτε ένα νέο τερματικό (τώρα μπορείτε να το κάνετε πατώντας το κουμπί `+`) και δοκιμάστε τη σύνδεση με την εντολή\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\nping6 200:42f6:d055:e74e:ce4a:35aa:953a:70f7\n\n</LessonCodeWrapper>\n\nΘα πρέπει να δείτε κάτι παρόμοιο με αυτό:\n\n<LessonCodeWrapper language=\"bash\" codeClass=\"big-code\">\ngitpod /workspace/spot-edu-environment (main) $ ping6 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09\nPING 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09(202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09) 56 data bytes\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=1 ttl=64 time=846 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=2 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=3 ttl=64 time=172 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=4 ttl=64 time=197 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=5 ttl=64 time=219 ms\n64 bytes from 202:9292:712f:a3ef:4a7e:b2b2:b45b:7e09: icmp_seq=6 ttl=64 time=242 ms\n\n</LessonCodeWrapper>\n\n1. Πριν από την προγραμματισμένη ώρα θα σας στείλουμε ιδιωτικό κλειδί για να καθιερώσετε τη σύνδεση SSH.\n2. Αντιγράψτε το ιδιωτικό κλειδί σας στο αρχείο `id_ed25519`. Μπορείτε να βρείτε το αρχείο στον περιηγητή πλευρικής μπάρας του *stop-edu-enviroment*.\n3. **Προσθέστε μια κενή γραμμή στο τέλος του** `id_ed25519` ***αρχείου, αυτό είναι απαραίτητο για τη σωστή λειτουργία του SSH.*** Πατήστε `Ctrl+S` για να αποθηκεύσετε τις αλλαγές.\n\nΑν όλα είναι εντάξει, μπορείτε να ξεκινήσετε την ολοκλήρωση του μαθήματος επεξεργάζοντας το `lesson1.py`\n\nΓια να εκτελέσετε τον κώδικα, χρησιμοποιήστε την εντολή:\n\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n\n</LessonCodeWrapper>\n\n\n<RoboAcademyText fWeight=\"700\" fStyle=\"normal\">\nΘυμηθείτε να βεβαιωθείτε ότι κανείς άλλος δεν εκτελεί το πρόγραμμά του αυτή τη στιγμή.\n</RoboAcademyText>\n\n\n## Προγραμματίστε την πρακτική συνεδρία\n\nΧρησιμοποιήστε την ιστοσελίδα προγραμματισμού Spot για να επιλέξετε το χρονικό διάστημα για την πρακτική συνεδρία σας:\n\n[meetings.hubspot.com/strelka](https://meetings.hubspot.com/strelka)\n\n## Πρακτική\n\nΤώρα θα φτιάξουμε ένα απλό σενάριο για το Spot για να σχεδιάσει στην οθόνη χρησιμοποιώντας τις κινήσεις του κεφαλιού του. \n\n<LessonCodeWrapper language=\"python\" codeClass=\"big-code\">\n# Import Spot Control modules\nimport bosdyn.client\nfrom bosdyn.client.robot_command import RobotCommandClient, blocking_stand\nfrom bosdyn.client.robot_command import RobotCommandBuilder\nfrom bosdyn.geometry import EulerZXY\nimport time\n# ENTER YOUR AUTH DATA HERE\nROBOT_IP=\"192.168.50.3\"\nSPOT_USERNAME=\"student\"\nSPOT_PASSWORD=\"\"\n# Helpers to control camera drawing (you don't need to modify it)\nimport requests\nVIDEOSERVER_URL=\"http://luke.merklebot:8000/\"\nVIDEOSERVER_TOKEN=\"1234\"\ndef notify_start_line():\n  requests.post(VIDEOSERVER_URL + \"start_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_stop_line():\n  requests.post(VIDEOSERVER_URL + \"stop_line\", json={\"token\": VIDEOSERVER_TOKEN})\ndef notify_clear_canvas():\n    requests.post(VIDEOSERVER_URL + \"clear_canvas\", json={\"token\": VIDEOSERVER_TOKEN})\n# Start with registering out SDK\nsdk = bosdyn.client.create_standard_sdk('LessonOneClient')\n# Create instance of robot and auth with credentials\nrobot = sdk.create_robot(ROBOT_IP)\nrobot.authenticate(SPOT_USERNAME, SPOT_PASSWORD)\n# Create lease client and take exclusive control over Spot.  \nlease_client = robot.ensure_client('lease')\nlease = lease_client.take()\nlease_keep_alive = bosdyn.client.lease.LeaseKeepAlive(lease_client)\n# Try to power on the robot\nrobot.power_on(timeout_sec=20)\nif robot.is_powered_on():\n    print(\"Powered On\")\n\t\t# If everything went smooth, Spot face lights should turn green\nelse:\n\t\t# In case of some problems, e.g. somebody stole control over robot\n    print(\"Failed\")\n    exit(0)\n# Synchronize Spor inner time with ours - to avoid outdated commands\nrobot.time_sync.wait_for_sync()\n# To execute robot movement, create command client through which orders are sent\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\n# Start movement with simple stand up\nblocking_stand(command_client, timeout_sec=10)\n# Rotate robot body:\n#  1. Build command for body rotation. It’s not an easy task to control robot motion with commands on low level. \n#     Bosdyn Client allow as to use a shortcut - RobotCommandBuilder. It contains a number of predefined commands, \n#     you need just to choose one of your liking and insert parameters\nfootprint_R_body = EulerZXY(yaw=0.1, roll=0.1, pitch=0.1)\ncmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n#  2. Execute builded command\ncommand_client.robot_command(cmd)\ntime.sleep(2)\n# Return robot state back\ncommand_client.robot_command(RobotCommandBuilder.synchro_stand_command(footprint_R_body=EulerZXY(yaw=0, roll=0, pitch=0)))\ntime.sleep(2)\n# Change robot height\ncmd = RobotCommandBuilder.synchro_stand_command(body_height=0.1)\ncommand_client.robot_command(cmd)\n# Now we are ready to draw letter. \ndef draw_letter(command_client):\n\t\t# Choose points to draw (see the coords explanation bellow)\n    points_xy_draw = (\n        (125, 125),\n        (375, 875),\n        (500, 500),\n        (250, 500),\n        (500, 500),\n        (625, 125),\n    )\n    for x, y in points_xy_draw:\n        convert = lambda x: (x / 1000 - 0.5) * -1\n        x, y = map(convert, (x, y))\n        footprint_R_body = EulerZXY(\n            yaw=x, \n            roll=0.0, \n            pitch=y,\n        )\n        cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n        command_client.robot_command(cmd)\n        time.sleep(1)\nnotify_clear_canvas()\nnotify_start_line()\ndraw_letter(command_client)\nnotify_stop_line()\n# Turn off the robot gracefully\nrobot.power_off(cut_immediately=False)\n\n</LessonCodeWrapper>\n\n<RoboAcademyText fWeight=\"300\" fSize=\"90%\">\nΑν χρειαστεί να μετακινήσουμε το κεφάλι του Spot σε κάποιο σημείο στην κάμερα, θα πρέπει να κάνουμε μερικούς μεγάλους υπολογισμούς με πολλές μη γραμμικές παραμέτρους, το οποίο δεν είναι καθόλου απλή εργασία. Αλλά θα μπορούσαμε να πούμε ότι τοπικά, οι γωνίες yaw και pitch θα μπορούσαν να χρησιμοποιηθούν περίπου ως καρτεσιανές συντεταγμένες με κάποιο συντελεστή σε μια εικόνα.\n</RoboAcademyText>\n\n\n<LessonImages src=\"boston-dynamics-spot/cartesian.jpeg\" alt=\"spot\" imageClasses=\"mb\"/>\n\nΤώρα μπορείτε να δοκιμάσετε να εκτελέσετε το σενάριο και να δείτε το αποτέλεσμα. Μην ξεχάσετε να αποθηκεύσετε τον κώδικά σας με το Ctrl+S:\n\n<LessonCodeWrapper language=\"bash\">\nsudo ./run_code.sh\n</LessonCodeWrapper>\n\n\n### Το βίντεο του Spot μπορεί να βρεθεί εδώ:\n[https://codepen.io/smehnov/pen/BaVNrPM](https://codepen.io/smehnov/pen/BaVNrPM)\n\n\n## Πρόκληση\nΔημιουργήστε ένα σενάριο Python που ελέγχει τη θέση του σώματος του ρομπότ με μια ακολουθία κινήσεων:\n\n1. Σηκωθείτε\n2. Αναγράψτε τα αρχικά σας με το πρόσωπό του (ένα γράμμα, τουλάχιστον 3 σημεία)\n3. Καθίστε\n\n## Αποτελέσματα\n\nΤώρα, ξέρετε πώς:\n\n- να δουλέψετε με το Spot SDK\n- να κατασκευάσετε μια βασική εντολή\n- να περιστρέψετε το σώμα του ρομπότ\n- να συνδεθείτε με το Spot\n\nΚαι ακόμα να ζωγραφίσετε ένα γράμμα. Συγχαρητήρια!\n\n\n<RoboAcademyText fWeight=\"500\">\n\nΣυλλέξαμε ένα [rosbag](http://wiki.ros.org/rosbag) με δεδομένα αρθρωτών του Spot, ώστε να μπορείτε να τα οπτικοποιήσετε (για παράδειγμα με το [foxglove](https://www.notion.so/Lesson-1-Emergency-Stop-Initialization-Body-Position-Control-4ccf6316330d4680ab1bb571b2b788d5)). Το πιστοποιητικό θα σταλεί στο email σας σύντομα.\n\n</RoboAcademyText> \n\n\n## [Προγραμματίστε το πρώτο μάθημά σας](https://meetings.hubspot.com/strelka)","fileInfo":{"path":"el/learn/boston-dynamics-spot/overview.md","name":"overview"},"defaultName":"Software Developing for Boston Dynamics Spot","lastUpdate":null}},"context":{}}