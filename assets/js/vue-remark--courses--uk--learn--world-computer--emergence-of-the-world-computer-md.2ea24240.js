(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vue-remark--courses--uk--learn--world-computer--emergence-of-the-world-computer-md"],{

/***/ "JpCM":
/*!********************************************************************************************************************************!*\
  !*** ./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import ***!
  \********************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_15_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--15-0!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import */ \"Tac9\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_15_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "QlQV":
/*!****************************************************************************!*\
  !*** ./courses/uk/learn/world-computer/emergence-of-the-world-computer.md ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_template_id_ddf60182___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=template&id=ddf60182& */ \"lya0\");\n/* harmony import */ var _node_modules_gridsome_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/gridsome/node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"7uw+\");\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import */ \"JpCM\");\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter */ \"kxOH\");\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_gridsome_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  script,\n  _emergence_of_the_world_computer_md_vue_type_template_id_ddf60182___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _emergence_of_the_world_computer_md_vue_type_template_id_ddf60182___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* custom blocks */\n\nif (typeof _emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__[\"default\"] === 'function') Object(_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(component)\n\nif (typeof _emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__[\"default\"] === 'function') Object(_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(component)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "Tac9":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--15-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _home_runner_work_robonomics_academy_robonomics_academy_node_modules_gridsome_vue_remark_src_VueRemarkRoot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js */ \"UQSp\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"Kw5r\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n\n\nvar strats = vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"].config.optionMergeStrategies;\nvar imported = {\n  VueRemarkRoot: _home_runner_work_robonomics_academy_robonomics_academy_node_modules_gridsome_vue_remark_src_VueRemarkRoot_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (Component) {\n  var components = Component.options.components = Component.options.components || {};\n  var computed = Component.options.computed = Component.options.computed || {};\n  Object.keys(imported).forEach(function (key) {\n    if (_typeof(imported[key]) === 'object' && typeof imported[key].render === 'function') {\n      components[key] = imported[key];\n    } else if (typeof imported[key] === 'function' && typeof imported[key].options.render === 'function') {\n      components[key] = imported[key];\n    } else {\n      computed[key] = function () {\n        return imported[key];\n      };\n    }\n  });\n});\n\n//# sourceURL=webpack:///./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/babel-loader/lib??ref--15-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "UQSp":
/*!****************************************************************!*\
  !*** ./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// @vue/component\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'VueRemarkRoot',\n  render: function render(h) {\n    return h('div', null, this.$slots[\"default\"]);\n  }\n});\n\n//# sourceURL=webpack:///./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js?");

/***/ }),

/***/ "fLey":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/gridsome","cacheIdentifier":"3ec475f9-vue-loader-template"}!./node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?vue&type=template&id=ddf60182& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('VueRemarkRoot',[_c('p',[_vm._v(\"У третій частині під назвою \\\"Виникнення світового комп'ютера\\\" ми спробуємо, шар за шаром, відтворити інженерну реалізацію світового комп'ютера, використовуючи приклади з Ethereum та Polkadot, як і раніше.\")]),_c('p',[_vm._v(\"Давайте почнемо з Ethereum. Ethereum почався у 2015 році зі стану, який можна характеризувати як поєднання алгоритму консенсусу доказу роботи, що дозволяє світовому комп'ютеру існувати у децентралізованому стані (як обговорювалося у частині 2). Додатково було введено Ethereum Virtual Machine (EVM), яка служила як машина з повними можливостями обчислень Тьюрінга. Разом ці два елементи утворили першу версію світового комп'ютера, іноді називану передвісником. У цьому контексті почали з'являтися децентралізовані додатки або смарт-контракти.\")]),_c('p',[_vm._v(\"Протягом наступних 5 років Ethereum жив досить незмінним життям, пройшовши деякі інженерні налаштування, такі як постійне збільшення лімітів газу, за винятком подій, таких як Шанхайський форк. Зокрема, під час другого DEFCON, що відбувся в Шанхаї, атака з відмовою в обслуговуванні використала функцію у віртуальній машині, яка споживала мінімальну кількість газу, але викликала значні обчислення в мережі Ethereum. Це призвело до переповнення пам'яті, ефективно перериваючи цілу вузлу Ethereum. Цей інцидент підкреслює витончені деталі, які виникають при роботі з великим і абстрактним рішенням, таким як створення віртуальної машини.\")]),_c('p',[_vm._v(\"Рухаючись вперед, відбулося значне зміщення приблизно в кінці десятиліття, зокрема в 2020 році, з появою Ethereum 2.0. Однак Ethereum 2.0 зараз застарів, і я б характеризував справжній прорив як початок близько 2019-2020 років. Протягом цього періоду в Ethereum відбувся справжній технологічний прорив, рухаючись в напрямку концепції Ethereum 2.0. Момент інженерної зміни в архітектурі Ethereum можна вважати подією, відому як \\\"злиття\\\", де функціональності ланцюга маяка були поєднані. Злиття відзначило значне зміщення в парадигмі Ethereum, переходячи в незначно відмінний стан від того, що було на дошці. Фактична інженерна зміна в архітектурі Ethereum може бути пов'язана з \\\"злиттям\\\", де функціональності ланцюга маяка були інтегровані. Для докладної історії цього ви можете звернутися на веб-сайт ethereum.org, де надається відмінна стаття про співіснування традиційного блокчейну Ethereum з паралельним блокчейном, запущеним у 2015 році, та Ethereum Virtual Machine.\")]),_c('p',[_vm._v(\"Коли стався злиття, ми стали свідками нового архітектурного представлення, як на рівні мережі, так і для окремих вузлів, що взаємодіють з мережею Ethereum. Яка була фактична зміна? Для багатьох злиття означає перехід від доказу роботи до доказу ставки, що дійсно значно. Це передбачає підвищену ефективність і налаштування, але це все ще налаштування відносно одного з параметрів. Однак більш помітною внутрішньою інженерною зміною для кожного клієнта мережі було розщеплення. Більше не існувало одного конкретного мережевого клієнта або монолітної архітектури. Замість цього ми отримали два компоненти одного вузла, що взаємодіють з мережею Ethereum.\")]),_c('p',[_vm._v(\"Перша частина, яку я позначив \\\"ланцюгом маяка\\\" на діаграмі, по суті представляє колективне зображення всіх інновацій, які увійшли в клієнт Ethereum на момент злиття. Друга частина - збережена віртуальна машина. Тим не менш, тут також варто щось додати. Діалоги справді почалися про заміну віртуальної машини, яка була виключно адаптована для роботи з розумними контрактами і розумними контрактами на конкретній мові - Solidity. Це тому, що до 2015 року практично не залишилося інтерпретаторів для розумних контрактів на мовах, крім Solidity, і архітектура здавалася трохи однобічною з погляду програміста Ethereum. Ви вивчаєте фрагмент JavaScript у формі Solidity, пишете на ньому код розумного контракту і отримуєте свій DApp, наприклад, Uniswap, наприклад.\")]),_c('p',[_vm._v(\"З моменту появи більш складної архітектури Ethereum обговорення обертаися навколо ідеї того, що віртуальну машину, яка існувала як трохи монолітний елемент з 2015 року, також можна замінити в новій архітектурі. Розмова перейшла на заміну її на щось на кшталт WebAssembly (Wasm) або більш цікаве рішення з точки зору написання коду для світового комп'ютера. Можна сказати, \\\"Wasm з питанням\\\".\")]),_c('p',[_vm._v(\"З точки зору Ланцюга маяка, він дійсно працює на доказі ставки, але що цікавіше, це включення Gasper. Це представляє модифікацію оригінальних ідей про Casper. Casper, часто називаний дружнім фінальним гаджетом привидів, був представлений, можливо, навіть на Defcon 3 або 4, і можливо, навіть обговорювався на Defcon 2 - я не пам'ятаю точно. Але на конференції EthCC в Парижі, яка точно відбулася в 2018 році, Влад Замфір і Віталік, з різних кімнат, обговорювали появу Casper як дружнього привида, який наглядає за учасниками у доказі ставки і приходить на допомогу мережі, коли вузол веде себе неадекватно. З цієї ідеї Casper виникає Gasper. Не заглиблюючись у термінологію занадто, алгоритм консенсусу зазнає змін, змінюючись не лише з точки зору простоти, але й стаючи складнішим, схожим на Polkadot. Як я вже зазначав раніше, у Polkadot є два алгоритми консенсусу, Babe і Grandpa. Так само з функціональністю Ланцюга маяка Ethereum досягнення консенсусу і фінальності не є миттєвими. Це включає епохи, і мережа працює за більш складним сценарієм, досягаючи стану, який вже дещо динамічний, не заморожений, і по суті вже врізаний в камінь.\")]),_c('p',[_vm._v(\"Що мона додати щодо 2024 року? Для мене це було тривале спостереження і спроба зрозуміти, чи врешті-решт Ethereum реалізує шардування чи ні. Шардування - це можливість існувати не з одним блокчейном, а з декількома блокчейнами в межах однієї мережі. Під час спостереження за злиттям і одночасним зростанням мереж L2 (L2) у мене виникали питання про те, чи справді матеріалізується шардування. Шардування здавалося мені цікавим через його однорідність - наявність декількох ланцюгів, які майже ідентичні, не маючи жодних конкретних характеристик. Це виглядало цікавим підходом, але не таким гнучким, як гетерогенний підхід. У мережах L2, навіть кілька років тому, я бачив гетерогенність Ethereum, його здатність працювати з різними типами більш конкретних блокчейнів. ене цікавило, яким шляхом він піде - чи шардування, з його однорідністю, витісне рішення L2, чи рішення L2 з гетерогенним підходом наситить Ланцюг маяка та основні вузли мережі Ethereum.\")]),_c('p',[_vm._v(\"Сьогодні, у 2024 році, на основі статей на ethereum.org, здається, що шардування як концепція було відсунуто на другий план, і увага зосереджена на допомозі різним мережам L2 інтегруватися з Ланцюгом маяка та вирівнюватися з функціональністю основного ланцюга, який зараз розділений на два елементи в архітектурі мережі Ethereum.\")]),_c('p',[_vm._v(\"Отже, не заглиблюючись у деталі структури мережі L2 - хоча ми згадаємо про це, коли заповнимо другу частину дошки - ми повинні уявити, що Ethereum зараз є свого роду Ланцюгом Маяка, маяком, керівною зіркою для численних мереж L2. Ці мережі L2 можуть мати більш конкретну функціональність, виконуючи свою логіку відповідно до набору індивідуальних функцій. Це в певній мірі відповідає ідеї швейцарського ножа - не роблячи Ethereum швейцарським ножем, але мережі L2 починають відрізнятися за архітектурою. Вони дублюють функціональність абстрактної обчислювальної машини Ethereum, але виконують її з меншими витратами газу або в межах свого конкретного сегменту. Деякі вже думають про налаштування та зроблення свого L2 шару більш ефективним, зосереджуючись на конкретних функціональних можливостях. Таким чином, на мою думку, ми спостерігаємо за появою гетерогенності в світовому комп'ютері, який мав бути однорідним. Також важливо не забувати, що децентралізовані додатки (dApps) все ще існують в межах основного блокчейну, в межах того ж самого блокчейну, який розпочався у 2015 році. Це означає, що під час злиття, під час переходу до нового архітектурного стану, не було жодного видалення, жодного стирання попередньої історії. Усі децентралізовані додатки та смарт-контракти, що лежать в основі цих додатків, продовжують існувати, і вони продовжують існувати й сьогодні, і, можливо, завтра. Це питання, яке ми розглянемо на прикладі Polkadot, але все ще є відчуття, що буе можливо поселити децентралізований додаток в Ланцюгу Маяка - dApps.\")]),_c('p',[_vm._v(\"На завершення, уявімо інженерну реалізацію сучасного Ethereum як світового комп'ютера. У нас є кожен мережевий вузол, що складається з двох частин. Перший шар відповідає за Ethereum Virtual Machine (EVM), фактичну функціональність віртуальної машини або машини з повним набором команд, якщо ми говоримо в теоретичних термінах. Можливо, ми побачимо появу альтернатив віртуальній машині, розробленій у 2015 році. Ці альтернативи, ймовірно, перевершать її за можливостями більш абстрактного програмування, ніж написання смарт-контрактів на Solidity. Тим часом смарт-контракти на Solidity продовжують відчувати себе комфортно. Якщо ви хочете написати функціональність для основного ланцюга Ethereum, не створююи будь-якої інфраструктури поверх Ethereum, не перенаправляючи жодних обчислень, щоб зробити їх дешевшими, то децентралізовані додатки, які ви можете написати як смарт-контракти, все ще можуть бути розміщені в основному блокчейні Ethereum. У той же час, з'явилася функціональність Ланцюгу Маяка, розділяючи логіку консенсусу між валідаторами від основного протоколу обчислювальної машини. Це дозволяє додаткову гнучкість у тому, як повинен працювати консенсус і як його слід подальше модифікувати, не впливаючи на саму віртуальну машину. Приклад Шанхаю та Defcon 2, де невелика помилка опкоду призвела до вимкнення частини інфраструктури, натякає на те, що було б добре мати такі складні функціональності розділені на дві частини.\")]),_c('p',[_vm._v(\"Що цікавого в Ланцюзі Маяка? Це більш складний, комплексний алгоритм для досягнення синхронізації мережі та фіналізації з введенням концепцій, таких як \\\"епоха\\\", та наявність привида, що живе в мережі.\")]),_c('p',[_vm._v(\"Нарешті, важливо зараз врахувати, що Ethereum фактично кінчає з однорідністю, з ідеєю роботи ста сотень ідентичних блокчейнів з однією віртуальною машиною, де смарт-контракти, написані на Solidity, можуть розміщуватися. Замість цього різні проекти пропонують свої власні архітектури або ту ж саму віртуальну машину, взяту за межі основного блокчейну. Або вони намагаються побудувати свою більш конкретну програму, яка, на рівні основного ланцюга Ланцюгу Маяка, є смарт-контрактом, написаним на Solidity. Це поточне представлення Ethereum, яке не стало Ethereum 2.0. Воно залишається тим самим Ethereum - проектом, який колись почався з доказу роботи + машини з повним набором команд, перетворюючись у цю архітектуру.\")]),_c('p',[_vm._v(\"Зараз давайте розглянемо, як Polkadot виник і розвивався протягом останніх 5 років. Polkadot з'явився через п'ять років після Ethereum, народився з команди, яка розробила одного з найкращих клієнтів для Ethereum - Parity. Багато хто може пам'ятати їх веб-клієнт, який, порівняно з Geth та іншими реалізаціями, був, мабуть, набагато приємніше працювати, принаймні з особистого досвіду та досвіду колег.\")]),_c('p',[_vm._v(\"По-друге, на мою думку, Polkadot був продовженням ідей, які Гевін Вуд хотів включити в розробку Ethereum. Отже, можна сказати, що Ethereum в якийсь момент розділився на дві концепції.\\nЩо ми мали на момент запуску Polkadot? Естафетний ланцюжок було запущено. Цікаво, правда? Ланцюг маяків і ланцюг ретрансляції. Що зображала естафетна ланцюжок? Спочатку не було можливості розмістити там децентралізований додаток, написати для нього смарт-контракт або завантажити свій код ні в WASM, ні в Solidity. Нічого з цього не було доступно під час першого блоку чи перших кількох днів існування ланцюга ретрансляції Polkadot. Не було можливості додати час виконання, про який ми незабаром поговоримо, і це не ґрунтувалося на доказі участі; натомість він використовував підтвердження повноважень. Це дозволило певним вузлам, запущеним розробниками Polkadot, вижити в перші місяці або тижні, поки на ланцюжок могли бути запущені атаки або якщо він поводився некоректно. Однак це було швидко змінено, і ланцюг ретрансляції перейшов на підтвердження частки.\")]),_c('p',[_vm._v(\"В кінці кінців, після кількох місяців існування реле-ланцюга без будь-якої функціональності децентралізованих додатків, без можливості підключення вашого паралельного ланцюга або мережі L2, без можливостей користувача, мережа перейшла від стану авторитету до доказу ставлення. Це дало розробникам можливість завантаувати свої часи виконання.\")]),_c('p',[_vm._v(\"На цьому етапі також цікаво обговорити відмінності між сучасним Ethereum та тим, як структурований центральний елемент Polkadot. З точки зору серця, про яке ми вже говорили, картинка буде абсолютно такою ж не тільки для Ethereum та Polkadot, але й для будь-якого проекту, який хоче бути представлений як абстрактна обчислювальна машина. Однак з інженерної та архітектурної точки зору цікаво спостерігати Beacon Chain & Relay Chain. Тут ми маємо віртуальну машину, яка успадкована з 2015 року, але пропонуються альтернативи. У реле-ланцюзі є можливість завантажити свій час виконання. Час виконання, фактично, ваша віртуальна машина. Наприклад, деякі паралельні ланцюги повністю емулюють Ethereum Virtual Machine. Це написано як час виконання, що означає, що ви фктично можете завантажити аналог Ethereum Virtual Machine на рівень паралельного ланцюга в Polkadot або написати більш конкретну логіку, яка працює з чотирма або п'ятьма функціями. Нагадайте частину першу про ідеї - ви можете написати свій швейцарський нож, але це не потребуватиме створення всієї інфраструктури. Ви можете реалізувати певну функціональність з певними функціями на рівні часу виконання, помістити її в реле-ланцюг Polkadot, і незмінність цього часу виконання буде забезпечена валідаторами Polkadot.\")]),_c('p',[_vm._v(\"Що відбудеться далі? Протягом близько року навколо ретрансляційного ланцюжка починає формуватися шар парачейнів. З точки зору реалізації Ethereum, можна сказати, що мережі L2 досить схожі на парачейни. Однак є одна цікава перехресна відмінність між мережами, яку я вважаю захоплюючою в Polkadot, і я намагаюся краще зрозуміти, як вона розвиватиметься - а саме, другий шар перевірки та перевірки доступності даних. Через кілька років Polkadot набуває такої форми. Це не просто ретрансляційний ланцюжок, де валідатори доказу участі захищають робочий час майбутніх парачейнів; додатковий і важливий шар перевірки даних та перевірки доступності виникає з парачейнів.\")]),_c('p',[_vm._v(\"Подивіться на цю діаграму, спробуйте помітити аналогії, які виникають, і відмінності в деталях реалізації інженерії. Так що це представляє, і як ця схема порівнюється з Ethereum? У нас є проект L2, у цьому випадку з Polkadot, це парачейн. Парачейн також генерує інформаційні блоки, які потім йдуть на реле-ланцюг для об'єднання і випуску блоку реле-ланцюгу як суми всіх заголовків, заголовків і ще багато чого. Парачейн збирає транзакції в блок, використовуючи колатори, які не беруть участі в підтвердженні. Вони не ставлять нічого на реле-ланцюг; вони лише використовують рантайм, який знаходиться в реле-ланцюгу. Вони отримують його, застосовують до транзакцій, виконують необхідні переходи стану, формують лок і, що найважливіше, надають доказ про валідність - печатку, що містить криптографічні докази того, що колатор правильно зібрав блок. Ця інформація йде до зовнішнього кільця валідації реле-ланцюгу. У цьому кільці є внутрішні валідатори Polkadot - колатори парачейну. Знову ж таки, вони не ставлять нічого безпосередньо з точки зору реле-ланцюгу. Імплементації парачейнів іноді вводять свій консенсус серед колаторів, а деякі - ні. Наприклад, у Robonomics, реалізуючи парачейн, ми вважаємо цей парадигму більш цікавою, менш обтяжливою, і вона робить мережу простішою, залишаючись при цьому функціонально значущою. Будь-який колатор, не досягаючи консенсусу з ким-небудь - підтверджений нами - може запропонувати блок і деякі докази зовнішньому шару. Саме тому блоки пропонуються, пропонуються докази валідності зібраного блоку, і є зовнішнє кільце. Нам не потрібен жоден консенсус від валідаторів парачейну. Будь-хто може згенерувати блок і відправити його, і якщо цей вузол колатора надсилає невірну інформацію валідаторам парачейну на зовнішньому кільці, валідатор на цьому рівні відхилить його. Він не пройде в центральну частину. Але скажімо, що блок був наданий правильно колатором. Наші транзакції потрапили; колатор їх обчислив, застосувавши рантайм, збережений в реле-ланцюгу, виконав всі переходи стану, зібрав деякий доказ валідності - валідність зібраного блоку - і передав його на зовнішнє кільце еле-ланцюгу. Тут, кожна епоха, яка також є частиною фіналізації, кожна епоха має валідаторів з реле-ланцюгу, які розходяться в парачейни. Деякі з них залишаються в центрі, а інші йдуть в парачейни. Їх кількість коливається від 16 до 64 валідаторів, і ця цифра, я вважаю, зміниться в специфікації - десь більше, десь менше. Однак валідатори парачейну повторно перевіряють інформацію з однієї вибраної групи валідаторів про все, що надходить від колатора, що ця робота була виконана відповідно до рантайму, і що доказ валідності дійсно є валідним. Вибрані сегменти валідаторів реле-ланцюгу, які вже мають щось стейковане, відповідають, а точніше, щебечуть між собою. Вони відповідають вибраному головному виробнику блоків парачейну, так би мовити, кажуч:  \\\"Так, ми погоджуємося. Проблем немає. Ви можете пронести це через увесь зовнішній кільцевий шар всередині.\\\"\")]),_c('p',[_vm._v(\"І отже, майже вся інформація, що формується на колаторах парачейнів, з верифікацією на зовнішньому кільці, потрапляє внутрішнє. Нижня частина, не те, що вона фізично знаходиться внизу, все ще складає зовнішнє кільце - доступність даних. Дані починають перевірятися на цьому етапі, що означає, що на зовнішньому кільці перевіряється не лише правильність збирання блоків, але й починається процес підготовки до розподілу в мережі Polkadot, забезпечуючи, що інформація блоку не буде втрачена в майбутньому. Ось тут, саме те, про що я згадував у другій частині про шматки, як CD RW. На цьому етапі підготовки блоку для передачі на внутрішнє кільце формується шар доступності даних як сервіс, що в даний час тако намагаються зробити деякі проекти в Ethereum. Деякі проекти додають додаткову зайву інформацію безпосередньо в смарт-контракти, необхідну для перевірки того, що відбувається на рівні L2 і, за необхідності, зменшення або покарання тих, хто зробив це неправильно. Неможливо подолати зовнішнє кільце без розподілу інформації блоку і без повторної перевірки десятків вузлів з вкладами, зробленими на припущенні, що рантайм повинен працювати правильно.\")]),_c('p',[_vm._v(\"Отже, інформація, яка пройшла через зовнішнє кільце, вже досить надійна, можливо так, можна сказати, і на внутрішньому кільці, робота в основному ведеться не з блоками парачейнів, але їх заголовки блоків збираються в один великий заголовок. Тобто з багатьох заголовків формується один заголовок блоку ретрансляційного ланцюжка - механізм зв'язку в Спільній безпеці, як зазначено в Polkadot, який забезпечує безпеку парачейнів. Можна сказати, що парачейни перевірені і досягають стану, коли сервіс існує у розподіленій децентралізованій формі на зовнішньому кільці. На внутрішньому кільці інформація, що потрапила, намагається об'єднатися в один гіперблок, який повинен точно поєднати все разом. Там не відбуваються обчислення; там немає перерахунку абсолютно всього. Збирається остаточний блок, так би мовити, в поточній ітерації світового комп'ютера, щоб поставити крапку на питанні, чи пройшла транзакція в певному парачейні. Нам потрібно зібрати гіперблок, який містить не всю інформацію з парачейнів, але збирає всі заголовки, перевірені на зовншньому кільці парачейнів, в один великий блок. І отже, наш світовий комп'ютер в Polkadot працює.\")]),_c('p',[_vm._v(\"Давайте ще раз поглянемо на ці дві схеми разом: ланцюжок ретрансляції, ланцюжок маяка, рантайм, захищений доказом участі, де хтось ставить свої кошти для підтвердження того, що вони завжди будуть виконувати свою роботу правильно. Є віртуальна машина, де ви також можете ставити свої кошти, і якщо ви виконуєте будь-які обчислення або перехід стану, які не відповідають специфікації Віртуальної машини Ethereum, вас буде покарано.\")]),_c('p',[_vm._v(\"У Polkadot є додатковий зовнішній шар, який, здається, є однією з основних переваг, такими приємними перевагами інженерної реалізації, які, на мою думку, повинні бути тут присутні. Він повинен з'явитися між мережами L2 та ланцюжком маяка, який існує в Ethereum. До речі, деякі кажуть, що термін \\\"ланцюжок маяка\\\" знову вмирає і неправильно розуміється, але мені дуже подобається використовувати його в аналогії з \\\"ланцюжком ретрансляції\\\", терміном з дорожньої карти Ethereum.\")]),_c('p',[_vm._v(\"У Polkadot є зовнішній рівень, який дозволяє, точніше, я думаю, що він був винайдений для вирішення багатьох проблем, які виникають, коли у вас є L2 або набір блокчейнів, які потрібно підключити. На цьому рівні реалізовано інженерний механізм розподілу інформації, щоб зробити її доступною в децентралізованій мережі. Запроваджено додаткові алгоритми перевірки валідаторами не лише валідності, а й доступності інформації. Крім того, існує механізм для випадкового призначення частини валідаторів Polkadot конкретним парачейнам кожної епохи. Отже, не ті самі валідатори обслуговують парачейни кожної епохи; вони перемішуються та надсилаються до різних парачейнів кожної епохи. При перенесенні блоку із зовнішнього кільця на внутрішнє валідатори попутно перевіряються і узгоджуються з тими, які призначені парачейну. Зараз цього процесу немає, але я думаю, що колись він з’явиться.\\nІ, мабуть, останнє стосується колаторів, які сьогодні досить цікаво реалізовані в парачейнах. Вони можуть бути консенсусними або існувати без консенсусу, але, по суті, це працює. Що стосується питань в мережах L2 з децентралізованими секвенсорами або як блоки будуть генеруватися і перевірятися перед осіданням у віртуальній машині - це окремі питання для реалізації Ethereum в гетерогенному форматі. На сьогоднішній день це досить добре реалізовано в Polkadot, на мій погляд. Однак це не означає, що Polkadot випереджає всю планету і ніколи не наздожене Ethereum. Хоча саме ця архітектура приваблює мене продовжувати працювати та сподіватися, що Polkadot продовжить добре розвиватися з точки зору технологій, тому що я не бачив нічого подібного у всіх пов’язаних аспектах.\")]),_c('p',[_vm._v(\"І, можливо, ще одна цікава історія в цій частині лекції: до цього моменту ми мало можемо уявити належні перехресні ланцюжкові повідомлення між L2 мережами в Ethereum. Можливо, я щось пропустив у наукових статтях, але коли у вас немає зовнішнього кільця і питання, такі як колатори, пара-валідатори та служби доступності даних, не вирішені, думати про те, як два L2 шари можуть спілкуватися, важко. Однак у Polkadot це існує. Навіть горизонтально, через реле-ланцюжок, означаючи безпосередньо, можна надіслати транзакцію безпечно з одного параланцюжка в інший, не довіряючи будь-яким мостам між цими двома параланцюжками. Це ще одна важлива функціональність, яка, ймовірно, потрібно буде реалізувати на рівні підлючення L2 мереж. Розумні контракти в Ethereum добре спілкуються. Ми створили багато ланцюжків зв'язаних розумних контрактів, де один спрацьовує інший. З цим проблем немає. Але коли ми кажемо, що майже всі додатки переходять на рівень L2 в гетерогенній мережі, я чую, що якщо ви живете в певній області, ви не зможете вийти. Це не відбувається на рівні параланцюжків та реалізації в Polkadot. Обидва архітектури варто спостерігати, оскільки, на мою думку, інженерна реалізація йде шляхом становлення глобального комп'ютера. Вони трохи відрізняються, але є багато схожостей. Всюди величезна кількість інженерної роботи. Як ми бачимо, людська цивілізація, у вигляді множини дослідників, інженерів та зростаючих розробників з значними ресурсами для подальшого розвитку, рухається приблизно в одному напрямку від найменшого раннього етапу до, ймовірно, якогось майбутнього створення світового комп'ютера, все на тих самих коліях.\")])])}\nvar staticRenderFns = []\n\n\n\n//# sourceURL=webpack:///./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/cache-loader/dist/cjs.js?%7B%22cacheDirectory%22:%22node_modules/.cache/gridsome%22,%22cacheIdentifier%22:%223ec475f9-vue-loader-template%22%7D!./node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "jGP2":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--16-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return initFrontMatter; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"Kw5r\");\n\nvar strats = vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].config.optionMergeStrategies;\nvar key = '__vueRemarkFrontMatter';\nvar data = {\n  \"excerpt\": null,\n  \"title\": \"Частина 3: Виникнення світового комп'ютера\",\n  \"description\": \"У третій частині під назвою \\\"Виникнення світового комп'ютера\\\" ми спробуємо, шар за шаром, відтворити інженерну реалізацію світового комп'ютера, використовуючи приклади з Ethereum та Polkadot, як і раніше.\",\n  \"metaOptions\": [\"Вивчайте\"],\n  \"defaultName\": \"World computer in your home\"\n};\nfunction initFrontMatter(Component) {\n  if (Component.options[key]) {\n    Component.options[key] = data;\n  }\n\n  vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].util.defineReactive(Component.options, key, data);\n  Component.options.computed = strats.computed({\n    $frontmatter: function $frontmatter() {\n      return Component.options[key];\n    }\n  }, Component.options.computed);\n}\n\n//# sourceURL=webpack:///./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/babel-loader/lib??ref--16-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "kxOH":
/*!*************************************************************************************************************************************!*\
  !*** ./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter ***!
  \*************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_16_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--16-0!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter */ \"jGP2\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_16_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "lya0":
/*!***********************************************************************************************************!*\
  !*** ./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?vue&type=template&id=ddf60182& ***!
  \***********************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_ddf60182___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/gridsome\",\"cacheIdentifier\":\"3ec475f9-vue-loader-template\"}!../../../../node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=template&id=ddf60182& */ \"fLey\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_ddf60182___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_ddf60182___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./courses/uk/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ })

}]);