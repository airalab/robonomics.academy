(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vue-remark--courses--ru--learn--world-computer--emergence-of-the-world-computer-md"],{

/***/ "5wYn":
/*!*************************************************************************************************************************************!*\
  !*** ./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter ***!
  \*************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_16_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--16-0!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter */ \"Xmfl\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_16_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "C5WU":
/*!****************************************************************************!*\
  !*** ./courses/ru/learn/world-computer/emergence-of-the-world-computer.md ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_template_id_c4fda88c___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=template&id=c4fda88c& */ \"WzNL\");\n/* harmony import */ var _node_modules_gridsome_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/gridsome/node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"7uw+\");\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import */ \"r0X+\");\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter */ \"5wYn\");\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_gridsome_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  script,\n  _emergence_of_the_world_computer_md_vue_type_template_id_c4fda88c___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _emergence_of_the_world_computer_md_vue_type_template_id_c4fda88c___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* custom blocks */\n\nif (typeof _emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__[\"default\"] === 'function') Object(_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(component)\n\nif (typeof _emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__[\"default\"] === 'function') Object(_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(component)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "PORC":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--15-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _home_runner_work_robonomics_academy_robonomics_academy_node_modules_gridsome_vue_remark_src_VueRemarkRoot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js */ \"UQSp\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"Kw5r\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n\n\nvar strats = vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"].config.optionMergeStrategies;\nvar imported = {\n  VueRemarkRoot: _home_runner_work_robonomics_academy_robonomics_academy_node_modules_gridsome_vue_remark_src_VueRemarkRoot_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (Component) {\n  var components = Component.options.components = Component.options.components || {};\n  var computed = Component.options.computed = Component.options.computed || {};\n  Object.keys(imported).forEach(function (key) {\n    if (_typeof(imported[key]) === 'object' && typeof imported[key].render === 'function') {\n      components[key] = imported[key];\n    } else if (typeof imported[key] === 'function' && typeof imported[key].options.render === 'function') {\n      components[key] = imported[key];\n    } else {\n      computed[key] = function () {\n        return imported[key];\n      };\n    }\n  });\n});\n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/babel-loader/lib??ref--15-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "Q4nQ":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/gridsome","cacheIdentifier":"3ec475f9-vue-loader-template"}!./node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?vue&type=template&id=c4fda88c& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('VueRemarkRoot',[_c('p',[_vm._v(\"В третьей части под названием \\\"Возникновение мирового компьютера\\\" мы попытаемся, слой за слоем, воссоздать инженерную реализацию мирового компьютера, используя примеры из Ethereum и Polkadot, как и раньше.\")]),_c('p',[_vm._v(\"Давайте начнем с Ethereum. Ethereum начался в 2015 году с состояния, которое можно охарактеризовать как комбинацию алгоритма консенсуса proof-of-work, позволяющего мировому компьютеру существовать в децентрализованном состоянии (как обсуждалось в части 2). Кроме того, была представлена Ethereum Virtual Machine (EVM), служащая в качестве машины для вычислений с полным набором команд. Вместе эти два элемента образовали первую версию мирового компьютера, иногда называемую предшественником. В этом контексте начали появляться децентрализованные приложения или смарт-контракты.\")]),_c('p',[_vm._v(\"В течение следующих 5 лет Ethereum жил относительно неизменной жизнью, претерпевая некоторые инженерные настройки, такие как непрерывное увеличение лимитов газа, за исключением событий, таких как Шанхайский форк. Особенно во время второго DEFCON, проведенного в Шанхае, атака отказа в обслуживании использовала функцию виртуальной машины, потребляющую минимальное количество газа, но вызывающую значительные вычисления в сети Ethereum. Это привело к переполнению памяти, что эффективно нарушило работу целого узла Ethereum. Этот инцидент подчеркивает сложные детали, возникающие при работе с большим и абстрактным решением, таким как создание виртуальной машины.\")]),_c('p',[_vm._v(\"Двигаясь вперед, произошло значительное изменение в конце десятилетия, особенно в 2020 году, с появлением Ethereum 2.0. Однако Ethereum 2.0 теперь устарел, и я бы характеризовал настоящий прорыв начиная с 2019-2020 года. В этот период произошел настоящий технологический прорыв в Ethereum, двигаясь в направлении концепции Ethereum 2.0. Момент инженерного изменения в архитектуре Ethereum можно считать событием, известным как \\\"слияние\\\", когда функциональности цепочки маяка были объединены. Слияние отметило значительное изменение в парадигме Ethereum, переводя его в немного другое состояние, чем то, что было на доске. Фактическое инженерное изменение в архитектуре Ethereum можно ассоциировать с \\\"слиянием\\\", когда функциональности цепочки маяка были интегрированы. Для подробной истории этого вы можете обратиться на сайт ethereum.org, который предоставляет отличную статью о сосуществовании традиционного блокчейна Ethereum с параллельным блокчейном, запущенным в 2015 году, и Ethereum Virtual Machine.\")]),_c('p',[_vm._v(\"Когда произошло слияние, мы стали свидетелями нового архитектурного представления как на уровне сети, так и для отдельных узлов, взаимодействующих с сетью Ethereum. Что же было на самом деле изменено? Для многих слияние означает переход от доказательства работы к доказательству доли, что действительно значительно. Это подразумевает увеличение эффективности и настройку, но это все еще настройка относительно одного из параметров. Однако более заметным внутренним инженерным изменением для каждого сетевого клиента было разделение. Больше не было одного конкретного сетевого клиента или монолитной архитектуры. Вместо этого мы получили два компонента одного узла, взаимодействующих с сетью Ethereum.\")]),_c('p',[_vm._v(\"Первая часть, которую я обозначил как \\\"цепь маяка\\\" на диаграмме, по сути представляет собой коллективное изображение всех инноваций, которые появились в клиенте Ethereum на момент слияния. Вторая часть - сохраненная виртуальная машина. Тем не менее, стоит добавить здесь что-то еще. Диалоги действительно начались о замене виртуальной машины, которая была исключительно нацелена на работу со смарт-контрактами и смарт-контрактами на определенном языке - Solidity. Это потому, что к 2015 году практически не осталось интерпретаторов для смарт-контрактов на языках, отличных от Solidity, и архитектура казалась отчасти односторонней с точки зрения программиста Ethereum. Вы изучаете кусочек JavaScript в виде Solidity, пишете на нем код смарт-контракта и получаете свое DApp, например, Uniswap.\")]),_c('p',[_vm._v(\"С момента появления более сложной архитектуры Ethereum обсуждения крутились вокруг идеи, что виртуальная машина, существовавшая как своего рода монолитный элемент с 2015 года, также может быть заменена в новой архитектуре. Разговор сместился в сторону замены ее на что-то вроде WebAssembly (Wasm) или более интересного решения с точки зрения написания кода для мирового компьютера. Можно сказать, \\\"Wasm с вопросительным знаком.\\\"\")]),_c('p',[_vm._v(\"С точки зрения Beacon Chain, она действительно работает на доказательстве доли, но еще более интересным является включение Gasper. Это представляет собой модификацию первоначальных идей о Casper. Casper, часто называемый дружелюбным призрачным устройством окончательности, был представлен, возможно, даже на Defcon 3 или 4, и, возможно, даже обсуждался на Defcon 2—я не помню точно. Но на конференции EthCC в Париже, которая определенно состоялась в 2018 году, Влад Замфир и Виталик, из разных комнат, обсуждали появление Casper как дружелюбного призрака, наблюдающего за участниками в доказательстве доли и приходящего на помощь сети, когда узел ведет себя неправильно. Из этой идеи Casper появляется Gasper. Без углубления в терминологию, алгоритм консенсуса проходит сдвиг, меняясь не только в плане простоты, но и становясь более сложным, аналогично Polkadot. Как я уже упоминал ранее, у Polkadot есть два алгоритма консенсуса, Babe и Grandpa. Аналогично, с функциональностью Beacon Chain Ethereum достижение консенсуса и окончательности не происходит мгновенно. Это включает эпохи, и сеть работает в более сложном сценарии, достигая состояния, которое уже в некоторой степени динамично, не заморожено и, по сути, высечено в камне.\")]),_c('p',[_vm._v(\"Что можно добавить относительно 2024 года? Для меня это было продолжительное наблюдение и попытка понять, реализует ли Ethereum в конечном итоге шардинг или нет. Шардинг - это способность существовать не с одной блокчейном, а с несколькими блокчейнами в одной сети. Пока я наблюдал слияние и одновременный рост сетей Layer 2 (L2), у меня возникли вопросы о том, действительно ли шардинг воплотится в жизнь. Шардинг показался мне интересным из-за его однородности - наличие нескольких цепочек, которые почти идентичны, не имея каких-либо специфических характеристик. Это показалось мне интересным подходом, но не таким гибким, как гетерогенный подход. В сетях L2, даже несколько лет назад, я видел гетерогенность Ethereum, его способность работать с различными типами более конкретных блокчейнов. Меня интересовало, в каком направлении это пойдет - сможет ли шардинг с его однородностью вытеснить решения L2 или же решения L2 с гетерогенным подходом насытят Beacon Chain и основные узлы сети Ethereum.\")]),_c('p',[_vm._v(\"Сегодня, в 2024 году, основываясь на статьях на ethereum.org, кажется, что шардинг как концепция был отложен, и фокус сосредоточен на помощи различным сетям L2 интегрироваться с Beacon Chain и выравниваться с функциональностью основной цепи, которая теперь разделена на два элемента в архитектуре сети Ethereum.\")]),_c('p',[_vm._v(\"Следовательно, не вдаваясь в детали о том, как устроены L2-сети - хотя мы коснемся этого, когда заполним вторую часть доски - мы должны представить, что Ethereum теперь является своего рода Beacon Chain, маяком, направляющей звездой для многочисленных L2-сетей. Эти L2-сети могут иметь более конкретную функциональность, выполняя свою логику в соответствии с набором индивидуальных функций. Это в некоторой степени соответствует идее швейцарского армейского ножа - не делая Ethereum швейцарским армейским ножом, но L2-сети начинают дифференцироваться в архитектуре. Они дублируют функциональность абстрактной вычислительной машины Ethereum, но выполняют ее с более низкими затратами газа или в пределах своего конкретного сегмента. Некоторые уже думают о настройке и улучшении эффективности своего L2-уровня, сосредотачиваясь на конкретных функциональных возможностях. Таким образом, на мой взгляд, мы становимся свидетелями появления гетерогенности в мировом компьютере, который стремился быть однородным. Кроме того, важно не забывать, что децентрализованные приложения (dApps) по-прежнему существуют в основной блокчейн, в том же самом блокчейне, который начался в 2015 году. Это означает, что во время слияния, во время перехода к новому архитектурному состоянию, не было стирания, не было стирания предыдущей истории. Все децентрализованные приложения и смарт-контракты, лежащие в их основе, продолжали существовать, и они продолжают существовать и сегодня, и, вероятно, завтра. Это вопрос, который мы рассмотрим на примере Polkadot, но все еще есть ощущение, что будет возможно разместить децентрализованное приложение в Beacon Chain - dApps.\")]),_c('p',[_vm._v(\"В заключение, давайте представим инженерную реализацию сегодняшнего Ethereum как мирового компьютера. У нас есть каждый сетевой узел, состоящий из двух частей. Первый уровень отвечает за Ethereum Virtual Machine (EVM), фактическую функциональность виртуальной машины или машины, полностью совместимой с машиной, если говорить в теоретических терминах. Возможно, мы увидим появление альтернатив виртуальной машине, разработанной в 2015 году. Эти альтернативы, вероятно, превзойдут ее в плане более абстрактных программных возможностей, чем написание смарт-контрактов на Solidity. Тем временем смарт-контракты на Solidity продолжают чувствовать себя комфортно. Если вы хотите написать функциональность для основной цепи Ethereum, не создавая какой-либо инфраструктуры поверх Ethereum, не перегружая какие-либо вычисления, чтобы сделать их дешевле и так далее, децентрализованные приложения, которые вы можете написать как смарт-контракты, по-прежнему могут находиться в основной блокчейн Ethereum. В то же время появилась функциональность Beacon Chain, разделяющая логику консенсуса между валидаторами от основного протокола вычислительной машины. Это позволяет дополнительную гибкость в том, как должен работать консенсус и как его следует дальше модифицировать, не затрагивая саму виртуальную машину. Пример Шанхая и Defcon 2, где небольшая ошибка опкода вызвала отключение части инфраструктуры, намекает на то, что было бы хорошо иметь такие сложные функциональности разделены на две части.\")]),_c('p',[_vm._v(\"Что интересно в Beacon Chain? Это более сложный, всесторонний алгоритм достижения синхронизации сети и финализации с введением концепций, таких как \\\"эпоха\\\", и наличие призрака, живущего внутри сети.\")]),_c('p',[_vm._v(\"Наконец, что важно учитывать сейчас, это то, что Ethereum фактически ставит конец однородности, идее о том, чтобы получить сто одинаковых блокчейнов, работающих с одной и той же виртуальной машиной, где смарт-контракты, написанные на Solidity, могут находиться. Вместо этого различные проекты предлагают свои собственные архитектуры или ту же виртуальную машину, выведенную за пределы основной цепи блокчейна. В качестве альтернативы они пытаются построить свое более конкретное приложение, которое, на уровне основной цепи Beacon Chain, является смарт-контрактом, написанным на Solidity. Это текущее представление Ethereum, которое не стало Ethereum 2.0. Он остается тем же Ethereum - проектом, который однажды начался с доказательства работы + машины, полностью совместимой с машиной, превращаясь в эту архитектуру.\")]),_c('p',[_vm._v(\"Теперь давайте посмотрим, как появился и развивался Polkadot за последние 5 лет. Polkadot появился через пять лет после Ethereum, родившись из команды, которая разработала одного из лучших клиентов для Ethereum - Parity. Многие, возможно, помнят их веб-клиент, который, по сравнению с Geth и другими реализациями, был, вероятно, намного приятнее работать, по крайней мере, из личного опыта и опыта коллег.\")]),_c('p',[_vm._v(\"Во-вторых, на мой взгляд, Polkadot был продолжением идей, которые Гэвин Вуд хотел внедрить в разработку Ethereum. Следовательно, можно сказать, что Эфириум в какой-то момент разделился на две концепции.\\nЧто у нас было к моменту запуска Polkadot? Эстафетная цепь была запущена. Интересно, правда? Цепь маяков и релейная цепь. Что представляла собой релейная цепь? Изначально не было возможности разместить там децентрализованное приложение, написать для него смарт-контракт или загрузить свой код ни в WASM, ни в Solidity. Ничего из этого не было доступно на момент создания первого блока или в первые несколько дней существования цепочки ретрансляции Polkadot. Не было возможности добавить свою среду выполнения, о которой мы вскоре поговорим, и это не было основано на доказательстве доли; вместо этого он использовал доказательство полномочий. Это позволило некоторым узлам, запущенным разработчиками Polkadot, пережить первые месяцы или недели, пока на цепочку могли быть совершены атаки или если она вела себя неправильно. Однако это было быстро изменено, и цепочка реле перешла на доказательство доли.\")]),_c('p',[_vm._v(\"В конце концов, после нескольких месяцев существования цепи ретрансляции без какой-либо функциональности децентрализованных приложений, без возможности подключения вашей парачейн или сети L2, без возможностей пользователей, сеть перешла из состояния власти в доказательство доли. Это дало разработчикам возможность загружать свои временные интервалы.\")]),_c('p',[_vm._v(\"На этом этапе также интересно обсудить различия между сегодняшним Ethereum и структурой центральной части Polkadot. С точки зрения сердца, о котором мы уже говорили, картинка будет абсолютно такой же не только для Ethereum и Polkadot, но и для любого проекта, который хочет быть представлен как абстрактная вычислительная машина. Однако с точки зрения инженерии и архитектуры увлекательно наблюдать Beacon Chain & Relay Chain. Здесь у нас есть виртуальная машина, которая была унаследована с 2015 года, но предлагаются альтернативы. В цепи ретрансляции есть возможность загрузить свой временной интервал. Временной интервал, на самом деле, ваша виртуальная машина. Например, некоторые парачейны полностью эмулируют Ethereum Virtual Machine. Он написан как временной интервал, что означает, что вы в основном можете загрузить аналог Ethereum Virtual Machine на уровне парачейна в Polkadot или написать более конкретную логику, которая работает с четырьмя или пятью функциями. Вспомните часть первую об идеях - вы можете написать свой швейцарский нож, но это не потребует создания всей инфраструктуры. Вы можете реализовать конкретную функциональность с определенными функциями на уровне временного интервала, поместить ее в цепь ретрансляции Polkadot, и неизменяемость этого временного интервала будет обеспечена валидаторами Polkadot.\")]),_c('p',[_vm._v(\"Что произойдет дальше? В течение примерно года вокруг цепи ретрансляции начинает формироваться слой парачейнов. В терминах реализации Ethereum можно сказать, что L2-сети довольно похожи на парачейны. Однако есть одно интересное перекрестное различие между сетями, которое я нахожу увлекательным в Polkadot, и я пытаюсь дальше понять, как это будет развиваться - а именно, второй уровень проверки и проверки доступности данных. Через пару лет Polkadot принимает такой вид. Это не просто цепь ретрансляции, где валидаторы доказательства доли защищают работу будущих парачейнов; дополнительный и критически важный уровень проверки данных и проверки доступности возникает из парачейнов.\")]),_c('p',[_vm._v(\"Просматривая эту диаграмму, попробуйте заметить аналогии, которые возникают, и различия в деталях инженерной реализации. Итак, что это представляет, и как этот схема сравнивается с Ethereum? У нас есть проект L2, в данном случае с Polkadot, это парачейн. Парачейн также генерирует информационные блоки, которые затем отправляются на ретрансляционную цепь для объединения и выпуска блока ретрансляционной цепи в виде суммы всех заголовков, заголовков и еще заголовков. Парачейн собирает транзакции в блок, используя коллаторов, которые не участвуют в проверке. Они не ставят ничего на ретрансляционную цепь; они только используют время выполнения, которое находится в ретрансляционной цепи. Они получают его, применяют к транзакциям, выполняют необходимые переходы состояний, формируют блок и, что самое важное, предоставляют доказательство правильности - печать, содержащую криптографические доказательства того, что коллатор правильно собрал блок. Эта информация идет на внешнее кольцо валидации ретрансляционной цепи. В этом кольце есть внутренние валидаторы Polkadot - коллаторы парачейна. Опять же, они не ставят ничего прямо с точки зрения ретрансляционной цепи. Реализации парачейна иногда вводят свое согласие среди коллаторов, а некоторые нет. Например, в Robonomics, реализуя парачейн, мы находим эту парадигму более интересной, менее обременительной и делающей сеть более простой, сохраняя при этом функциональную значимость. Любой коллатор, не достигая согласия с кем-либо - проверенный нами - может предложить блок и некоторое доказательство на внешний слой. Вот почему предлагаются блоки, предлагаются доказательства правильности сборки блока, и есть внешнее кольцо. Нам не нужно никакого согласия от валидаторов парачейна. Любой может сгенерировать блок и отправить его, и если этот узел коллатора отправляет неверную информацию валидаторам парачейна на внешнем кольце, валидатор на этом уровне отклонит ее. Она не пройдет в центральную часть. Но предположим, что блок был предоставлен правильно коллатором. Наши транзакции попали; коллатор их вычислил, применяя время выполнения, хранящееся в ретрансляционной цепи, выполнил все переходы состояний, собрал некоторое доказательство правильности - правильность собранного блока - и передал его на внешнее кольцо ретрансляционной цепи. Здесь, каждую эпоху, которая также является частью завершения, каждая эпоха имеет валидаторов из ретрансляционной цепи, расходящихся в парачейны. Некоторые из них остаются в центре, а другие идут в парачейны. Их количество варьируется от 16 до 64 валидаторов, и это число, я верю, изменится в спецификации - где-то больше, где-то меньше. Тем не менее, валидаторы парачейна повторно проверяют информацию из выбранной группы валидаторов о том, что все, что поступает от коллатора, является правильным, что работа выполнена в соответствии с временем выполнения, и что доказательство правильности действительно действительно. Выбранный сегмент валидаторов ретрансляционной цепи, у которых уже что-то ставится, отвечают, или, скорее, щебечут между собой. Они отвечают выбранному основному производителю блоков парачейна, так сказать, говоря, \\\"Да, мы согласны. Проблем нет. Вы можете проходить через весь внешний кольцевой проход.\\\"\")]),_c('p',[_vm._v(\"И так, почти вся информация, сформированная на коллаторах парачейн, с верификацией на внешнем кольце, попадает во внутреннее. Нижняя часть, не то чтобы она физически находится внизу, все еще составляет внешнее кольцо - доступность данных. На этом этапе начинается проверка данных, что означает, что на внешнем кольце проверяется не только правильность сборки блока, но и начинается процесс подготовки к распространению в сети Polkadot, обеспечивая сохранение информации о блоке в будущем. Именно здесь, во второй части, я упомянул о кусках, как CD RW. На этом этапе подготовки блока к передаче во внутреннее кольцо формируется слой доступности данных как сервис, что в настоящее время также пытаются сделать некоторые проекты в Ethereum. Некоторые проекты добавляют дополнительную избыточную информацию непосредственно в смарт-контракты, необходимую для проверки того, что происходит на уровне L2 и, при необходимости, наказания тех, кто сделал это неправильно. Невозможно преодолеть внешнее кольцо без распространения информации о блоке и без повторной проверки десятков узлов с заложенными ставками на предположение, что время выполнения должно работать правильно.\")]),_c('p',[_vm._v(\"Таким образом, информация, прошедшая через внешнее кольцо, уже довольно надежна, вероятно, да, можно сказать, и на внутреннем кольце работа в основном ведется не с блоками парачейн, а их заголовки блоков собираются в один большой заголовок. Из многих заголовков собирается один заголовок блока цепочки реле - механизм связи в Shared Security, как упоминалось в Polkadot, который обеспечивает безопасность парачейн. Можно сказать, что парачейны проверены и достигли состояния, когда сервис существует в распределенной децентрализованной форме на внешнем кольце. На внутреннем кольце информация, которая вошла, пытается объединиться в один гиперблок, который должен точно связать все вместе. Там не происходят вычисления; нет пересчета абсолютно всего. Сборка окончательного блока происходит, так сказать, в текущей итерации мирового компьютера, чтобы поставить точку в вопросе о том, прошла ли транзакция в конкретном парачейне. Нам нужно собрать гиперблок, который содержит не всю информацию из парачейнов, но собирает все заголовки, проверенные на внешнем кольце парачейнов, в один большой блок. И так, наш мировой компьютер в Polkadot работает.\")]),_c('p',[_vm._v(\"Давайте еще раз взглянем на эти две схемы вместе: цепь ретрансляции, цепь маяка, среда выполнения, обеспеченная доказательством доли, где кто-то ставит свои средства, чтобы подтвердить, что они всегда будут выполнять свою работу правильно. Есть виртуальная машина, где вы также можете поставить свои средства, и если вы выполняете какие-либо вычисления или переходы состояний не в соответствии с спецификацией виртуальной машины Ethereum, вас будут наказывать.\")]),_c('p',[_vm._v(\"В Polkadot есть дополнительный внешний слой, который, кажется, является одним из основных преимуществ, таких приятных бонусов инженерной реализации, которые, на мой взгляд, должны быть здесь. Он должен появиться между сетями L2 и цепью маяка, которая существует в Ethereum. Кстати, некоторые говорят, что термин \\\"цепь маяка\\\" снова умирает и недопонимается, но мне действительно нравится использовать его в аналогии с \\\"цепью ретрансляции\\\", термином из дорожной карты Ethereum.\")]),_c('p',[_vm._v(\"В Polkadot есть внешний слой, который позволяет, точнее, я думаю, он был придуман для решения многих проблем, возникающих, когда у вас есть L2 или набор блокчейнов, которые необходимо соединить. На этом уровне реализуется инженерный механизм распределения информации, чтобы сделать ее доступной в децентрализованной сети. Введены дополнительные алгоритмы проверки не только валидности, но и доступности информации валидаторами. Кроме того, существует механизм случайного назначения части валидаторов Polkadot конкретным парачейнам каждую эпоху. Таким образом, каждую эпоху парачейны обслуживают одни и те же валидаторы; каждую эпоху они перемешиваются и отправляются в разные парачейны. При передаче блока из внешнего кольца во внутреннее валидаторы попутно перепроверяются и согласовываются с закрепленными за парачейном. Сейчас этого процесса не существует, но я думаю, что когда-нибудь он появится.\\nИ, пожалуй, последний момент касается колляторов, которые сегодня довольно интересно реализованы в парачейнах. Они могут быть консенсусными или существовать без консенсуса, но, на самом деле, это работает. Что касается вопросов в сетях L2 с децентрализованными секвенаторами или о том, как блоки будут генерироваться и проверяться перед оседанием в виртуальной машине — это отдельные вопросы для реализации Ethereum в гетерогенном формате. На сегодняшний день в Polkadot это, на мой взгляд, реализовано достаточно хорошо. Однако это не означает, что Polkadot опережает всю планету и никогда не догонит Ethereum. Хотя именно эта архитектура меня и привлекает продолжать работать и надеяться, что Polkadot и дальше будет хорошо развиваться в плане технологий, потому что ничего подобного во всех связанных аспектах я еще не видел.\")]),_c('p',[_vm._v(\"И, возможно, еще одна интересная история в этой части лекции: до сих пор мы едва можем представить себе правильные межцепочные сообщения между L2-сетями в Ethereum. Может быть, я что-то упустил в статьях, но когда у вас нет внешнего кольца и проблемы, такие как коллаторы, паравалидаторы и службы доступности данных не решены, думать о том, как два уровня L2 могут общаться, вызывает трудности. Однако в Polkadot это существует. Даже горизонтально, через ретрансляционную цепь, что означает, что можно отправить транзакцию надежно с одной парачейны на другую, не доверяя никаким мостам между этими двумя парачейнами. Это еще одна важная функциональность, которую, вероятно, придется реализовать на уровне соединения сетей L2. Смарт-контракты в Ethereum хорошо общаются. Мы создали множество цепочек связанных смарт-контрактов, где один вызывает другой. С этим нет проблем. Но когда мы говорим, что почти все приложения переходят на уровень L2 в гетерогенной сети, я слышу, что если вы живете в определенной области, вы не сможете выбраться. Но это не так на уровне парачейн и реализации в Polkadot. Обе архитектуры стоят того, чтобы следить за ними, поскольку, на мой взгляд, инженерная реализация следует основному пути становления глобальным компьютером. Они немного отличаются, но есть много сходств. Везде огромное количество инженерной работы. Как мы видим, человеческая цивилизация, в виде множества исследователей, инженеров и растущих разработчиков с значительными ресурсами для дальнейшего развития, движется примерно в одном направлении от самого раннего этапа к, вероятно, будущему установлению мирового компьютера, все по одним и тем же путям.\")])])}\nvar staticRenderFns = []\n\n\n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/cache-loader/dist/cjs.js?%7B%22cacheDirectory%22:%22node_modules/.cache/gridsome%22,%22cacheIdentifier%22:%223ec475f9-vue-loader-template%22%7D!./node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "UQSp":
/*!****************************************************************!*\
  !*** ./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// @vue/component\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'VueRemarkRoot',\n  render: function render(h) {\n    return h('div', null, this.$slots[\"default\"]);\n  }\n});\n\n//# sourceURL=webpack:///./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js?");

/***/ }),

/***/ "WzNL":
/*!***********************************************************************************************************!*\
  !*** ./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?vue&type=template&id=c4fda88c& ***!
  \***********************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_c4fda88c___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/gridsome\",\"cacheIdentifier\":\"3ec475f9-vue-loader-template\"}!../../../../node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=template&id=c4fda88c& */ \"Q4nQ\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_c4fda88c___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_c4fda88c___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "Xmfl":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--16-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return initFrontMatter; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"Kw5r\");\n\nvar strats = vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].config.optionMergeStrategies;\nvar key = '__vueRemarkFrontMatter';\nvar data = {\n  \"excerpt\": null,\n  \"title\": \"Часть 3: Возникновение мирового компьютера\",\n  \"description\": \"В третьей части под названием \\\"Возникновение мирового компьютера\\\" мы попытаемся, слой за слоем, воссоздать инженерную реализацию мирового компьютера, используя примеры из Ethereum и Polkadot, как и раньше.\",\n  \"metaOptions\": [\"Учить\"],\n  \"defaultName\": \"World computer in your home\"\n};\nfunction initFrontMatter(Component) {\n  if (Component.options[key]) {\n    Component.options[key] = data;\n  }\n\n  vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].util.defineReactive(Component.options, key, data);\n  Component.options.computed = strats.computed({\n    $frontmatter: function $frontmatter() {\n      return Component.options[key];\n    }\n  }, Component.options.computed);\n}\n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/babel-loader/lib??ref--16-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "r0X+":
/*!********************************************************************************************************************************!*\
  !*** ./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import ***!
  \********************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_15_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--15-0!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import */ \"PORC\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_15_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ })

}]);