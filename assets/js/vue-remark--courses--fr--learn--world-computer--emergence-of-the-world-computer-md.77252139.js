(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vue-remark--courses--fr--learn--world-computer--emergence-of-the-world-computer-md"],{

/***/ "/glP":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--16-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return initFrontMatter; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"Kw5r\");\n\nvar strats = vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].config.optionMergeStrategies;\nvar key = '__vueRemarkFrontMatter';\nvar data = {\n  \"excerpt\": null,\n  \"title\": \"Partie 3: Émergence de l'ordinateur mondial\",\n  \"description\": \"Dans la troisième partie intitulée \\\"Émergence de l'ordinateur mondial,\\\" nous tenterons, couche par couche, de recréer l'implémentation technique de l'ordinateur mondial en utilisant des exemples d'Ethereum et de Polkadot, comme précédemment.\",\n  \"metaOptions\": [\"Apprendre\"],\n  \"defaultName\": \"World computer in your home\"\n};\nfunction initFrontMatter(Component) {\n  if (Component.options[key]) {\n    Component.options[key] = data;\n  }\n\n  vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].util.defineReactive(Component.options, key, data);\n  Component.options.computed = strats.computed({\n    $frontmatter: function $frontmatter() {\n      return Component.options[key];\n    }\n  }, Component.options.computed);\n}\n\n//# sourceURL=webpack:///./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/babel-loader/lib??ref--16-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "4TG7":
/*!***********************************************************************************************************!*\
  !*** ./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?vue&type=template&id=09536753& ***!
  \***********************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_09536753___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/gridsome\",\"cacheIdentifier\":\"3ec475f9-vue-loader-template\"}!../../../../node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=template&id=09536753& */ \"iLDL\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_09536753___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_09536753___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "8dCC":
/*!****************************************************************************!*\
  !*** ./courses/fr/learn/world-computer/emergence-of-the-world-computer.md ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_template_id_09536753___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=template&id=09536753& */ \"4TG7\");\n/* harmony import */ var _node_modules_gridsome_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/gridsome/node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"7uw+\");\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import */ \"U0gm\");\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter */ \"SLDS\");\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_gridsome_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  script,\n  _emergence_of_the_world_computer_md_vue_type_template_id_09536753___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _emergence_of_the_world_computer_md_vue_type_template_id_09536753___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* custom blocks */\n\nif (typeof _emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__[\"default\"] === 'function') Object(_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(component)\n\nif (typeof _emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__[\"default\"] === 'function') Object(_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(component)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "SLDS":
/*!*************************************************************************************************************************************!*\
  !*** ./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter ***!
  \*************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_16_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--16-0!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter */ \"/glP\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_16_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "U0gm":
/*!********************************************************************************************************************************!*\
  !*** ./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import ***!
  \********************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_15_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--15-0!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import */ \"ZIOA\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_15_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "UQSp":
/*!****************************************************************!*\
  !*** ./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// @vue/component\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'VueRemarkRoot',\n  render: function render(h) {\n    return h('div', null, this.$slots[\"default\"]);\n  }\n});\n\n//# sourceURL=webpack:///./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js?");

/***/ }),

/***/ "ZIOA":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--15-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _home_runner_work_robonomics_academy_robonomics_academy_node_modules_gridsome_vue_remark_src_VueRemarkRoot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js */ \"UQSp\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"Kw5r\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n\n\nvar strats = vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"].config.optionMergeStrategies;\nvar imported = {\n  VueRemarkRoot: _home_runner_work_robonomics_academy_robonomics_academy_node_modules_gridsome_vue_remark_src_VueRemarkRoot_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (Component) {\n  var components = Component.options.components = Component.options.components || {};\n  var computed = Component.options.computed = Component.options.computed || {};\n  Object.keys(imported).forEach(function (key) {\n    if (_typeof(imported[key]) === 'object' && typeof imported[key].render === 'function') {\n      components[key] = imported[key];\n    } else if (typeof imported[key] === 'function' && typeof imported[key].options.render === 'function') {\n      components[key] = imported[key];\n    } else {\n      computed[key] = function () {\n        return imported[key];\n      };\n    }\n  });\n});\n\n//# sourceURL=webpack:///./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/babel-loader/lib??ref--15-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "iLDL":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/gridsome","cacheIdentifier":"3ec475f9-vue-loader-template"}!./node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?vue&type=template&id=09536753& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('VueRemarkRoot',[_c('p',[_vm._v(\"Dans la troisième partie intitulée \\\"Émergence de l'ordinateur mondial,\\\" nous tenterons, couche par couche, de recréer l'implémentation technique de l'ordinateur mondial en utilisant des exemples d'Ethereum et de Polkadot, comme précédemment.\")]),_c('p',[_vm._v(\"Commençons par Ethereum. Ethereum a débuté en 2015 avec un état qui peut être caractérisé comme une combinaison de l'algorithme de consensus de preuve de travail, permettant à l'ordinateur mondial d'exister dans un état décentralisé (comme discuté dans la partie 2). De plus, la Machine Virtuelle Ethereum (EVM) a été introduite, servant de machine computationnelle complète de Turing. Ensemble, ces deux éléments ont formé la première version de l'ordinateur mondial, parfois appelée précurseur. Dans ce contexte, des applications décentralisées, ou contrats intelligents, ont commencé à émerger.\")]),_c('p',[_vm._v(\"Au cours des 5 années suivantes, Ethereum a vécu une vie relativement inchangée, subissant quelques ajustements techniques, tels qu'une augmentation continue des limites de gaz, à l'exception d'événements comme la fourchette de Shanghai. Notamment, lors du deuxième DEFCON tenu à Shanghai, une attaque par déni de service a exploité une fonction dans la machine virtuelle qui consommait un gaz minimal mais déclenchait des calculs significatifs sur le réseau Ethereum. Cela a conduit à un débordement de mémoire, perturbant efficacement un nœud Ethereum entier. Cet incident met en lumière les détails complexes qui surviennent lorsqu'on traite avec une solution large et abstraite comme la création d'une machine virtuelle.\")]),_c('p',[_vm._v(\"En avançant, un changement significatif s'est produit vers la fin de la décennie, particulièrement en 2020, avec l'avènement d'Ethereum 2.0. Cependant, Ethereum 2.0 a maintenant été obsolète, et je caractériserais la véritable percée comme commençant vers 2019-2020. Pendant cette période, il y a eu une véritable percée technologique dans Ethereum, se dirigeant vers le concept d'Ethereum 2.0. Le moment du changement technique dans l'architecture d'Ethereum peut être considéré comme l'événement connu sous le nom de \\\"la fusion,\\\" où les fonctionnalités de la chaîne de balises ont été combinées. La fusion a marqué un changement significatif dans le paradigme d'Ethereum, le faisant passer dans un état légèrement différent de ce qui était prévu. Le changement technique réel dans l'architecture d'Ethereum peut être associé à \\\"la fusion,\\\" où les fonctionnalités de la chaîne de balises ont été intégrées. Pour une histoire détaillée de cela, vous pouvez vous référer au site ethereum.org, qui propose un excellent article sur la coexistence de la blockchain Ethereum traditionnelle avec la blockchain parallèle lancée en 2015 et la Machine Virtuelle Ethereum.\")]),_c('p',[_vm._v(\"Lorsque la fusion s'est produite, nous avons assisté à une nouvelle représentation architecturale, à la fois au niveau du réseau et pour les nœuds individuels interagissant avec le réseau Ethereum. Quel était le changement réel? Pour beaucoup, la fusion signifie la transition de la preuve de travail à la preuve d'enjeu, ce qui est en effet significatif. Cela implique une efficacité accrue et un ajustement fin, mais c'est toujours un réglage par rapport à l'un des paramètres. Cependant, le changement d'ingénierie interne le plus remarquable pour chaque client réseau était la division. Il n'y avait plus un client réseau spécifique ou une architecture monolithique. Au lieu de cela, nous avons obtenu deux composants d'un seul nœud interagissant avec le réseau Ethereum.\")]),_c('p',[_vm._v(\"La première partie, que j'ai étiquetée \\\"chaîne de balises\\\" sur le diagramme, représente essentiellement une image collective de toutes les innovations qui sont entrées dans le client Ethereum au moment de la fusion. La deuxième partie est la machine virtuelle préservée. Néanmoins, il est également utile d'ajouter quelque chose ici. Les discussions ont vraiment commencé sur le remplacement de la machine virtuelle, qui était exclusivement conçue pour fonctionner avec des contrats intelligents et des contrats intelligents dans un langage spécifique - Solidity. Cela est dû au fait qu'en 2015, il n'y avait pratiquement plus d'interprètes pour les contrats intelligents dans des langues autres que Solidity, et l'architecture semblait quelque peu unilatérale du point de vue d'un programmeur Ethereum. Vous apprenez un extrait de JavaScript sous forme de Solidity, écrivez du code de contrat intelligent dessus et obtenez votre DApp, comme Uniswap, par exemple.\")]),_c('p',[_vm._v(\"Depuis l'émergence d'une architecture Ethereum plus complexe, les discussions ont tourné autour de l'idée que la machine virtuelle, qui existait comme un élément quelque peu monolithique à partir de 2015, peut également être remplacée dans la nouvelle architecture. La conversation s'est tournée vers son remplacement par quelque chose comme WebAssembly (Wasm) ou une solution plus intéressante du point de vue de l'écriture de code pour l'ordinateur mondial. On pourrait dire, \\\"Wasm avec un point d'interrogation.\\\"\")]),_c('p',[_vm._v(\"Du point de vue de la chaîne de balises, elle fonctionne en effet sur la preuve d'enjeu, mais ce qui est plus intéressant, c'est l'inclusion de Gasper. Cela représente une modification des idées originales sur Casper. Casper, souvent appelé le gadget de finalité du fantôme amical, a été introduit, peut-être même dès Defcon 3 ou 4, et peut-être même discuté à Defcon 2 - je ne me souviens pas précisément. Mais lors de la conférence EthCC à Paris, qui a certainement eu lieu en 2018, Vlad Zamfir et Vitalik, depuis des pièces différentes, discutaient de l'émergence de Casper en tant que fantôme amical, surveillant les participants à la preuve d'enjeu et venant en aide au réseau en cas de comportement incorrect d'un nœud. De cette idée de Casper, Gasper émerge. Sans entrer trop dans la terminologie, l'algorithme de consensus subit un changement, changeant non seulement en termes de simplicité mais devenant également plus complexe, similaire à Polkadot. Comme je l'ai mentionné précédemment, Polkadot a deux algorithmes de consensus, Babe et Grandpa. De même, avec la fonctionnalité de la chaîne de balises d'Ethereum, parvenir à un consensus et à une finalité n'est pas instantané. Cela implique des époques, et le réseau fonctionne sur un scénario plus complexe, atteignant un état déjà quelque peu dynamique, non figé, et essentiellement gravé dans la pierre.\")]),_c('p',[_vm._v(\"Que peut-on ajouter en relation avec 2024? Pour moi, c'était une observation prolongée et une tentative de comprendre si Ethereum implémenterait finalement le sharding ou non. Le sharding est la capacité d'exister non pas avec une seule blockchain mais avec plusieurs blockchains au sein d'un même réseau. Alors que j'observais la fusion et la montée simultanée des réseaux de couche 2 (L2), des questions ont surgi dans mon esprit sur la réalisation éventuelle du sharding. Le sharding me semblait intéressant en raison de son homogénéité - avoir plusieurs chaînes presque identiques, sans caractéristiques spécifiques. Cela semblait être une approche intéressante, mais pas aussi flexible qu'une approche hétérogène. Dans les réseaux L2, même il y a plusieurs années, je pouvais voir l'hétérogénéité d'Ethereum, sa capacité à fonctionner avec divers types de blockchains plus spécifiques. J'étais curieux de la direction qu'il prendrait - que le sharding, avec son homogénéité, déplacerait les solutions L2 ou que les solutions L2 avec une approche hétérogène satureraient la chaîne de balises et les principaux nœuds du réseau Ethereum.\")]),_c('p',[_vm._v(\"Aujourd'hui, en 2024, sur la base d'articles sur ethereum.org, il semble que le sharding en tant que concept ait été repoussé, et l'accent est mis sur l'aide à l'intégration de divers réseaux L2 avec la chaîne de balises et sur l'alignement avec la fonctionnalité de la chaîne principale, qui est maintenant divisée en deux éléments dans l'architecture du réseau Ethereum.\")]),_c('p',[_vm._v(\"Par conséquent, sans entrer dans les détails de la structure des réseaux L2 - bien que nous aborderons cela lorsque nous compléterons la deuxième partie du tableau - nous devrions imaginer qu'Ethereum est maintenant une sorte de Beacon Chain, un phare, une étoile guide pour de nombreux réseaux L2. Ces réseaux L2 peuvent avoir des fonctionnalités plus spécifiques, exécutant leur logique selon un ensemble de fonctions individuelles. Cela est quelque peu en ligne avec l'idée d'un couteau suisse - ne faisant pas d'Ethereum un couteau suisse, mais les réseaux L2 commencent à se différencier en architecture. Ils dupliquent la fonctionnalité de la machine informatique abstraite d'Ethereum mais l'exécutent avec des coûts de gaz plus bas ou dans leur segment spécifique. Certains pensent déjà à ajuster et à rendre leur couche L2 plus efficace, en se concentrant sur des capacités fonctionnelles spécifiques. Ainsi, à mon avis, nous assistons à l'émergence de l'hétérogénéité dans l'ordinateur mondial qui visait à être homogène. De plus, il est essentiel de ne pas oublier que les applications décentralisées (dApps) existent toujours dans la blockchain principale, dans cette même blockchain qui a commencé en 2015. Cela signifie que lors de la fusion, lors de la transition vers le nouvel état architectural, il n'y a pas eu d'effacement, pas d'effacement de l'histoire précédente. Toutes les applications décentralisées et les contrats intelligents sous-jacents à ces applications ont continué d'exister, et ils continuent d'exister aujourd'hui, et probablement demain. C'est une question que nous explorerons en utilisant Polkadot comme exemple, mais il y a encore un sentiment qu'il sera possible d'installer une application décentralisée dans la Beacon Chain - dApps.\")]),_c('p',[_vm._v(\"En résumé, imaginons l'implémentation technique de l'Ethereum d'aujourd'hui comme un ordinateur mondial. Nous avons chaque nœud de réseau composé de deux parties. La première couche est responsable de la Machine Virtuelle Ethereum (EVM), la fonctionnalité réelle de la machine virtuelle ou de la machine complète de Turing, si nous parlons en termes théoriques. Peut-être verrons-nous l'émergence d'alternatives à la machine virtuelle conçue en 2015. Ces alternatives la surpasseront probablement en termes de possibilités de programmation plus abstraites que l'écriture de contrats intelligents en Solidity. Pendant ce temps, les contrats intelligents en Solidity continuent de se sentir à l'aise. Si vous souhaitez écrire une fonctionnalité pour la chaîne principale Ethereum sans créer d'infrastructure supplémentaire sur Ethereum, sans décharger de calculs pour les rendre moins chers, etc., les applications décentralisées que vous pouvez écrire en tant que contrats intelligents peuvent toujours être hébergées dans la blockchain principale d'Ethereum. En même temps, la fonctionnalité de la Beacon Chain a émergé, séparant la logique de consensus entre les validateurs du protocole principal de la machine informatique. Cela permet une flexibilité supplémentaire dans la façon dont le consensus devrait fonctionner et comment il devrait être modifié sans affecter la machine virtuelle elle-même. L'exemple de Shanghai et de Defcon 2, où une petite erreur d'opcode a provoqué l'arrêt d'une partie de l'infrastructure, laisse entendre qu'il serait bon d'avoir de telles fonctionnalités complexes séparées en deux parties.\")]),_c('p',[_vm._v(\"Qu'est-ce qui est intéressant à propos de la Beacon Chain? C'est un algorithme plus complexe et complet pour atteindre la synchronicité et la finalisation du réseau avec l'introduction de concepts tels que \\\"époque,\\\" et la présence d'un fantôme vivant dans le réseau.\")]),_c('p',[_vm._v(\"Enfin, ce qu'il est important de considérer maintenant, c'est qu'Ethereum met effectivement fin à l'homogénéité, à l'idée d'avoir une centaine de blockchains identiques fonctionnant avec la même machine virtuelle, où les contrats intelligents écrits en Solidity peuvent résider. Au lieu de cela, divers projets proposent leurs propres architectures ou la même machine virtuelle poussée au-delà des limites de la blockchain principale. Sinon, ils essaient de construire leur application plus spécifique, qui, au niveau de la chaîne principale de la Beacon Chain, est un contrat intelligent écrit en Solidity. C'est la représentation actuelle d'Ethereum, qui n'est pas devenu Ethereum 2.0. Il reste le même Ethereum - un projet qui a commencé avec la preuve de travail + machine complète de Turing, se transformant en cette architecture.\")]),_c('p',[_vm._v(\"Maintenant, examinons comment Polkadot est apparu et a évolué au cours des 5 dernières années. Polkadot est né cinq ans après Ethereum, issu de l'équipe qui a développé l'un des meilleurs clients pour Ethereum - Parity. Beaucoup se souviendront de leur client web, qui, comparé à Geth et autres implémentations, était probablement beaucoup plus agréable à utiliser, du moins d'après mon expérience personnelle et celle de mes collègues.\")]),_c('p',[_vm._v(\"Deuxièmement, Polkadot était, à mon avis, une extension des idées que Gavin Wood souhaitait intégrer dans le développement d'Ethereum. Par conséquent, on pourrait dire qu’Ethereum, à un moment donné, s’est divisé en deux concepts.\\nQu'avions-nous au moment du lancement de Polkadot ? La chaîne de relais est lancée. Intéressant, non ? Chaîne de balise et chaîne de relais. Que représentait la chaîne de relais ? Au départ, il n'était pas possible d'y placer une application décentralisée, de rédiger un contrat intelligent pour celle-ci ou de télécharger votre code dans WASM ou Solidity. Rien de tout cela n'était disponible au moment du premier bloc ou des premiers jours d'existence de la chaîne de relais Polkadot. Il n'y avait aucun moyen d'ajouter votre temps d'exécution, dont nous parlerons sous peu, et cela n'était pas basé sur une preuve d'enjeu ; au lieu de cela, il a utilisé une preuve d’autorité. Cela a permis à certains nœuds lancés par les développeurs de Polkadot de survivre aux premiers mois ou semaines alors que des attaques pouvaient être lancées sur la chaîne ou si elle se comportait incorrectement. Cependant, cela a rapidement changé et la chaîne de relais est passée à la preuve d'enjeu.\")]),_c('p',[_vm._v(\"Finalement, après quelques mois d'existence de la chaîne de relais sans aucune fonctionnalité d'application décentralisée, sans la possibilité de connecter votre parachain ou réseau L2, sans capacités utilisateur, le réseau est passé d'un état d'autorité à une preuve d'enjeu. Cela a donné aux développeurs la possibilité de télécharger leurs runtimes.\")]),_c('p',[_vm._v(\"À ce stade, il est également intéressant de discuter des différences entre l'Ethereum d'aujourd'hui et la structure centrale de Polkadot. Du point de vue du cœur, que nous avons déjà discuté, l'image sera absolument la même non seulement pour Ethereum et Polkadot mais pour tout projet qui souhaite être présenté comme une machine informatique abstraite. Cependant, d'un point de vue technique et architectural, il est fascinant d'observer Beacon Chain & Relay Chain. Ici, nous avons une machine virtuelle, qui a été héritée depuis 2015, mais des alternatives sont proposées. Dans la chaîne de relais, il est possible de télécharger votre runtime. Le runtime est en fait votre machine virtuelle. Par exemple, certaines parachains émulent complètement la machine virtuelle Ethereum. Cela est écrit en tant que runtime, ce qui signifie que vous pouvez essentiellement télécharger un analogue de la machine virtuelle Ethereum au niveau de la parachain dans Polkadot ou écrire une logique plus spécifique qui fonctionne avec quatre ou cinq fonctions. Rappelez-vous la première partie sur les idées - vous pouvez écrire votre couteau suisse, mais cela ne nécessitera pas la création de l'infrastructure entière. Vous pouvez implémenter une fonctionnalité spécifique avec certaines fonctions au niveau du runtime, la mettre dans la chaîne de relais Polkadot, et l'immutabilité de ce runtime sera assurée par les validateurs de Polkadot.\")]),_c('p',[_vm._v(\"Qu'arrive-t-il ensuite? Au cours d'environ un an, une couche de parachains commence à se former autour de la chaîne de relais. En termes d'implémentation Ethereum, on pourrait dire que les réseaux L2 sont assez similaires aux parachains. Cependant, il y a une distinction intéressante entre les réseaux que je trouve fascinante dans Polkadot, et j'essaie de comprendre comment elle va se développer - à savoir, la deuxième couche de validation et de vérification de la disponibilité des données. Après quelques années, Polkadot prend une forme comme celle-ci. Ce n'est pas seulement une chaîne de relais où les validateurs de preuve d'enjeu protègent le runtime des futurs parachains; une couche supplémentaire et cruciale de validation des données et de vérification de la disponibilité émerge des parachains.\")]),_c('p',[_vm._v(\"En regardant ce diagramme, essayez de remarquer les analogies qui se présentent et les différences dans les détails de mise en œuvre de l'ingénierie. Alors, que représente cela, et comment ce schéma se compare-t-il à Ethereum? Nous avons un projet L2, dans ce cas, avec Polkadot, c'est une parachain. Une parachain génère également des blocs d'informations, qui vont ensuite à la chaîne de relais pour être combinés et librer un bloc de chaîne de relais comme la somme de tous les en-têtes, en-têtes et plus d'en-têtes. La parachain collecte des transactions dans un bloc en utilisant des collateurs, qui ne sont pas impliqués dans la validation. Ils ne misent rien dans la chaîne de relais; ils utilisent uniquement le runtime, qui se trouve dans la chaîne de relais. Ils le récupèrent, l'appliquent aux transactions, effectuent les transitions d'état nécessaires, forment un bloc et, de manière cruciale, fournissent une preuve de validité - un tampon contenant des preuves cryptographiques que le collateur a correctement assemblé le bloc. Ces informations vont à l'anneau de validation externe de la chaîne de relais. Dans cet anneau, il y a des validateurs internes de Polkadot - les collateurs de parachain. Encore une fois, ils ne misent rien directement du point de vue de la chaîne de relais. Les implémentations de parachain introduisent parfois leur consensus entre les collateurs, et certaines ne le font pas. Par exemple, dans Robonomics, en implémentant une parachain, nous trouvons ce paradigme plus intéressant, moins contraignant, et cela rend le réseau plus simple tout en restant fonctionnellement substantiel. Tout collateur, sans consensus avec quiconque - vérifié par nous - peut proposer un bloc et une preuve à la couche externe. C'est précisément pourquoi des blocs sont proposés, des preuves de validité de l'assemblage du bloc sont offertes, et il y a un anneau externe. Nous n'avons pas besoin de consensus des validateurs de parachain. N'importe qui peut générer un bloc et l'envoyer, et si ce nœud du collateur envoie des informations incorrectes aux validateurs de parachain sur l'anneau externe, le validateur à ce niveau le rejettera. Il ne passera pas dans la partie centrale. Mais disons que le bloc a été fourni correctement par le collateur. Nos transactions sont entrées; le collateur les a calculées, en appliquant le runtime stocké dans la chaîne de relais, a exécuté toutes les transitions d'état, a rassemblé une preuve de validité - la validité du bloc assemblé - et l'a transmise à l'anneau externe de la chaîne de relais. Ici, à chaque époque, qui fait également partie de la finalisation, chaque époque a des validateurs de la chaîne de relais divergeant vers les parachains. Certains restent au centre, et d'autres vont vers les parachains. Leur nombre varie de 16 à 64 validateurs, et ce chiffre, je crois, changera dans la spécification - quelque part plus, quelque part moins. Cependant, les validateurs de parachain révérifient les informations d'un groupe sélectionné de validateurs sur tout ce qui vient du collateur comme étant correct, que le travail a été fait conformément au runtime, et que la preuve de validité est effectivement valide. Le segment sélectionné des validateurs de la chaîne de relais qui ont déjà misé répondent, ou plutôt, gazouillent entre eux. Ils répondent au principal producteur de blocs choisi de la parachain, pour ainsi dire, en disant, \\\"Oui, nous sommes d'accord. Il n'y a pas de problèmes. Vous pouvez le faire passer à travers tout l'anneau externe à l'intérieur.\\\"\")]),_c('p',[_vm._v(\"Et ainsi, presque toutes les informations formées sur les collecteurs de parachain, avec vérification sur l'anneau externe, entrent dans l'anneau interne. La partie inférieure, non pas qu'elle soit physiquement en bas, constitue toujours l'anneau externe - la disponibilité des données. Les données commencent à être vérifiées à ce stade, ce qui signifie que sur l'anneau externe, non seulement la correction de l'assemblage des blocs est vérifiée, mais le processus de préparation à la distribution au sein du réseau Polkadot commence, garantissant que les informations de bloc ne seront pas perdues à l'avenir. Ici, précisément, est ce que j'ai mentionné dans la deuxième partie à propos des morceaux, comme CD RW. À ce stade de la préparation du bloc pour le transfert vers l'anneau interne, la couche de disponibilité des données est formée en tant que service, quelque chose qui est actuellement également tenté par certains projets dans Ethereum. Certains projets ajoutent des informations redondantes supplémentaires directement dans les contrats intelligents, nécessaires pour vérifier ce qui se passe sur la couche L2 et, si nécessaire, punir ceux qui l'ont fait incorrectement. Il est impossible de contourner l'anneau externe sans distribuer les informations de bloc et sans re-vérifier des dizaines de nœuds avec des enjeux posés sur l'hypothèse que le runtime doit fonctionner correctement.\")]),_c('p',[_vm._v(\"Ainsi, les informations qui ont traversé l'anneau externe sont déjà assez fiables, probablement oui, vous pouvez le dire, et sur l'anneau interne, le travail est principalement fait non pas avec les blocs de parachain, mais leurs en-têtes de bloc sont collectés en un seul grand en-tête. C'est-à-dire que, à partir de nombreux en-têtes, un en-tête d'un bloc de chaîne de relais est assemblé - un mécanisme de liaison dans Shared Security, comme mentionné dans Polkadot, qui garantit la sécurité des parachains. On pourrait dire que les parachains sont validés et atteignent un état où le service existe sous une forme décentralisée distribuée sur l'anneau externe. Dans l'anneau interne, les informations qui sont entrées tentent de se rassembler dans un hyperbloc, qui devrait précisément tout relier. Il n'y a pas de calculs qui se passent là-bas; il n'y a pas de recalcul de tout absolument. L'assemblage du bloc final a lieu, pour ainsi dire, dans l'itération actuelle de l'ordinateur mondial, pour mettre un point sur la question de savoir si la transaction a passé dans une parachain particulière. Nous devons assembler un hyperbloc qui ne contient pas toutes les informations des parachains mais rassemble tous les en-têtes vérifiés sur l'anneau externe des parachains en un seul grand bloc. Et ainsi, notre ordinateur mondial dans Polkadot fonctionne.\")]),_c('p',[_vm._v(\"Jetons un autre coup d'œil à ces deux schémas ensemble : chaîne de relais, chaîne de balise, exécution, sécurisée par la preuve d'enjeu, où quelqu'un mise ses fonds pour valider qu'ils effectueront toujours correctement leur travail. Il y a une machine virtuelle où vous pouvez également miser vos fonds, et si vous effectuez une quelconque computation ou transition d'état non conforme à la spécification de la Machine Virtuelle Ethereum, vous serez pénalisé.\")]),_c('p',[_vm._v(\"Dans Polkadot, il y a une couche externe supplémentaire, qui semble être l'un des principaux avantages, de tels avantages agréables de l'implémentation technique qui, à mon avis, devraient être présents ici. Elle devrait apparaître entre les réseaux L2 et la chaîne de balise, qui existe dans Ethereum. Au fait, certains disent que le terme \\\"chaîne de balise\\\" est en train de disparaître à nouveau et est mal compris, mais j'aime vraiment l'utiliser en analogie avec la \\\"chaîne de relais,\\\" un terme du plan de route d'Ethereum.\")]),_c('p',[_vm._v(\"Dans Polkadot, il y a une couche externe qui permet, ou plutôt, je pense qu'elle a été inventée, de résoudre de nombreux problèmes qui surviennent lorsque vous avez L2 ou un ensemble de blockchains qui doivent être connectés. Sur cette couche, un mécanisme d'ingénierie de distribution de l'information est mis en œuvre pour la rendre disponible dans un réseau décentralisé. Des algorithmes supplémentaires sont introduits pour vérifier non seulement la validité mais également la disponibilité des informations par les validateurs. De plus, il existe un mécanisme permettant d'attribuer aléatoirement une partie des validateurs Polkadot à des parachains spécifiques à chaque époque. Ainsi, les mêmes validateurs ne servent pas de parachains à chaque époque ; ils sont mélangés et envoyés à différentes parachaines à chaque époque. Lors du transfert d'un bloc de l'anneau externe vers l'anneau interne, les validateurs sont revérifiés en cours de route et coordonnés avec ceux affectés à la parachain. Actuellement, ce processus n’existe pas, mais je pense qu’il apparaîtra à un moment donné.\\nEt peut-être que le dernier point concerne les assembleurs, qui sont aujourd’hui implémentés de manière assez intéressante dans les parachains. Ils peuvent faire l’objet d’un consensus ou exister sans consensus, mais en fait, cela fonctionne. Quant aux questions sur les réseaux L2 avec des séquenceurs décentralisés ou sur la manière dont les blocs seront générés et vérifiés avant de s'installer dans la machine virtuelle, ce sont des questions distinctes pour la mise en œuvre d'Ethereum dans un format hétérogène. Ce jour-là, c'est assez bien mis en œuvre à Polkadot, à mon avis. Cependant, cela ne signifie pas que Polkadot est en avance sur la planète entière et qu’il ne rattrapera jamais Ethereum. Même si c'est cette architecture qui m'attire pour continuer à travailler et espérer que Polkadot continuera à bien se développer en termes de technologies car je n'ai rien vu de tel dans tous les aspects connectés.\")]),_c('p',[_vm._v(\"Et peut-être une autre histoire intéressante dans cette partie du cours : jusqu'à présent, nous pouvons à peine imaginer des messages inter-chaînes appropriés entre les réseaux L2 dans Ethereum. Peut-être ai-je manqué quelque chose dans les documents, mais lorsque vous n'avez pas d'anneau externe et que des problèmes tels que les collecteurs, les paravalidateurs et les services de disponibilité des données ne sont pas résolus, penser à comment deux couches L2 peuvent communiquer est un défi. Pourtant, dans Polkadot, cela existe. Même horizontalement, à travers la chaîne de relais, ce qui signifie directement, on peut envoyer une transaction en toute sécurité d'une parachain à une autre, sans avoir à faire confiance à des ponts entre ces deux parachains. Il s'agit d'une autre fonctionnalité cruciale qui devra probablement être mise en œuvre au niveau de la connexion des réseaux L2. Les contrats intelligents dans Ethereum communiquent bien. Nous avons créé de nombreuses chaînes de contrats intelligents liés, où l'un déclenche l'autre. Avec cela, il n'y a pas de problème. Mais lorsque nous disons que presque toutes les applications passent à la couche L2 dans un réseau hétérogène, j'entends que si vous vivez dans une zone spécifique, vous ne pourrez pas en sortir. Ce n'est pas le cas au niveau des parachains et de la mise en œuvre dans Polkadot. Les deux architectures valent la peine d'être surveillées, car, à mon avis, la mise en œuvre de l'ingénierie suit le chemin dominant de devenir un ordinateur mondial. Elles diffèrent légèrement, mais il y a de nombreuses similitudes. Il y a un énorme travail d'ingénierie partout. Comme nous le voyons, la civilisation humaine, sous la forme d'une multitude de chercheurs, d'ingénieurs et de développeurs en pleine croissance avec des ressources importantes pour le développement ultérieur, se déplace grossièrement dans la même direction depuis les premiers stades les plus petits jusqu'à probablement l'établissement futur de l'ordinateur mondial, tous sur les mêmes pistes.\")])])}\nvar staticRenderFns = []\n\n\n\n//# sourceURL=webpack:///./courses/fr/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/cache-loader/dist/cjs.js?%7B%22cacheDirectory%22:%22node_modules/.cache/gridsome%22,%22cacheIdentifier%22:%223ec475f9-vue-loader-template%22%7D!./node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ })

}]);