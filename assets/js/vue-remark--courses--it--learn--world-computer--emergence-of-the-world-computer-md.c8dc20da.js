(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vue-remark--courses--it--learn--world-computer--emergence-of-the-world-computer-md"],{

/***/ "2+4k":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--16-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/it/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return initFrontMatter; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"Kw5r\");\n\nvar strats = vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].config.optionMergeStrategies;\nvar key = '__vueRemarkFrontMatter';\nvar data = {\n  \"excerpt\": null,\n  \"title\": \"Parte 3: Emergenza del Computer Mondiale\",\n  \"description\": \"Nella terza parte intitolata \\\"Emergenza del Computer Mondiale,\\\" cercheremo, strato dopo strato, di ricreare l'implementazione ingegneristica del computer mondiale utilizzando esempi da Ethereum e Polkadot, come fatto in precedenza.\",\n  \"metaOptions\": [\"Imparare\"],\n  \"defaultName\": \"World computer in your home\"\n};\nfunction initFrontMatter(Component) {\n  if (Component.options[key]) {\n    Component.options[key] = data;\n  }\n\n  vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].util.defineReactive(Component.options, key, data);\n  Component.options.computed = strats.computed({\n    $frontmatter: function $frontmatter() {\n      return Component.options[key];\n    }\n  }, Component.options.computed);\n}\n\n//# sourceURL=webpack:///./courses/it/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/babel-loader/lib??ref--16-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "IPJl":
/*!********************************************************************************************************************************!*\
  !*** ./courses/it/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import ***!
  \********************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_15_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--15-0!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import */ \"Tnp4\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_15_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./courses/it/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "Tnp4":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--15-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/it/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _home_runner_work_robonomics_academy_robonomics_academy_node_modules_gridsome_vue_remark_src_VueRemarkRoot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js */ \"UQSp\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"Kw5r\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n\n\nvar strats = vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"].config.optionMergeStrategies;\nvar imported = {\n  VueRemarkRoot: _home_runner_work_robonomics_academy_robonomics_academy_node_modules_gridsome_vue_remark_src_VueRemarkRoot_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (Component) {\n  var components = Component.options.components = Component.options.components || {};\n  var computed = Component.options.computed = Component.options.computed || {};\n  Object.keys(imported).forEach(function (key) {\n    if (_typeof(imported[key]) === 'object' && typeof imported[key].render === 'function') {\n      components[key] = imported[key];\n    } else if (typeof imported[key] === 'function' && typeof imported[key].options.render === 'function') {\n      components[key] = imported[key];\n    } else {\n      computed[key] = function () {\n        return imported[key];\n      };\n    }\n  });\n});\n\n//# sourceURL=webpack:///./courses/it/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/babel-loader/lib??ref--15-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "UQSp":
/*!****************************************************************!*\
  !*** ./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// @vue/component\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'VueRemarkRoot',\n  render: function render(h) {\n    return h('div', null, this.$slots[\"default\"]);\n  }\n});\n\n//# sourceURL=webpack:///./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js?");

/***/ }),

/***/ "a+HG":
/*!***********************************************************************************************************!*\
  !*** ./courses/it/learn/world-computer/emergence-of-the-world-computer.md?vue&type=template&id=0a7c1dfa& ***!
  \***********************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_0a7c1dfa___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/gridsome\",\"cacheIdentifier\":\"3ec475f9-vue-loader-template\"}!../../../../node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=template&id=0a7c1dfa& */ \"am+3\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_0a7c1dfa___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_template_id_0a7c1dfa___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./courses/it/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "am+3":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/gridsome","cacheIdentifier":"3ec475f9-vue-loader-template"}!./node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/it/learn/world-computer/emergence-of-the-world-computer.md?vue&type=template&id=0a7c1dfa& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('VueRemarkRoot',[_c('p',[_vm._v(\"Nella terza parte intitolata \\\"Emergenza del Computer Mondiale,\\\" cercheremo, strato dopo strato, di ricreare l'implementazione ingegneristica del computer mondiale utilizzando esempi da Ethereum e Polkadot, come fatto in precedenza.\")]),_c('p',[_vm._v(\"Cominciamo con Ethereum. Ethereum è iniziato nel 2015 con uno stato che può essere caratterizzato come una combinazione dell'algoritmo di consenso proof-of-work, consentendo al computer mondiale di esistere in uno stato decentralizzato (come discusso nella Parte 2). Inoltre, è stata introdotta la Ethereum Virtual Machine (EVM), che funge da macchina computazionale Turing-completa. Insieme, questi due elementi hanno formato la prima versione del computer mondiale, talvolta definito come precursore. In questo contesto, le applicazioni decentralizzate, o smart contract, hanno iniziato a emergere.\")]),_c('p',[_vm._v(\"Nei successivi 5 anni, Ethereum ha vissuto una vita relativamente invariata, subendo alcuni aggiustamenti ingegneristici, come un continuo aumento dei limiti di gas, ad eccezione di eventi come il fork di Shanghai. In particolare, durante il secondo DEFCON tenutosi a Shanghai, un attacco di tipo denial-of-service ha sfruttato una funzione nella macchina virtuale che consumava un gas minimo ma attivava calcoli significativi sulla rete Ethereum. Ciò ha portato a un overflow di memoria, interrompendo efficacemente un intero nodo Ethereum. Questo incidente mette in luce i dettagli intricati che sorgono quando si tratta di una soluzione ampia e astratta come la creazione di una macchina virtuale.\")]),_c('p',[_vm._v(\"Andando avanti, si è verificato un cambiamento significativo verso la fine del decennio, in particolare nel 2020, con l'avvento di Ethereum 2.0. Tuttavia, Ethereum 2.0 è ora obsoleto, e caratterizzerei la vera svolta come iniziata intorno al 2019-2020. Durante questo periodo, c'è stata una vera svolta tecnologica in Ethereum, muovendosi verso il concetto di Ethereum 2.0. Il momento del cambiamento ingegneristico nell'architettura di Ethereum può essere considerato l'evento noto come \\\"the merge,\\\" dove le funzionalità della catena beacon sono state combinate. Il merge ha segnato un cambiamento significativo nel paradigma di Ethereum, trasformandolo in uno stato leggermente diverso da quello che era inizialmente previsto. Il vero cambiamento ingegneristico nell'architettura di Ethereum può essere associato a \\\"the merge,\\\" dove le funzionalità della catena beacon sono state integrate. Per una storia dettagliata di questo, è possibile fare riferimento al sito ethereum.org, che fornisce un eccellente articolo sulla coesistenza della tradizionale blockchain Ethereum con la blockchain parallela lanciata nel 2015 e la Ethereum Virtual Machine.\")]),_c('p',[_vm._v(\"Quando si è verificata la fusione, abbiamo assistito a una nuova rappresentazione architettonica, sia a livello di rete che per i singoli nodi che interagiscono con la rete Ethereum. Qual è stato il cambiamento effettivo? Per molti, la fusione significa il passaggio da proof-of-work a proof-of-stake, che è effettivamente significativo. Implica un aumento dell'efficienza e del perfezionamento, ma è comunque un perfezionamento relativo a uno dei parametri. Tuttavia, il cambiamento ingegneristico interno più degno di nota per ciascun client di rete è stata la divisione. Non c'era più un singolo client di rete specifico o un'architettura monolitica. Invece, abbiamo ottenuto due componenti di un singolo nodo che interagiscono con la rete Ethereum.\")]),_c('p',[_vm._v(\"La prima parte, che ho etichettato come \\\"catena di beacon\\\" nel diagramma, rappresenta essenzialmente un'immagine collettiva di tutte le innovazioni che sono entrate nel client Ethereum al momento della fusione. La seconda parte è la macchina virtuale preservata. Tuttavia, vale la pena aggiungere anche qualcosa qui. I dialoghi hanno veramente iniziato a riguardo alla sostituzione della macchina virtuale, che era esclusivamente progettata per lavorare con smart contract e smart contract in un linguaggio specifico - Solidity. Questo perché, entro il 2015, non c'erano praticamente più interpreti per smart contract in lingue diverse da Solidity, e l'architettura appariva in qualche modo unilaterale dal punto di vista di un programmatore Ethereum. Impari un frammento di JavaScript sotto forma di Solidity, scrivi codice smart contract su di esso e ottieni la tua DApp, come ad esempio Uniswap.\")]),_c('p',[_vm._v(\"Dall'emergere di un'architettura Ethereum più complessa, le discussioni hanno ruotato attorno all'idea che la macchina virtuale, che esisteva come un elemento in qualche modo monolitico dal 2015, possa anche essere sostituita nella nuova architettura. La conversazione si è spostata verso la sostituzione con qualcosa come WebAssembly (Wasm) o una soluzione più interessante dal punto di vista della scrittura di codice per il computer mondiale. Si potrebbe dire, \\\"Wasm con un punto interrogativo.\\\"\")]),_c('p',[_vm._v(\"Dal punto di vista della Catena di Beacon, opera effettivamente su proof-of-stake, ma ciò che è più interessante è l'inclusione di Gasper. Questo rappresenta una modifica delle idee originali su Casper. Casper, spesso definito come il gadget di finalità friendly ghost, è stato introdotto, forse già a Defcon 3 o 4, e forse discusso anche a Defcon 2 - non ricordo esattamente. Ma alla conferenza EthCC a Parigi, che si è svolta sicuramente nel 2018, Vlad Zamfir e Vitalik, da stanze diverse, stavano discutendo dell'emergere di Casper come un fantasma amichevole, sorvegliando i partecipanti al proof-of-stake e venendo in aiuto della rete quando un nodo si comporta male. Da questa idea di Casper emerge Gasper. Senza addentrarsi troppo nella terminologia, l'algoritmo di consenso subisce uno spostamento, cambiando non solo in termini di semplicità ma diventando anche più complesso, simile a Polkadot. Come ho già detto, Polkadot ha due algoritmi di consenso, Babe e Grandpa. Allo stesso modo, con la funzionalità della Catena di Beacon di Ethereum, raggiungere il consenso e la finalità non è istantaneo. Coinvolge epoche, e la rete opera su uno scenario più complesso, raggiungendo uno stato che è già in qualche modo dinamico, non congelato, ed è essenzialmente inciso nella pietra.\")]),_c('p',[_vm._v(\"Cosa si può aggiungere in relazione al 2024? Per me, è stata un'osservazione prolungata e un tentativo di capire se Ethereum avrebbe alla fine implementato lo sharding o meno. Lo sharding è la capacità di esistere non con una singola blockchain ma con più blockchain all'interno di una rete. Mentre osservavo la fusione e la simultanea crescita delle reti Layer 2 (L2), mi sono sorti dubbi sulla reale materializzazione dello sharding. Lo sharding mi sembrava interessante per la sua omogeneità - avere più catene che sono quasi identiche, prive di caratteristiche specifiche. Sembrava essere un approccio interessante, ma non così flessibile come un approccio eterogeneo. Nelle reti L2, anche diversi anni fa, potevo vedere l'eterogeneità di Ethereum, la sua capacità di lavorare con vari tipi di blockchain più specifiche. Ero curioso sulla direzione che avrebbe preso - se lo sharding, con la sua omogeneità, avrebbe spodestato le soluzioni L2 o se le soluzioni L2 con un approccio eterogeneo avrebbero saturato la Catena di Beacon e i nodi principali della rete Ethereum.\")]),_c('p',[_vm._v(\"Oggi, nel 2024, basandosi sugli articoli su ethereum.org, sembra che lo sharding come concetto sia stato rimandato e il focus sia sull'aiutare varie reti L2 a integrarsi con la Catena di Beacon e allinearsi con la funzionalità della catena principale, che ora è divisa in due elementi nell'architettura della rete Ethereum.\")]),_c('p',[_vm._v(\"Pertanto, senza approfondire i dettagli su come sono strutturati i network L2 - anche se ne parleremo quando completeremo la seconda parte della tavola - dovremmo immaginare che Ethereum sia ora una sorta di Beacon Chain, un faro, una stella guida per numerosi network L2. Questi network L2 possono avere funzionalità più specifiche, eseguendo la loro logica secondo un insieme di funzioni individuali. Questo è in linea con l'idea di un coltellino svizzero - non facendo di Ethereum un coltellino svizzero, ma i network L2 stanno iniziando a differenziarsi nell'architettura. Essi duplicano la funzionalità della macchina di calcolo astratta di Ethereum ma la eseguono con costi di gas inferiori o all'interno del loro segmento specifico. Alcuni stanno già pensando di ottimizzare e rendere più efficiente il loro strato L2, concentrandosi su capacità funzionali specifiche. Quindi, secondo me, stiamo assistendo all'emergere dell'eterogeneità nel computer mondiale che mirava ad essere omogeneo. Inoltre, è essenziale non dimenticare che le applicazioni decentralizzate (dApps) esistono ancora all'interno della blockchain principale, all'interno della stessa blockchain che è iniziata nel 2015. Ciò significa che durante il merge, durante il passaggio al nuovo stato architetturale, non c'è stata cancellazione, nessuna cancellazione della storia precedente. Tutte le applicazioni decentralizzate e i contratti intelligenti alla base di queste applicazioni hanno continuato a esistere, e continuano ad esistere oggi, e probabilmente domani. Questa è una questione che esploreremo utilizzando Polkadot come esempio, ma c'è ancora la sensazione che sarà possibile sistemare un'applicazione decentralizzata nella Beacon Chain - dApps.\")]),_c('p',[_vm._v(\"In sintesi, immaginiamo l'implementazione ingegneristica dell'Ethereum di oggi come un computer mondiale. Abbiamo ogni nodo di rete composto da due parti. Il primo strato è responsabile della Ethereum Virtual Machine (EVM), la funzionalità effettiva della macchina virtuale o macchina completa di Turing, se parliamo in termini teorici. Forse vedremo l'emergere di alternative alla macchina virtuale progettata nel 2015. Queste alternative probabilmente la supereranno in termini di possibilità di programmazione più astratte rispetto alla scrittura di smart contract in Solidity. Nel frattempo, i contratti intelligenti in Solidity continuano a sentirsi a proprio agio. Se si desidera scrivere funzionalità per la blockchain principale di Ethereum senza creare alcuna infrastruttura sopra Ethereum, senza scaricare calcoli per renderli più economici, e così via, le applicazioni decentralizzate che è possibile scrivere come smart contract possono ancora essere ospitate nella blockchain principale di Ethereum. Allo stesso tempo, è emersa la funzionalità di Beacon Chain, separando la logica del consenso tra i validatori dal protocollo principale della macchina di calcolo. Questo consente una maggiore flessibilità su come dovrebbe funzionare il consenso e come dovrebbe essere ulteriormente modificato senza influenzare la macchina virtuale stessa. L'esempio di Shanghai e Defcon 2, dove un piccolo errore di opcode ha causato lo spegnimento di parte dell'infrastruttura, suggerisce che sarebbe buono avere tali funzionalità complesse separate in due parti.\")]),_c('p',[_vm._v(\"Cosa c'è di interessante nella Beacon Chain? È un algoritmo più complesso e completo per raggiungere la sincronizzazione e la finalizzazione della rete con l'introduzione di concetti come \\\"epoca\\\", e la presenza di un fantasma che vive all'interno della rete.\")]),_c('p',[_vm._v(\"Infine, ciò che è importante considerare ora è che Ethereum sta effettivamente mettendo fine all'omogeneità, all'idea di avere cento blockchain identiche che lavorano con la stessa macchina virtuale, dove i contratti intelligenti scritti in Solidity possono risiedere. Invece, vari progetti stanno proponendo le proprie architetture o la stessa macchina virtuale portata oltre i limiti della blockchain principale. In alternativa, stanno cercando di costruire la propria applicazione più specifica, che, a livello della blockchain principale di Beacon Chain, è un contratto intelligente scritto in Solidity. Questa è la rappresentazione attuale di Ethereum, che non è diventato Ethereum 2.0. Rimane lo stesso Ethereum - un progetto che una volta è iniziato con la prova del lavoro + macchina completa di Turing, trasformandosi in questa architettura.\")]),_c('p',[_vm._v(\"Ora, diamo un'occhiata a come Polkadot è emerso ed è evoluto negli ultimi 5 anni. Polkadot è nato cinque anni dopo Ethereum, nato dal team che ha sviluppato uno dei migliori client per Ethereum - Parity. Molti potrebbero ricordare il loro client web, che, rispetto a Geth e altre implementazioni, probabilmente era molto più piacevole da usare, almeno dall'esperienza personale e dall'esperienza dei colleghi.\")]),_c('p',[_vm._v(\"In secondo luogo, Polkadot era, secondo me, un’estensione delle idee che Gavin Wood voleva incorporare nello sviluppo di Ethereum. Di conseguenza, si potrebbe dire che Ethereum, ad un certo punto, si è biforcato in due concetti.\\nCosa avevamo al momento del lancio di Polkadot? La catena di staffetta è stata lanciata. Interessante, vero? Catena di fari e catena di relè. Cosa rappresentava la catena di staffetta? Inizialmente, non c'era la possibilità di posizionare lì un'applicazione decentralizzata, scrivere un contratto intelligente o caricare il codice in WASM o Solidity. Niente di tutto questo era disponibile al momento del primo blocco o nei primi giorni di esistenza della catena di relè Polkadot. Non c'era modo di aggiungere il tuo runtime, di cui parleremo tra poco, e non era basato sulla prova di partecipazione; invece, ha utilizzato la prova dell'autorità. Ciò ha consentito ad alcuni nodi lanciati dagli sviluppatori Polkadot di sopravvivere per i primi mesi o settimane mentre potevano essere lanciati attacchi alla catena o se si comportava in modo errato. Tuttavia, la situazione è stata rapidamente cambiata e la catena di rilancio è passata alla prova di palo.\")]),_c('p',[_vm._v(\"Alla fine, dopo un paio di mesi di esistenza della catena di rilancio senza alcuna funzionalità di applicazione decentralizzata, senza la possibilità di collegare la tua parachain o rete L2, senza capacità utente, la rete è passata da uno stato di autorità a prova di puntata. Questo ha dato ai programmatori la possibilità di caricare i loro tempi di esecuzione.\")]),_c('p',[_vm._v(\"A questo punto, è interessante discutere anche delle differenze tra l'Ethereum di oggi e come è strutturata la parte centrale di Polkadot. Dal punto di vista del cuore, di cui abbiamo già parlato, l'immagine sarà assolutamente la stessa non solo per Ethereum e Polkadot ma per qualsiasi progetto che voglia essere presentato come una macchina di calcolo astratta. Tuttavia, dal punto di vista ingegneristico e architettonico, è affascinante osservare Beacon Chain & Relay Chain. Qui abbiamo una macchina virtuale, ereditata dal 2015, ma vengono proposte alternative. Nella catena di rilancio, c'è la possibilità di caricare il tuo tempo di esecuzione. Il tempo di esecuzione è, infatti, la tua macchina virtuale. Ad esempio, alcune parachains emulano completamente la Ethereum Virtual Machine. Viene scritto come un tempo di esecuzione, il che significa che è possibile caricare un analogo della Ethereum Virtual Machine al livello della parachain in Polkadot o scrivere logiche più specifiche che funzionano con quattro o cinque funzioni. Ricorda la parte uno sulle idee - puoi scrivere il tuo coltellino svizzero, ma non sarà necessario creare l'intera infrastruttura. Puoi implementare funzionalità specifiche con determinate funzioni a livello di tempo di esecuzione, metterle nella catena di rilancio di Polkadot e l'immutabilità di questo tempo di esecuzione sarà garantita dai validatori di Polkadot.\")]),_c('p',[_vm._v(\"Cosa succede dopo? Nel giro di circa un anno, inizia a formarsi intorno alla catena di rilancio uno strato di parachains. In termini di implementazione di Ethereum, si potrebbe dire che le reti L2 sono piuttosto simili alle parachains. Tuttavia, c'è una interessante distinzione tra reti incrociate che trovo affascinante in Polkadot, e sto cercando di capire meglio come si svilupperà, ovvero il secondo strato di convalida e controlli di disponibilità dei dati. Dopo un paio di anni, Polkadot assume una forma del genere. Non è solo una catena di rilancio in cui i validatori del proof-of-stake proteggono l'esecuzione futura delle parachains; emerge un ulteriore e cruciale strato di convalida dei dati e di controllo della disponibilità dei dati dalle parachains.\")]),_c('p',[_vm._v(\"Mentre guardi questo diagramma, cerca di notare le analogie che emergono e le differenze nei dettagli di implementazione ingegneristica. Quindi, cosa rappresenta questo, e come si confronta questo schema con Ethereum? Abbiamo un progetto L2, in questo caso, con Polkadot, è una parachain. Una parachain genera anche blocchi di informazioni, che poi vanno alla catena di rilancio per essere combinati e rilasciare un blocco di catena di rilancio come somma di tutti gli header, header e altri header. La parachain raccoglie le transazioni in un blocco utilizzando i collatori, che non sono coinvolti nella convalida. Non scommettono nulla nella catena di rilancio; utilizzano solo l'esecuzione, che è nella catena di rilancio. Lo recuperano, lo applicano alle transazioni, eseguono le transizioni di stato necessarie, formano un blocco e, soprattutto, forniscono una prova di validità - un timbro contenente prove crittografiche che il collatore ha correttamente assemblato il blocco. Queste informazioni vanno all'anello di convalida esterno della catena di rilancio. In questo anello, ci sono i validatori interni di Polkadot - i collatori delle parachain. Di nuovo, non scommettono nulla direttamente dal punto di vista della catena di rilancio. Le implementazioni delle parachain a volte introducono il loro consenso tra i collatori, e alcune no. Ad esempio, in Robonomics, implementando una parachain, troviamo questo paradigma più interessante, meno gravoso, e rende la rete più semplice pur rimanendo sostanzialmente funzionale. Qualsiasi collatore, senza raggiungere un consenso con nessuno - verificato da noi - può proporre un blocco e alcune prove all'anello esterno. Ecco perché vengono proposti blocchi, vengono offerte prove di validità dell'assemblaggio del blocco, e c'è un anello esterno. Non abbiamo bisogno di alcun consenso dai validatori delle parachain. Chiunque può generare un blocco e inviarlo, e se questo nodo del collatore invia informazioni errate ai validatori delle parachain sull'anello esterno, il validatore a questo livello lo rifiuterà. Non passerà nella parte centrale. Ma diciamo che il blocco è stato fornito correttamente dal collatore. Le nostre transazioni sono entrate; il collatore le ha calcolate, applicando l'esecuzione memorizzata nella catena di rilancio, ha eseguito tutte le transizioni di stato, ha raccolto alcune prove di validità - validità del blocco assemblato - e le ha passate all'anello esterno della catena di rilancio. Qui, ogni epoca, che fa parte anche della finalizzazione, ogni epoca ha validatori della catena di rilancio che si diramano nelle parachains. Alcuni di loro rimangono al centro, e gli altri vanno alle parachains. Il loro numero varia da 16 a 64 validatori, e questa cifra, credo, cambierà nelle specifiche - da qualche parte di più, da qualche parte di meno. Tuttavia, i validatori delle parachain riconvalidano le informazioni da un gruppo selezionato di validatori su tutto ciò che proviene dal collatore è corretto, che il lavoro è stato svolto in conformità con l'esecuzione, e che la prova di validità è effettivamente valida. Il segmento selezionato di validatori della catena di rilancio che hanno già qualcosa scommesso rispondono, o meglio, cinguettano tra loro. Rispondono al produttore principale del blocco della parachain scelto, per così dire, dicendo, \\\"Sì, siamo d'accordo. Non ci sono problemi. Puoi portarlo attraverso tutto l'anello esterno all'interno.\\\"\")]),_c('p',[_vm._v(\"E così, quasi tutte le informazioni formate sui collatori delle parachain, con verifica sull'anello esterno, entrano in quello interno. La parte inferiore, non che sia fisicamente in basso, costituisce comunque l'anello esterno - disponibilità dei dati. I dati iniziano ad essere controllati in questa fase, il che significa che sull'anello esterno non solo viene verificata la correttezza dell'assemblaggio dei blocchi, ma inizia anche il processo di preparazione per la distribuzione all'interno della rete Polkadot, garantendo che le informazioni dei blocchi non vengano perse in futuro. Qui, esattamente, è ciò di cui ho parlato nella seconda parte riguardo ai chunk, come CD RW. In questa fase di preparazione del blocco per il trasferimento all'anello interno, lo strato di disponibilità dei dati viene formato come un servizio, qualcosa che attualmente viene tentato anche da alcuni progetti su Ethereum. Alcuni progetti inseriscono informazioni ridondanti aggiuntive direttamente nei contratti intelligenti, necessarie per controllare ciò che sta accadendo sul livello L2 e, se necessario, per penalizzare coloro che lo hanno fatto in modo errato. È impossibile superare l'anello esterno senza distribuire le informazioni dei blocchi e senza ricontrollare decine di nodi con stake basato sull'assunzione che il runtime debba funzionare correttamente.\")]),_c('p',[_vm._v(\"Quindi, le informazioni che hanno superato l'anello esterno sono già piuttosto affidabili, probabilmente sì, si può dire, e sull'anello interno, il lavoro viene principalmente fatto non con i blocchi delle parachain, ma i loro header dei blocchi vengono raccolti in un unico grande header. Cioè, da molti header, viene assemblato un header di un blocco della catena di rilascio - un meccanismo di collegamento in Shared Security, come menzionato in Polkadot, che garantisce la sicurezza delle parachain. Si potrebbe dire che le parachain vengono convalidate e raggiungono uno stato in cui il servizio esiste in forma distribuita decentralizzata sull'anello esterno. Nell'anello interno, le informazioni che sono entrate cercano di unirsi in un unico iperblocco, che dovrebbe collegare tutto insieme in modo preciso. Non ci sono calcoli che avvengono lì; non c'è il ricalcolo di assolutamente tutto. L'assemblaggio del blocco finale avviene, per così dire, nell'iterazione attuale del computer mondiale, per mettere un punto sulla questione se la transazione è passata in una particolare parachain. Dobbiamo assemblare un iperblocco che contiene non tutte le informazioni delle parachain ma raccoglie tutti gli header verificati sull'anello esterno delle parachain in un unico grande blocco. E così, il nostro computer mondiale in Polkadot opera.\")]),_c('p',[_vm._v(\"Diamo un'altra occhiata insieme a questi due schemi: catena di rilancio, catena di beacon, runtime, garantito da proof of stake, dove qualcuno mette in gioco i propri fondi per convalidare che eseguiranno sempre correttamente il loro lavoro. C'è una macchina virtuale dove puoi anche mettere in gioco i tuoi fondi e, se esegui qualsiasi calcolo o transizione di stato non in conformità con la specifica della Macchina Virtuale Ethereum, sarai penalizzato.\")]),_c('p',[_vm._v(\"In Polkadot, c'è uno strato esterno aggiuntivo, che sembra essere uno dei principali vantaggi, piacevoli vantaggi dell'implementazione ingegneristica che, a mio parere, dovrebbero essere presenti qui. Dovrebbe apparire tra le reti L2 e la catena di beacon, che esiste in Ethereum. A proposito, alcuni dicono che il termine \\\"catena di beacon\\\" sta di nuovo scomparendo ed è frainteso, ma mi piace davvero usarlo in analogia con la \\\"catena di rilancio\\\", un termine dalla roadmap di Ethereum.\")]),_c('p',[_vm._v(\"In Polkadot c'è uno strato esterno che permette, o meglio, penso che sia stato inventato per risolvere molti problemi che sorgono quando hai L2 o un insieme di blockchain che devono essere collegati. Su questo livello viene implementato un meccanismo di ingegneria per la distribuzione delle informazioni per renderle disponibili in una rete decentralizzata. Vengono introdotti ulteriori algoritmi per verificare non solo la validità ma anche la disponibilità delle informazioni da parte dei validatori. Inoltre, esiste un meccanismo per assegnare casualmente una porzione di validatori Polkadot a parachain specifiche in ogni epoca. Quindi, non gli stessi validatori servono le parachain in ogni epoca; vengono mescolati e inviati a diverse parachain in ogni epoca. Quando si trasferisce un blocco dall'anello esterno a quello interno, i validatori vengono ricontrollati lungo il percorso e coordinati con quelli assegnati alla parachain. Attualmente questo processo non esiste, ma penso che apparirà ad un certo punto.\\nE forse l’ultimo punto riguarda i raccoglitori, che oggi sono implementati in modo piuttosto interessante nelle parachain. Possono essere consensuali o esistere senza consenso, ma in effetti funziona. Per quanto riguarda le domande sulle reti L2 con sequenziatori decentralizzati o su come verranno generati e verificati i blocchi prima di stabilirsi nella macchina virtuale, queste sono domande separate per l'implementazione di Ethereum in un formato eterogeneo. Ad oggi, secondo me, è abbastanza ben implementato in Polkadot. Tuttavia, ciò non significa che Polkadot sia avanti rispetto all’intero pianeta e che non raggiungerà mai Ethereum. Anche se è questa architettura che mi spinge a continuare a lavorare e sperare che Polkadot continui a svilupparsi bene in termini di tecnologie perché non ho visto nulla di simile in tutti gli aspetti connessi.\")]),_c('p',[_vm._v(\"E forse un'altra storia interessante in questa parte della lezione: finora, possiamo a malapena immaginare messaggi cross-chain adeguati tra reti L2 in Ethereum. Forse ho perso qualcosa nei documenti, ma quando non si ha un anello esterno e problemi come i collatori, i paravalidatori e i servizi di disponibilità dei dati non sono risolti, pensare a come due livelli L2 possano comunicare è una sfida. Eppure, in Polkadot, esiste. Anche orizzontalmente, attraverso la catena di rilancio, il che significa direttamente, si può inviare una transazione in modo sicuro da una parachain a un'altra, senza fidarsi di nessun ponte tra queste due parachain. Questa è un'altra funzionalità cruciale che probabilmente dovrà essere implementata a livello di connessione delle reti L2. I contratti intelligenti in Ethereum comunicano bene. Abbiamo creato molte catene di contratti intelligenti collegati, dove uno attiva l'altro. Con questo, non c'è problema. Ma quando diciamo che quasi tutte le applicazioni si stanno spostando al livello L2 in una rete eterogenea, sento dire che se vivi in una zona specifica, non potrai uscire. Questo non è il caso a livello di parachains e implementazione in Polkadot. Entrambe le architetture meritano attenzione, poiché, secondo me, l'implementazione ingegneristica segue il percorso principale di diventare un computer globale. Differiscono leggermente, ma ci sono molte somiglianze. C'è un'enorme quantità di lavoro ingegneristico ovunque. Come vediamo, la civiltà umana, sotto forma di una moltitudine di ricercatori, ingegneri e sviluppatori in crescita con risorse significative per ulteriori sviluppi, si sta muovendo approssimativamente nella stessa direzione dalla più piccola fase iniziale probabilmente fino a qualche futuro stabilimento del computer mondiale, tutti sulle stesse tracce.\")])])}\nvar staticRenderFns = []\n\n\n\n//# sourceURL=webpack:///./courses/it/learn/world-computer/emergence-of-the-world-computer.md?./node_modules/cache-loader/dist/cjs.js?%7B%22cacheDirectory%22:%22node_modules/.cache/gridsome%22,%22cacheIdentifier%22:%223ec475f9-vue-loader-template%22%7D!./node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "bR4v":
/*!*************************************************************************************************************************************!*\
  !*** ./courses/it/learn/world-computer/emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter ***!
  \*************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_16_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--16-0!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter */ \"2+4k\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_16_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./courses/it/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ }),

/***/ "rrue":
/*!****************************************************************************!*\
  !*** ./courses/it/learn/world-computer/emergence-of-the-world-computer.md ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_template_id_0a7c1dfa___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=template&id=0a7c1dfa& */ \"a+HG\");\n/* harmony import */ var _node_modules_gridsome_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/gridsome/node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"7uw+\");\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import */ \"IPJl\");\n/* harmony import */ var _emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./emergence-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter */ \"bR4v\");\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_gridsome_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  script,\n  _emergence_of_the_world_computer_md_vue_type_template_id_0a7c1dfa___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _emergence_of_the_world_computer_md_vue_type_template_id_0a7c1dfa___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* custom blocks */\n\nif (typeof _emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__[\"default\"] === 'function') Object(_emergence_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(component)\n\nif (typeof _emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__[\"default\"] === 'function') Object(_emergence_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(component)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./courses/it/learn/world-computer/emergence-of-the-world-computer.md?");

/***/ })

}]);