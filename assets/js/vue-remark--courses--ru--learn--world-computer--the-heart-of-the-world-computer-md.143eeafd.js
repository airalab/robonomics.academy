(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vue-remark--courses--ru--learn--world-computer--the-heart-of-the-world-computer-md"],{

/***/ "/pNs":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/gridsome","cacheIdentifier":"3ec475f9-vue-loader-template"}!./node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?vue&type=template&id=249c8ebc& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('VueRemarkRoot',[_c('p',[_vm._v(\"Что лежит в основе проектов, таких как Ethereum или Polkadot, или любого другого проекта web3, претендующего на звание мирового компьютера, и почему сравнение с сердцем в человеческом теле так хорошо вписывается в абстрактную архитектуру мирового компьютера?\")]),_c('p',[_vm._v(\"Давайте попробуем понять эти вопросы в этой части лекции, и для начала нам придется немного освободиться от цепей максималистов Биткоина. Скорее всего, вы уже читали одну или несколько популярно-научных статей, посвященных Биткоину в своей жизни, и главное, что практически отмечается повсюду, это три основных преимущества Биткоина как электронных денег:\")]),_c('ul',[_c('li',[_vm._v(\"Сопротивление цензуре\")]),_c('li',[_vm._v(\"Неизменяемость данных, хранящихся в блокчейне Биткоина\")]),_c('li',[_vm._v(\"Прозрачность транзакций\")])]),_c('p',[_vm._v(\"Давайте быстро пройдемся по каждому из этих свойств, и, что самое важное, в конце нам нужно будет немного отойти от них, так как мировой компьютер наследует их как своего рода наследника Биткоина.\")]),_c('p',[_c('strong',[_vm._v(\"Во-первых\")]),_vm._v(\", неизменяемость данных. Конечно, это свойство с точки зрения электронных денег имеет значительные преимущества и важность. После того, как вы отправите транзакцию или получите биткоины, через один или два блока вы постепенно начнете ощущать неизменяемость данных в блокчейне. В первые 15 минут вы можете наблюдать, используя исследователь блокчейна, как должна разрешиться транзакция. Вы уже видите ее в сети, но она не завершена, что означает, что эти биткоины еще не находятся на вашем счету. Однако, после нескольких блоков, есть уверенность, что эти средства не исчезнут с вашего счета. Со временем вероятность того, что значения каким-то образом будут перезаписаны с вашего счета, становится практически ничтожной, практически сведя к нулю. Это наше свойство неизменяемости данных. Как здорово, когда вы можете поделиться информацией с получателем, отправить им ссылку на исследователь блокчейна, и вам не нужно получать никакой бумаги или документ от банка, утверждающего, что вы отправили платеж в определенную дату и время - это второе преимущество Биткоина, которое очень полезно на практике и, вероятно, самое приятное преимущество при сравнении банковского перевода и перевода Биткоина.\")]),_c('p',[_c('strong',[_vm._v(\"Во-вторых\")]),_vm._v(\", прозрачность транзакций. Практически нет страха при использовании Биткоина, что вы окажетесь в регионе мира или подключитесь к интернет-провайдеру, через который вы не сможете выполнять операции с сетью Биткоина. Практически нет других вариантов, кроме как запереть вас в темной комнате без доступа к интернету, чтобы вы не могли использовать сеть Биткоина.\")]),_c('p',[_vm._v(\"Эти три свойства, конечно, очень важны. Теперь, чтобы понять вопрос \\\"Что находится в сердце мирового компьютера,\\\" нам нужно отойти от них, абстрагироваться и сделать небольшой скачок веры, прыжок, примерно, на 100 лет назад, в 1930-е годы.\\nВ 1936 году Алан Тьюринг сделал предложение научному сообществу решить проблему формализации и, фактически, более качественное описание такого понятия, как алгоритм. Интересно, что из предложения Алана Тьюринга выросла архитектура и развитие всей компьютерной науки в будущем, но он никоим образом не стремился к созданию персонального компьютера, и он ничего не знал о центрах обработки данных или облаках. Его задачей было предоставить способ определения алгоритма в контексте задач, стоящих перед математиками. Это увлекательная картина на протяжении столетия, что достижение компьютерной науки оказывается побочным продуктом довольно мирной проблемы среди математиков.\")]),_c('p',[_vm._v(\"Давайте погрузимся в то, что предложил Алан Тьюринг, не углубляясь слишком глубоко в теорию алгоритмов и цель, ради которой он ее предложил. Алан Тьюринг предложил машину Тьюринга, которая представляет собой бесконечную ленту (мы можем назвать ее ячейками памяти, чтобы сделать это проще), по которой движется головка для чтения и записи. Эта головка, находясь над определенной ячейкой, может читать данные, применять к ним некоторые простые операции и записывать новые значения.\")]),_c('p',[_vm._v(\"Сегодня, когда вы слышите фразы вроде этой, вам может показаться: \\\"Ну да, это жесткий диск, компьютер или что-то в этом роде.\\\" Это абсолютно верно. Это описание породило первую архитектуру компьютера. Однако основная задача машины Тьюринга заключалась в предоставлении средства представления системы или сущности, способной выполнять любые формализованные вычисления. Можно представить себе коробку или комнату, даже заполненную лампами, в которую вы вставляете свою перфокарту, карту или передаете сигнал Bluetooth, и машина начинает работать, выполняя простые операции, которые в конечном итоге решают вашу проблему. Таким образом, машина Тьюринга является универсальным вычислительным механизмом, который в первую очередь решает универсальную и важную задачу предоставления механизма, с помощью которого можно выполнять любые простые вычисления или, точнее, любые формализованные вычисления—вычисления, которые могут быть разложены на язык математики.\")]),_c('p',[_vm._v(\"В результате такого подхода к решению задач и теории алгоритмов появился персональный компьютер. Из этого определения в 2014 году по сути и возникла концепция Эфириума как первого в мире компьютера. Кратко опишем, что оно собой представляет. В качестве входных данных у нас есть набор транзакций или запросов на вычисления. Эти запросы поступают к вычислительной машине или, если говорить о ее теоретической сути, к «переходу состояний», фактическому изменению состояния. Помните, буквально пару минут назад я говорил о бесконечной ленте и движущейся по ней считывающей головке? Таким образом, голова, перемещающаяся по этой ленте, эффективно меняет состояние каждой клетки, с которой она работает. На выходе мы получаем результаты. Мы не говорим о конкретном эффекте записи в ячейку, не обсуждаем какие-либо дополнительные операции хранения, просто вводя набор данных или считывая их с бесконечной ленты, мы можем применить набор формализованных правил, написанных на нашей движущейся ленте. голову вдоль ленты. Применив к данным набор операций, мы получаем выходные значения, которые можно записать в ячейку или передать дальше по проводам, причем не только по воздуху, по проводам, но и, возможно, в будущем другими способами.\\nИменно функция перехода состояний лежит в основе мирового компьютера. Именно из этого определения Алана Тьюринга вычислительной машины для уточнения теории алгоритма и возникает понятие алгоритма, и в принципе неважно, персональный ли это компьютер или центр обработки данных. Небольшое дополнение, конечно, после того как было найдено теоретическое решение по созданию компьютера, задача в конечном итоге сосредоточилась на поиске его аппаратной формы. Поэтому неудивительно, что когда мы сегодня говорим о мировом компьютере, мы ссылаемся на теорию, которой почти сто лет. Потребовалось, можно сказать, целых 100 лет, чтобы перейти от абстрактного описания компьютера к его реальной реализации в виде серверов, вашего карманного смартфона или ноутбука на вашем столе.\")]),_c('p',[_vm._v(\"В сущности, задача последних 100 лет, после того как было найдено какое-то решение в области математики, заключалась именно в том, чтобы дать ей физическую форму, найти набор транзисторов, которые можно разместить на плате, научиться их все паять, уменьшить процессы вычислительного процессора и так далее. Неудивительно, что теория 1936 года находит применение в 2014 году для идей мирового компьютера. Эти 100 лет были заняты, в общем, в другой области - области физической реализации этого компьютера.\")]),_c('p',[_vm._v(\"Когда планета стала насыщенной, и у нас появились персональные компьютеры, вычислительные машины даже внутри умных устройств, и когда на планете начали расти центры обработки данных, вопрос сместился от аппаратного решения к тому, как может выглядеть вычислительная машина не на физическом или математически абстрактном уровне, а на каком-то нематериальном, возможно, метафизическом уровне относительно всей планеты. Однако основа остается той же: функция перехода состояния и ничего более.\")]),_c('p',[_vm._v(\"В дополнение к сказанному, чтобы мы не ограничивались только теорией 1936 года и не разрушали оковы биткойн-максималистов, откройте белую книгу Ethereum. Там вы найдете ключевую фразу \\\"Машина, полностью совместимая с Тьюрингом\\\" - это основное определение Ethereum. Машина, полностью совместимая с Тьюрингом, означает, что Ethereum может обрабатывать любые простые операции, описанные в формальном языке, операции, которые возможны. Это не набор операций, которые Ethereum может предоставить как калькулятор или сложный калькулятор для ученых. Вместо этого это абстракция, внутри которой можно загрузить любые возможные вариации, манипуляции с переменными, константами, добавления, вычисления с любыми состояниями и так далее. Вы не найдете ничего отличного от того, что предложил Тьюринг в 1930-х годах в концепции Ethereum. Вы найдете инженерную реализацию того, как это сделать. Если мы продолжим и откроем вики Polkadot, будет немного сложнее найти. Для этого вам следует использовать поиск, ввести \\\"Функция перехода состояния\\\" и в результатах поиска найти несколько упоминаний о том, что Polkadot гарантирует ничего, кроме функции перехода состояния. Ни хранение данных в блокчейне Polkadot, ни какие-либо дополнительные услуги - только чистейшее изменение состояния, вызванное входящими транзакциями и обрабатываемое валидаторами Polkadot. Теперь давайте попробуем поглубже вникнуть в это.\")]),_c('p',[_vm._v(\"Теперь давайте добавим немного к этой линейной диаграмме, чтобы перейти от теории 1930-х годов к современной реальности, где мы описываем абстрактное изображение мирового компьютера. Для этого давайте рассмотрим пример с Алисой и Бобом. Алиса, находясь в офисе, хочет запустить пылесос робота Боба для уборки дома. Если мы посмотрим на современные концепции того, как реализована связь между мобильным приложением Алисы и роботом-пылесосом дома, вы увидите примерно следующую картину: мобильное приложение Алисы генерирует транзакцию в каком-то облаке, где происходят вычисления, и результатом этих вычислений являются выходные значения, которые эффективно превращаются в команду для запуска робота-пылесоса. Было бы полезно для нас, из области робототехники и Робономики как концепций в мире web3, понять, что в облаке есть цифровой двойник этого робота, и его состояние меняется. Мы можем, в общем, не идти так далеко и остановиться на том, что Алиса отправляет транзакцию в облако, и облако, выполнив все необходимые вычисления и манипуляции, генерирует команду для запуска пылесоса Боба.\")]),_c('p',[_vm._v(\"В этой схеме сегодня есть несколько основных вопросов: если бы вы взаимодействовали с физическим компьютером перед вами или находились в комнате с роботом-пылесосом, вы бы подошли, нажали на физическую кнопку и поставили его в движение. Что меняется, когда вместо стрелок нет ручного привода, а есть коммуникационный уровень, интернет? Возникает множество вопросов о том, как мы можем безопасно соединить Алису и это облако, как мы можем быть уверены, что у Алисы есть доступ к этому облаку. Возникает вопрос о сети связи - как мы можем защитить Алису от того, что кто-то другой обратится к ее роботу-пылесосу, запросив, например, сделать видео всей ее квартиры вместо уборки, и возникает аналогичный аспект: почему робот-пылесос должен слушать это облако с таким почтением и целостностью? Почему робот должен полностью доверять этому облаку?\")]),_c('p',[_vm._v(\"Сегодняшний подход с архитектурой облачных решений, которые соединяют ваш мобильный телефон, или скорее, приложение на вашем мобильном телефоне, и какую-то технологию с другой стороны, умные устройства, основан на значительных достижениях в построении физических компьютеров. Компьютеры в центрах обработки данных сегодня - это нечто удивительное - уровень технических процессов просто удивителен. Однако с точки зрения коммуникационных технологий, когда у вас уже есть опыт работы с интернет-приложениями, кажется, что где-то там, на уровне технической школы или колледжа, или может быть не совсем рядом с тем, как разработчики, архитекторы процессоров Intel решают свои задачи сейчас. Почти все вопросы о том, как соединить Алису с Бобом, сводятся исключительно к выводу конкретного сертификата доступа на конкретный IP-адрес с обеих сторон, связывая их вместе, и облако будет владеть и делать все. Самое важное в этой схеме - делать что угодно, то есть выполнять переходы состояний или операции, которые происходят без каких-либо гарантий, что для Алисы, для Боба, они будут выполнены по той же логике. Никто не может сказать ничего о том, как устроено облако. Это черный ящик, где вычисления не формализованы, и ни Алиса, ни Боб не знают, как выполняются вычисления.\")]),_c('p',[_vm._v(\"Место, где вы должны полностью доверять - полагаясь на репутацию компании, которая владеет этими центрами обработки данных, и вы должны полностью доверять поставщикам сетевого доступа, которые выдают сертификат и проверяют безопасность вашего соединения. Фактически, если говорить о буме интернет-приложений, это огромная проблема. Проблема заключается в том, что на самом деле есть некоторые цитадели, расположенные в определенных юрисдикциях, которые работают на относительно простом технологическом стеке, чтобы соединить вас с облаком как можно проще, представляющим собой черный ящик. Недовольство этим подходом на самом деле вызывает интерес к мировому компьютеру, потому что он устроит вещи немного по-другому. И как? Давайте попробуем дополнить схему, которую мы нарисовали синим цветом прямо сейчас.\")]),_c('p',[_vm._v(\"Итак, чтобы дополнить нашу линейную диаграмму, нашу линейную диаграмму с обеих сторон, давайте взглянем на открытия, которые имеют значение в компьютерных науках и которые прямо или косвенно связаны с достижениями из мира web3.\")]),_c('p',[_vm._v(\"Давайте начнем с Лесли Лэмпорта в 1976 году. Те, кто посещал мои презентации, лекции с 2015 по 2020 год, наверняка помнят, как часто я любил упоминать, что до изобретения Биткоина проблемы, связанные с созданием децентрализованной сети, были хорошо описаны Лесли Лэмпортом в 1976 году в проблеме Византийских генералов. Решение проблемы Византийских генералов лежит в основе алгоритмов Tendermint PBFT и всех синхронных алгоритмов, используемых от Telegram Open Network до Tendermint, до Cosmos и других блокчейн-проектов, которые, соответственно, следовали пути Византийских генералов.\")]),_c('p',[_vm._v(\"Вторым интересным достижением в области интернет-технологий являются торрент-трекеры. У нас нет никакого конкретного, уже стертого, облака или черного ящика, который хранил бы файлы. Тем не менее, пользователи по всему миру, обмениваясь торрент-файлами, могут загрузить именно тот файл, который они искали, и это работает без подмены данных. Никто не загружает вам вирусы, заменяя файл. Иногда в файл может быть встроен вирус, но идея получения ссылки для загрузки и фактической загрузки чего-то, отличного от того, что вам предлагали загрузить с использованием технологии торрентов, невозможна. Подобные процессы существуют в сети IPFS, хэш-ориентированное хранилище - способ соединения различных участников с доверием к информации, которую вы передаете, без использования черного ящика, точно.\")]),_c('p',[_vm._v(\"И, конечно, Биткойн. Биткойн, как более коллективный пример, я уверен, что Сатоши Накамото хорошо знал решение Лесли Лэмпорта для проблемы византийских генералов и, конечно, наблюдал, как развивалась идея торрент-трекеров. Если мы не подчеркнем свойства, которые получил блокчейн Биткойна, такие как неизменяемость, прозрачность транзакций и, в определенной степени, устойчивость к цензуре, то Биткойн - это интернет-сервис, который выполняет переход состояния, некоторые изменения состояния на основе транзакций без центрального узла. Это пример коллективного построения глобальной сети, в которой есть постоянно функционирующая функция перехода состояния, которой мы можем доверять, и чтобы обеспечить доверие, не используются ни юрисдикции, ни конкретные IP-адреса, ни самые примитивные технологии, используемые и до сих пор используемые сегодня в построении облачных сервисов. Коллективный образ Биткойна позволил наложить общую концепцию из 1930-х годов о машине с полным набором команд на существование универсальной абстрактной функции для всего.\")]),_c('p',[_vm._v(\"Итак, что нам нужно добавить к этой схеме, чтобы представить себе глобальный компьютер? Снизу мы предоставляем валидаторов согласия или, в общем, валидаторов. Можно сказать, что \\\"Слой доступности данных\\\" - это, вероятно, фраза, которую многие слышали в этом году в Ethereum, и это также стало преимуществом Биткойна. Однако в организационной схеме глобального компьютера это один кусочек пазла и, как я упомянул, дополняет основную функцию, которая лежит в основе глобального компьютера - функцию универсального перехода состояния. Вернемся к самому началу, аналогия с сердцем в человеческом организме здесь интересна. Это не мыслящая вещь, действительно. Да, оно не генерирует, можно сказать, что гораздо важнее мозг. Тем не менее, жизнь невозможна без сердца. Оно просто качает кровь. Аналогично, в центре глобального компьютера все транзакции проходят через функцию перехода состояния, что приводит к результатам. Но чтобы организовать это в распределенной интернет-сети без необходимости доверять какой-то крепости, нам нужно дополнить картину двумя компонентами.\")]),_c('p',[_vm._v(\"Первый компонент - это набор компьютеров или узлов, готовых выполнить переход состояния. Когда вы отправляете транзакции, они не просто идут сюда; они идут к валидаторам. Валидаторы выполняют вычисления, вспоминая то, что я уже упоминал в этом текущем разговоре. Они берут вашу транзакцию, извлекают информацию из блокчейна о том, как обработать эту транзакцию, применяют эту обработку, а затем согласовывают с другими валидаторами факт того, что они правильно выполнили переход состояния. Основа глобального компьютера, с точки зрения защиты от ситуаций, когда Боб, робот-пылесос, получает правильную команду от Элис в офисе, не основана на доверии, а на кросс-проверке множеством участников сети на основе доступной информации из блокчейна. Не только из блокчейна, кстати. Это сложно, и мы не будем углубляться в это прямо сейчас, но в основном множество валидаторов по очереди следят и имеют стимулы, некоторые внутренние стимулы в рамках протокола, чтобы предотвратить выполнение этой операции неправильно универсальной и способной к вычислению машины. Валидатор эффективно обрабатывает транзакции, поступающие в глобальный компьютер, а другие валидаторы помогают предотвратить ситуации, когда один из валидаторов выполнил неправильное вычисление. Чем лучше алгоритмы консенсуса валидаторов, тем лучше защита у нас есть для функции перехода состояния или, другими словами, сердца нашего глобального компьютера.\")]),_c('p',[_vm._v(\"Вторая часть этой схемы - это служба доступности данных, которую мы всегда называли базой данных в Bitcoin или Ethereum. Фактически, нам придется отказаться от этого концепта, потому что произошло фундаментальное изменение в архитектуре всех проектов, и для тех, кто специально нацелен на глобальный компьютер, это изменение является наиболее критическим. Для простого современного примера: существуют различные реализации сетей уровня 2 поверх Ethereum - такие как Arbitrum, Optimism и другие. Если вы начнете изучать их основные различия и принципы работы, вы увидите, что в некоторых случаях сеть L2 в Ethereum отправляет большее количество данных исключительно из блокчейна первого уровня, то есть из блокчейна Ethereum. Все необходимые элементы головоломки для подтверждения правильности вычислений на уровне L2 можно найти в блокчейне Ethereum первого уровня. С другой стороны, другие подходы предполагают, что за пределами первого уровня Ethereum хранится что-то еще, что нужно найти для подтверждения правильности транзакций. Таким образом, прямо сейчас, перед нашими глазами, снова возникает вопрос об улучшении, но конкретно такой архитектуры, где транзакции проходят слева, в середине у нас есть сердце в виде функции перехода состояния, валидаторы и их консенсус позволяет правильно выполнить этот переход состояния. Но также возникает вопрос доступности данных, который необходим для обеспечения как перекрестной проверки, так и, в сущности, самого существования сервиса. Некоторые подходы и шаблоны для создания L2 поверх Ethereum сегодня задают вопрос: \\\"Что, если определенный уровень L2 потеряет данные, которые не хранит в основном блокчейне Ethereum?\\\"\")]),_c('p',[_vm._v(\"Давайте дополним эту картину тем, как устроен Polkadot. У Polkadot есть два механизма консенсуса: консенсус \\\"babe\\\", ответственный за консенсус на уровне парачейн и быстрый, и консенсус \\\"grandpa\\\", который медленный и проверяет все после. Так что, если вы погрузитесь в статью вики с названием \\\"Путь блока в сети Polkadot\\\", вы столкнетесь с интересными сокращениями. После достижения консенсуса \\\"babe\\\" на уровне парачейн, консенсус \\\"grandpa\\\" вводит концепцию \\\"доказательства правильности и доступности данных\\\". Поглубже, вы найдете термин \\\"кусок\\\" из избыточных кусков информации, вдохновленный технологиями CD RW из 90-х и 2000-х годов. Это решает вопрос о том, как сохранить информацию, когда абсолютное доверие к определенной сущности в сети невозможно. Концепция \\\"куска\\\" избыточной информации - один из этих шаблонов.\")]),_c('p',[_vm._v(\"Подводя итог, в основе лежит абстрактная функция, которая позволяет выполнять любые вычисления и была описана Аланом Тьюрингом в 1930-х годах. Персональный компьютер, по сути, является побочным эффектом математической проблемы, возникшей из работ Тьюринга. Технологии, впервые примененные в Bitcoin, такие как консенсус, который позволяет существовать сети без определенного центра данных или сущности, ответственной за правильность данных, формируют функционирующий механизм. Он выходит за рамки представления конкретной услуги для электронных денежных переводов; он позволяет нам аудитировать и контролировать любые вычисления в сети. Кроме того, мы сталкиваемся с проблемой обеспечения доступности данных, поскольку это не является первостепенной задачей мирового компьютера. Задача мирового компьютера заключается в его основе в выполнении вычислений, управлении переходами состояний и выполнении вычислений, в то время как данные в этой схеме служат пазлом, который более необходим для поддержки нижней части. Таким образом, эту общую схему можно рассматривать как абстрактное и обобщенное изображение структуры мирового компьютера, где функция перехода состояния находится в его основе.\")])])}\nvar staticRenderFns = []\n\n\n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?./node_modules/cache-loader/dist/cjs.js?%7B%22cacheDirectory%22:%22node_modules/.cache/gridsome%22,%22cacheIdentifier%22:%223ec475f9-vue-loader-template%22%7D!./node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "1D3R":
/*!***********************************************************************************************************!*\
  !*** ./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?vue&type=template&id=249c8ebc& ***!
  \***********************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_the_heart_of_the_world_computer_md_vue_type_template_id_249c8ebc___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/gridsome\",\"cacheIdentifier\":\"3ec475f9-vue-loader-template\"}!../../../../node_modules/gridsome/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./the-heart-of-the-world-computer.md?vue&type=template&id=249c8ebc& */ \"/pNs\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_the_heart_of_the_world_computer_md_vue_type_template_id_249c8ebc___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_cache_gridsome_cacheIdentifier_3ec475f9_vue_loader_template_node_modules_gridsome_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_the_heart_of_the_world_computer_md_vue_type_template_id_249c8ebc___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?");

/***/ }),

/***/ "8uti":
/*!********************************************************************************************************************************!*\
  !*** ./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import ***!
  \********************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_15_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_the_heart_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--15-0!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./the-heart-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import */ \"cOUO\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_15_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_the_heart_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?");

/***/ }),

/***/ "9I3S":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--16-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return initFrontMatter; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"Kw5r\");\n\nvar strats = vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].config.optionMergeStrategies;\nvar key = '__vueRemarkFrontMatter';\nvar data = {\n  \"excerpt\": null,\n  \"title\": \"Часть 2: Сердце мирового компьютера\",\n  \"description\": \"Что лежит в основе проектов, таких как Ethereum или Polkadot, или любого другого проекта web3, претендующего на звание мирового компьютера, и почему сравнение с сердцем в человеческом теле так хорошо вписывается в абстрактную архитектуру мирового компьютера?\",\n  \"metaOptions\": [\"Учить\"],\n  \"defaultName\": \"World computer in your home\"\n};\nfunction initFrontMatter(Component) {\n  if (Component.options[key]) {\n    Component.options[key] = data;\n  }\n\n  vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].util.defineReactive(Component.options, key, data);\n  Component.options.computed = strats.computed({\n    $frontmatter: function $frontmatter() {\n      return Component.options[key];\n    }\n  }, Component.options.computed);\n}\n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?./node_modules/babel-loader/lib??ref--16-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ }),

/***/ "E+xu":
/*!*************************************************************************************************************************************!*\
  !*** ./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter ***!
  \*************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_16_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_the_heart_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--16-0!../../../../node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!../../../../node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./the-heart-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter */ \"9I3S\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_16_0_node_modules_gridsome_node_modules_vue_loader_lib_index_js_ref_17_0_node_modules_gridsome_vue_remark_lib_loader_js_ref_17_1_the_heart_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?");

/***/ }),

/***/ "FemU":
/*!****************************************************************************!*\
  !*** ./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _the_heart_of_the_world_computer_md_vue_type_template_id_249c8ebc___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./the-heart-of-the-world-computer.md?vue&type=template&id=249c8ebc& */ \"1D3R\");\n/* harmony import */ var _node_modules_gridsome_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/gridsome/node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"7uw+\");\n/* harmony import */ var _the_heart_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./the-heart-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import */ \"8uti\");\n/* harmony import */ var _the_heart_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./the-heart-of-the-world-computer.md?vue&type=custom&index=1&blockType=vue-remark-frontmatter */ \"E+xu\");\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_gridsome_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  script,\n  _the_heart_of_the_world_computer_md_vue_type_template_id_249c8ebc___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _the_heart_of_the_world_computer_md_vue_type_template_id_249c8ebc___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* custom blocks */\n\nif (typeof _the_heart_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__[\"default\"] === 'function') Object(_the_heart_of_the_world_computer_md_vue_type_custom_index_0_blockType_vue_remark_import__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(component)\n\nif (typeof _the_heart_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__[\"default\"] === 'function') Object(_the_heart_of_the_world_computer_md_vue_type_custom_index_1_blockType_vue_remark_frontmatter__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(component)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?");

/***/ }),

/***/ "UQSp":
/*!****************************************************************!*\
  !*** ./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// @vue/component\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'VueRemarkRoot',\n  render: function render(h) {\n    return h('div', null, this.$slots[\"default\"]);\n  }\n});\n\n//# sourceURL=webpack:///./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js?");

/***/ }),

/***/ "cOUO":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--15-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1!./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?vue&type=custom&index=0&blockType=vue-remark-import ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _home_runner_work_robonomics_academy_robonomics_academy_node_modules_gridsome_vue_remark_src_VueRemarkRoot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@gridsome/vue-remark/src/VueRemarkRoot.js */ \"UQSp\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"Kw5r\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n\n\nvar strats = vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"].config.optionMergeStrategies;\nvar imported = {\n  VueRemarkRoot: _home_runner_work_robonomics_academy_robonomics_academy_node_modules_gridsome_vue_remark_src_VueRemarkRoot_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (Component) {\n  var components = Component.options.components = Component.options.components || {};\n  var computed = Component.options.computed = Component.options.computed || {};\n  Object.keys(imported).forEach(function (key) {\n    if (_typeof(imported[key]) === 'object' && typeof imported[key].render === 'function') {\n      components[key] = imported[key];\n    } else if (typeof imported[key] === 'function' && typeof imported[key].options.render === 'function') {\n      components[key] = imported[key];\n    } else {\n      computed[key] = function () {\n        return imported[key];\n      };\n    }\n  });\n});\n\n//# sourceURL=webpack:///./courses/ru/learn/world-computer/the-heart-of-the-world-computer.md?./node_modules/babel-loader/lib??ref--15-0!./node_modules/gridsome/node_modules/vue-loader/lib??ref--17-0!./node_modules/@gridsome/vue-remark/lib/loader.js??ref--17-1");

/***/ })

}]);